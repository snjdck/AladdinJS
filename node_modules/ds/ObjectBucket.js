'use strict';

class ObjectBucket
{
	constructor(){
		this.root = new Map();
		this.keyFnList = [];
		this.updateFnList = [];
	}

	regKeyFn(keyFn, updateFn){
		this.keyFnList.push(keyFn);
		this.updateFnList.push(updateFn);
	}

	newMap(){
		return new Map();
	}

	clear(){
		this.root.clear();
	}

	add(element, override){
		const {keyFnList} = this;
		let map = this.root;
		for(let i=0, n=keyFnList.length; i<n; ++i){
			let key = keyFnList[i](element, override);
			if(!map.has(key))
				map.set(key, this.newMap());
			map = map.get(key);
		}
		map.set(element);
	}

	forEach(execFn, thisArg){
		walk.call(thisArg, this.root, execFn, this.updateFnList, 0);
	}
}

function walk(map, execFn, fnList, index){
	const fn = fnList[index];
	const nextIndex = index + 1;
	if(nextIndex == fnList.length){
		for(let key of map.keys()){
			fn.call(this, key);
			execFn.call(this, Array.from(map.get(key).keys()));
		}
	}else{
		for(let key of map.keys()){
			fn.call(this, key);
			walk.call(this, map.get(key), execFn, fnList, nextIndex);
		}
	}
}

module.exports = ObjectBucket;
