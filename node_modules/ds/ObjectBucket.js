'use strict';

const ObjectCache = require('utils/ObjectCache');

class ObjectBucket
{
	constructor(keyFn){
		Object.defineProperty(this, 'mapObjCache', {value: new ObjectCache(Map, v => v.clear())});
		Object.defineProperty(this, 'root', {value: new Map()});
		Object.defineProperty(this, 'keyFn', {value: keyFn});
	}

	clear(){
		this.root.clear();
		this.mapObjCache.putAllIn();
	}

	add(element){
		let map = this.root;
		for(let key of this.keyFn(element)){
			if(!map.has(key))
				map.set(key, this.mapObjCache.getOut());
			map = map.get(key);
		}
		map.set(element);
	}

	forEach(self, ...fnList){
		walk.call(self, this.root, fnList, 0);
	}
}

function walk(map, fnList, index){
	const fn = fnList[index];
	const nextIndex = index + 1;
	const lastFnIndex = fnList.length - 1;
	for(let key of map.keys()){
		fn.call(this, key);
		let value = map.get(key);
		if(nextIndex == lastFnIndex){
			fn.call(this, value.keys());
		}else{
			walk.call(this, value, fnList, nextIndex);
		}
	}
}

//module.exports = ObjectBucket;
function * keyFn(element){
	yield element.name;
	yield element.age;
}

let t = new ObjectBucket(keyFn);

t.add({name:'alex', age:100});
t.add({name:'alex', age:200});
t.add({name:'lilei', age:300});
t.add({name:'lilei', age:300, t:'t'});

console.log(t.root);
let fn = v => console.log(v)
t.forEach(null, fn, fn, fn)
