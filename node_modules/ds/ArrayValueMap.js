'use strict';

class ArrayValueMap
{
	constructor(iterable){
		this.map = new Map(iterable);
	}

	get size(){
		return this.map.size;
	}

	add(k, v){
		if(this.map.has(k)){
			this.map.get(k).push(v);
		}else{
			this.map.set(k, [v]);
		}
		return this;
	}

	delete(k, v){
		if(!this.map.has(k)){
			return false;
		}
		let array = this.map.get(k);
		let index = array.indexOf(v);
		if(index >= 0){
			array.splice(index, 1);
			return true;
		}
		return false;
	}

	has(k, v){
		return this.map.has(k) && this.map.get(k).includes(v);
	}

	get(k){
		return this.map.get(k);
	}

	clear(){
		this.map.clear();
	}

	forEach(fn, thisArg){
		for(let [k, v] of this.entries())
			fn.call(thisArg, v, k, this);
	}

	keys(){
		return this.map.keys();
	}

	values(){
		return this.map.values();
	}

	entries(){
		return this.map.entries();
	}

	[Symbol.iterator](){
		return this.map.entries();
	}
}

module.exports = ArrayValueMap;
