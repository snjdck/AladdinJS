const parse = require('./parser');

let data = parse(process.cwd(), 'test1.txt');
console.log(data/*, castNodeList(data.tree)*/);
console.log(JSON.stringify(decode(data)))
//https://docs.python.org/3/library/ast.html

function decode(data, offset=0){
	function nextID(){
		const start = offset;
		while(/\w/.test(data[offset]))
			++offset;
		return data.slice(start, offset);
	}
	function readList(end, fn, defaultValue){
		const result = [];
		if(data[++offset] == end){
			++offset;
			return defaultValue || result;
		}
		for(;;){
			result.push(fn());
			if(data[offset] != end){
				offset += 2;
			}else{
				++offset;
				break;
			}
		}
		return result;
	}
	function nextExp(){
		if(offset >= data.length)return;
		if(/\d/.test(data[offset]))return nextID();
		if(data[offset] == "'"){
			++offset;
			let value = nextID();
			++offset;
			return value;
		}
		if(data[offset] == '['){
			return readList(']', nextExp);
		}
		let type = nextID();
		if(data[offset] != '('){
			return {type:'const', value:type};
		}
		let args = {type};
		readList(')', () => args[nextID()] = (++offset, nextExp()), args);
		return args;
	}
	return nextExp();
}


function castNodeList(list){
	return list.map(castNode).join('\n') + '\n'
}

function castNode(node){
	if(node.type == 'number'){
		return node.value;
	}
	if(node.type == 'string'){
		return "'" + node.value + "'";
	}
	if(node.type == 'array'){
		return '[' + node.value.map(castNode) + ']';
	}
	if(node.type == 'call'){
		return node.name + '(' + node.args.map(castNode) + ')'
	}
	if(node.type == 'assign'){
		return node.name + ' = ' + castNode(node.value);
	}
	if(node.type == 'while'){
		return `while(${castNode(node.condition)}){\n${castNodeList(node.code)}}`
	}
	if(node.type == 'for of'){
		return `for(let ${node.name} of ${castNode(node.iter)}){\n${castNodeList(node.code)}}`
	}
	if(node.type == 'if'){
		let result = `if(${castNode(node.condition)}){\n${castNodeList(node.code)}}`
		if(node.orelse.length == 0){
			return result;
		}
		if(node.orelse.length == 1 && node.orelse[0].type == 'if'){
			return result + 'else ' + castNode(node.orelse[0]);
		}
		return result + `else{\n${castNodeList(node.orelse)}}`;
	}
}