'use strict';

function addListener(emitter, eventName, listener, once){
	const value = {fn: listener, once};
	const list = emitter.map[eventName];
	if(list){
		list.push(value);
	}else{
		emitter.map[eventName] = [value];
	}
	return emitter;
}

class EventEmitter
{
	constructor(){
		this.map = Object.create(null);
	}

	on(eventName, listener){
		return addListener(this, eventName, listener, false);
	}

	once(eventName, listener){
		return addListener(this, eventName, listener, true);
	}

	off(eventName, listener){
		const list = this.map[eventName];
		if(list){
			for(let i=list.length-1; i>=0; --i){
				if(list[i].fn === listener){
					list.splice(i, 1);
				}
			}
		}
		return this;
	}

	emit(eventName, ...args){
		const list = this.map[eventName];
		if(list && list.length > 0){
			for(let i=0; i<list.length; ++i){
				list[i].fn.apply(this, args);
			}
			for(let i=list.length-1; i>=0; --i){
				if(list[i].once)list.splice(i, 1);
			}
			return true;
		}
		return false;
	}

	removeAllListeners(eventName){
		const {map} = this;
		if(eventName){
			const list = map[eventName];
			if(list && list.length > 0){
				list.length = 0;
			}
		}else{
			for(let key in map){
				const list = map[key];
				if(list.length > 0){
					list.length = 0;
				}
			}
		}
		return this;
	}
}

const {prototype} = EventEmitter;

Object.defineProperty(prototype, 'addListener', {value: prototype.on});
Object.defineProperty(prototype, 'removeListener', {value: prototype.off});

module.exports = EventEmitter;
