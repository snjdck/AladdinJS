"use strict";

const Transform2D = require("./Transform2D");
const {DrawMode} = require("./renderers");
const assert = require("assert");

class DisplayObject2D extends Transform2D
{
	constructor(){
		super();
		Object.defineProperty(this, "_children", {value:[]});
		this.mouseEnabled = false;
		this.mouseChildren = true;
		this.visible = true;
	}

	isVisible(){
		return this.visible && super.isVisible();
	}

	set parent(value){
		value.addChild(this);
	}

	onUpdate(timeElapsed){
		this.events.emit("enterFrame");
		for(let child of this._children){
			if(child.isVisible()){
				child.onUpdate(timeElapsed);
			}
		}
	}

	onDraw(gl, mode){
		for(let child of this._children){
			if(child.isVisible()){
				child.draw(gl, mode);
			}
		}
	}

	draw(gl, mode){
		if(mode != DrawMode.Pick && this.filter){
			this.filter.draw(gl, this);
		}else{
			this.onDraw(gl, mode);
		}
	}

	forEach(fn){
		for(let child of this._children){
			if(child.isVisible()){
				child.forEach(fn);
			}
		}
		fn(this);
	}

	addChild(child){
		return this.addChildAt(child, this.numChildren);
	}

	removeChild(child){
		let index = this.getChildIndex(child);
		if(index >= 0)
			return this.removeChildAt(index);
	}

	addChildAt(child, index){
		assert(0 <= index && index <= this.numChildren);
		if(child.parent != null){
			if(child.parent == this){
				this.setChildIndex(child, Math.min(index, this.numChildren-1));
				return child;
			}
			child.parent.removeChild(child);
		}
		let {_children} = this;
		_children.splice(index, 0, child);
		child._parent = this;
		child.markWorldMatrixDirty();
		return child;
	}

	removeChildAt(index){
		assert(0 <= index && index < this.numChildren);
		let child = this._children.splice(index, 1)[0];
		child._parent = null;
		child.markWorldMatrixDirty();
		return child;
	}

	getChildAt(index){
		assert(0 <= index && index < this.numChildren);
		return this._children[index];
	}

	getChildIndex(child){
		return this._children.indexOf(child);
	}

	contains(child){
		return this.isDescendant(child);
	}

	setChildIndex(child, index){
		assert(0 <= index && index < this.numChildren);
		let prevIndex = this.getChildIndex(child);
		if(prevIndex < 0 || prevIndex == index)return;
		let {_children} = this;
		_children.splice(prevIndex, 1);
		_children.splice(index, 0, child);
	}

	swapChildren(child1, child2){
		this.swapChildrenAt(this.getChildIndex(child1), this.getChildIndex(child2));
	}

	swapChildrenAt(index1, index2){
		if(index1 == index2)return;
		let {_children} = this;
		let child1 = _children[index1];
		let child2 = _children[index2];
		if(child1 && child2){
			_children[index1] = child2;
			_children[index2] = child1;
		}
	}

	get bottomChild(){
		return this.getChildAt(0);
	}

	get topChild(){
		return this.getChildAt(this.numChildren-1);
	}

	swapChildToTop(child){
		let childIndex = getChildIndex(child);
		if(childIndex < 0)return;
		let lastIndex = this.numChildren - 1;
		if(childIndex < lastIndex){
			this.swapChildrenAt(childIndex, lastIndex);
		}
	}

	swapChildToBottom(child){
		let childIndex = this.getChildIndex(child);
		if(childIndex > 0){
			this.swapChildrenAt(childIndex, 0);
		}
	}

	swapSelfToTop(){
		this.parent.swapChildToTop(this);
	}
	
	swapSelfToBottom(){
		this.parent.swapChildToBottom(this);
	}
}

module.exports = DisplayObject2D;