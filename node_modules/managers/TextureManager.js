"use strict";

const {decodeBmp} = require("../fileformats/images");

class TextureManager{
	constructor(gl){
		this.gl = gl;
		this.textureDict = new Map();
		this.texture = gl.createDomTexture("texture3")
	}

	fetch(name){
		return this.texture;
		let {textureDict, gl} = this;
		let {assetMgr} = gl;
		if(textureDict.has(name)){
			let info = textureDict.get(name);
			return info.asset;
		}

		let info = {name};
		textureDict.set(name, info);
		console.log("--------------",name)
		if(name.endsWith(".tga")){
			assetMgr.loadFile("app16.bmp").then(data => {
				data = decodeBmp(Buffer.from(data));
				info.asset = createTexture(gl, data.width, data.height, data.data);
			});
			return;
		}
		assetMgr.loadImage(name).then(_ => {
			info.asset = gl.createDomTexture(name);
		});
	}
}

function createTexture(gl, width, height, imageRawData){
	let texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D, texture);
	gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, imageRawData);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	texture.width = width;
	texture.height = height;
	return texture;
}

module.exports = TextureManager;
