'use strict';

const Vulkan = require('../Vulkan');



class MouseManager
{
	constructor(){
		const mouseEventHandler = this.onMouseEvent.bind(this);
		const {canvas} = Vulkan;
		for(let evtType of ["mousedown", "mouseup", "mousemove"]){
			canvas.addEventListener(evtType, mouseEventHandler);
		}
	}

	onMouseEvent(evt){
		this.requestPick = true;
		this.mouseEvent = evt;
		this.mouseX = evt.x;
		this.mouseY = evt.y;
	}

	onFrameEnd(){
		if(!this.requestPick)return;
		this.requestPick = false;
		const {canvas, view3d} = Vulkan;
		const camera = view3d.scene3d.camera;

		if(this.mouseEvent.type != 'mousedown'){
			return
		}
		
		const x = this.mouseX * 2 / canvas.width - 1;
		const y = 1 - this.mouseY * 2 / canvas.height;
		const ray = camera.lens.screenToCamera(x, y);
		ray.cameraToWorld(camera.worldTransform);
		for(const drawUnit of view3d.scene3d.collectDrawUnits(camera)){
			ray.hitTestAABB(drawUnit.entity.bound);
		}
	}
}

module.exports = MouseManager;
