'use strict';

class Render2D
{
	constructor(){
		this.handlerDict = {};
	}

	calcKey(type, mode){
		return type + '@' + mode;
	}

	register(type, handler, mode=''){
		this.handlerDict[this.calcKey(type, mode)] = handler;
	}

	draw(target, mode=''){
		const type = target.type;
		const handler = this.handlerDict[this.calcKey(type, mode)];
		if(!handler)return;
		handler.call(target, mode, type);
	}
}

function LabelDrawer(){
	if(!this._text)return;
	const {worldTransform, fontSize} = this;
	const {bitmapQueue, textMgr} = Vulkan;
	for(let bitmap of textMgr.getTextBitmap(worldTransform, this._text, fontSize)){
		bitmapQueue.add(bitmap);
	}
}

function BitmapDrawer(){
	if(!this.texture);
	Vulkan.bitmapQueue.add(this);
}

function createRender2D(){
	const render = new Render2D();
	render.register('bitmap', BitmapDrawer);
	render.register('bitmap3d', BitmapDrawer);
	return render;
}

exports.Render2D = Render2D;
exports.LabelDrawer = LabelDrawer;
exports.BitmapDrawer = BitmapDrawer;
exports.createRender2D = createRender2D;

const {Vulkan} = require('./lib');
