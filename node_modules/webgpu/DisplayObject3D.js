'use strict';

const DisplayObject = require('./DisplayObject');
const Quaternion = require('./math/Quaternion');
const Vector3D = require('./math/Vector3D');
const Mat3x4 = require('./math/Matrix3D');
const Signal = require('mvc/node_modules/signal');

class DisplayObject3D extends DisplayObject
{
	constructor(){
		super(Mat3x4);

		this.$addAttributeNumber('x', 0);
		this.$addAttributeNumber('y', 0);
		this.$addAttributeNumber('z', 0);
		this.$addAttributeNumber('scaleX', 1);
		this.$addAttributeNumber('scaleY', 1);
		this.$addAttributeNumber('scaleZ', 1);
		this.$addAttributeObject('scale', new Vector3D());
		this.$addAttributeObject('rotation', new Quaternion());
		this.$addAttributeObject('translation', new Vector3D());
		this.$addAttributeTransform(value => Mat3x4.compose(value, this.rotation, this.x, this.y, this.z, this.scaleX, this.scaleY, this.scaleZ));

		this.mouseDownSignal = new Signal();
	}

	addChild(child){
		if(child.parent){
			if(child.parent === this){
				return child;
			}
			child.parent.removeChild(child);
		}

		this.children.push(child);
		return super.addChild(child);
	}

	removeChild(child){
		if(this.hasChild(child)){
			const {children} = this;
			children.splice(children.indexOf(child), 1);
			return super.removeChild(child);
		}
		return child;
	}
/*
	*collectEntities(camera){
		if(!this.visible)return;
		if(camera.canCull(this))return;
		yield* this.onCollectEntities(camera);
	}

	*onCollectEntities(camera){
		for(const child of this.children){
			yield* child.collectEntities(camera);
		}
	}
*/
	moveTo(x, y, z=0){
		this.x = x;
		this.y = y;
		this.z = z;
	}
}

module.exports = DisplayObject3D;
