'use strict';

const DisplayObject = require('./DisplayObject');
const Quaternion = require('./math/Quaternion');
const Mat3x4 = require('./mat3x4');
const {defineSubMainProp} = require('utils/cache');

class DisplayObject3D extends DisplayObject
{
	constructor(){
		super(addPropTransform, Mat3x4);
	}

	addChild(child){
		if(child.parent){
			if(child.parent === this){
				return child;
			}
			child.parent.removeChild(child);
		}

		this.children.push(child);
		return super.addChild(child);
	}

	removeChild(child){
		if(this.hasChild(child)){
			const {children} = this;
			children.splice(children.indexOf(child), 1);
			return super.removeChild(child);
		}
		return child;
	}

	*collectEntities(camera){
		if(!this.visible)return;
		if(camera.canCull(this))return;
		yield* this.onCollectEntities(camera);
	}

	*onCollectEntities(camera){
		for(const child of this.children){
			yield* child.collectEntities(camera);
		}
	}

	moveTo(x, y, z=0){
		this.x = x;
		this.y = y;
		this.z = z;
	}
}

const addPropTransform = defineSubMainProp('transform', function(){
	return Mat3x4.compose(this.transform,
		this.rotation,
		this.x, this.y, this.z,
		this.scaleX, this.scaleY, this.scaleZ
	);
}, {x: 0.0, y: 0.0, z: 0.0, scaleX: 1.0, scaleY: 1.0, scaleZ: 1.0, rotation: () => new Quaternion()});

module.exports = DisplayObject3D;
