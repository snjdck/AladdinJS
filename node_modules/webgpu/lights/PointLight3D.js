"use strict";

const Vulkan = require('../Vulkan');
const {createDepthDrawFn} = require('../helper/RectDrawer');
const {CommandEncoder} = require('../core/CommandEncoder');
const {fetchCubeDepth} = require('../Vulkan/resource');
const Material = require('../materials/Material');
const Lens = require('../cameras/Lens');
const Camera3D = require('../cameras/Camera3D');
const Light3D = require('./Light3D');
const {drawDepthMap} = require('../helper/CubeTextureDrawer');

const width = 4096;
const height = 4096;
const zNear = 100;
const zFar = 20000;

class PointLight3D extends Light3D
{
	constructor(){
		super();
		this.camera = new Camera3D(new Lens.Perspective(Math.PI / 2, 1, zNear, zFar));
	}

	drawForward(){

	}

	drawDeferred(ctx){
		const {width, height} = Vulkan.canvas;
		for(let commandEncoder of CommandEncoder(Vulkan.device)){
			for(let renderPassEncoder of commandEncoder.beginRenderPass('load+store', ctx.lightView)){
				renderPassEncoder.setViewportWH(width, height);
				renderPassEncoder.setPipeline(drawFn);
				renderPassEncoder.setResources({
					'depthTexture': ctx.depthView,
					'normalTexture': ctx.normalView,
					'lightDepthTexture': this.depthView,
					'cameraMatrixList':{buffer:tempBuffer},
				});
				renderPassEncoder.drawQuad();
			}
		}
	}

	drawShadow(ctx){
		//tempBuffer.set(this.lens.rawData);
		//tempBuffer.set(this.worldTransformInvert.rawData, 16);
	}

	drawShadowMap(root){
		this.camera.render(root, collectShadowUnits);
	}

	drawDepthMap(shadowCasterList, viewCamera){
		//console.log('shadowCasterList');
		//return
		this.camera.moveTo(this.x, this.y, this.z);

		tempBuffer.set(this.camera.lens.rawData, 0);
		tempBuffer.set(this.camera.worldTransformInvert.rawData, 16);
		tempBuffer.set(viewCamera.lens.matrixInvert, 32);
		tempBuffer.set(viewCamera.worldTransform.rawData, 32+16);

		const {depthView, depthStencilView} = fetchCubeDepth({width, height}, Vulkan.device);
		this.depthView = depthView;

		for(let [renderPassEncoder, mvp] of drawDepthMap(Vulkan.device, this, zNear, zFar, depthStencilView)){
			Material.drawDepth(renderPassEncoder, shadowCasterList, mvp);
		}
	}
}

const tempBuffer = new Float32Array(64+8);
//const uv_scale = new Float32Array(2);

const drawFn = createDepthDrawFn('cube', `
fn calcLight(normal_in_world:vec3<f32>, pos_in_light_camera:vec3<f32>, shadow_factor:f32) -> vec4<f32> {
	let normal_factor = max(0, dot(normal_in_world, -normalize(pos_in_light_camera)));

	let lightPower = length(pos_in_light_camera);
	let lightRange = 200000.0;

	return vec4(vec3<f32>(1 - lightPower / lightRange) * normal_factor * shadow_factor * 0.5, 1);
}
`);

module.exports = PointLight3D;