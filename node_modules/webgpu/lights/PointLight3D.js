"use strict";

const Vulkan = require('../Vulkan');
const {createDepthDrawFn} = require('../helper/RectDrawer');
const {CommandEncoder, beginRenderPass} = require('../helper/CommandEncoder');
const {fetchCubeDepth} = require('../Vulkan/resource');
const {CubeDepthMaterial} = require('../materials/DepthMaterial');
const Lens = require('../cameras/Lens');
const Camera3D = require('../cameras/Camera3D');
const Quaternion = require('../math/Quaternion');
const {RADIAN} = require('../math');
const Light3D = require('./Light3D');
const {drawDepthMap} = require('../helper/CubeTextureDrawer');

const width = 4096;
const height = 4096;
const zNear = 100;
const zFar = 20000;

class PointLight3D extends Light3D
{
	constructor(){
		super();
		this.camera = new Camera3D(new Lens.Perspective(Math.PI / 2, 1, zNear, zFar));
	}

	drawForward(){

	}

	drawDeferred(ctx){
		//return
		const {width, height} = Vulkan.canvas;
		uv_scale[0] = width / ctx.width;
		uv_scale[1] = height / ctx.height;
		
		for(let commandEncoder of CommandEncoder(Vulkan.device)){
			for(let renderPassEncoder of beginRenderPass('load+store', commandEncoder, ctx.lightView)){
				renderPassEncoder.setViewport(0, 0, width, height, 0, 1);
				drawFn(renderPassEncoder, {
					'depthTexture': ctx.depthView,
					'normalTexture': ctx.normalView,
					'lightDepthTexture': this.depthView,
					'cameraMatrixList':{buffer:tempBuffer},
					'uvScale': {buffer:uv_scale}
				});
			}
		}
	}

	drawShadow(ctx){
		//tempBuffer.set(this.lens.rawData);
		//tempBuffer.set(this.worldTransformInvert.rawData, 16);
	}

	drawShadowMap(root){
		this.camera.render(root, collectShadowUnits);
	}

	drawDepthMap(shadowCasterList, viewCamera){
		//console.log('shadowCasterList');
		//return
		this.camera.moveTo(this.x, this.y, this.z);

		tempBuffer.set(this.camera.lens.rawData, 0);
		tempBuffer.set(this.camera.worldTransformInvert.rawData, 16);
		tempBuffer.set(viewCamera.lens.matrixInvert, 32);
		tempBuffer.set(viewCamera.worldTransform.rawData, 32+16);

		const {depthView, depthStencilView} = fetchCubeDepth({width, height});
		this.depthView = depthView;

		for(let [renderPassEncoder, mvp] of drawDepthMap(Vulkan.device, this, zNear, zFar, depthStencilView)){
			CubeDepthMaterial.setResources(renderPassEncoder, {'vpMatrix': {buffer:mvp}});
			CubeDepthMaterial.draw(shadowCasterList, renderPassEncoder);
		}
	}
}

const tempBuffer = new Float32Array(64);
const uv_scale = new Float32Array(2);

const drawFn = createDepthDrawFn('cube', `
	let myDepth = textureSample(texture_position, sampler_non_filtering, uv);
	let tt = vec4<f32>(position, myDepth, 1) * light[1].screenMatrix;
	let worldPosition = vec4<f32>(tt.xyz / tt.w, 1) * light[1].cameraMatrix;
	
	let cameraPosition: vec3<f32> = vec4<f32>(worldPosition, 1) * light[0].cameraMatrix;
	let depth = dot(vec4(vec3(1), 1 / length(cameraPosition)), light[0].screenMatrix[2]);

	//depth_ref <= the sampled depth
	let depth_value = textureSampleCompare(texture_depth, sampler_depth, cameraPosition, depth - 0.001);

	let normal = calcNormal(textureSample(texture_normal, sampler_non_filtering, uv).xy);
	let factor = dot(normal, -normalize(cameraPosition));
	//let baseColor = textureSample(texture_color, sampler_filtering, uv);

	let lightPower = length(cameraPosition);
	let lightRange = 200000.0;

	//return vec4<f32>(/*baseColor.rgb * */vec3(1 - lightPower / lightRange) * factor * depth_value, 1);
	return vec4<f32>(vec3<f32>(1 - lightPower / lightRange) * factor * depth_value * 0.5, 1);
`);

module.exports = PointLight3D;