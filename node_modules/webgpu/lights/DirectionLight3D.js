"use strict";

const Vulkan = require('../Vulkan');
const {pipeline} = require('../materials/LightPass');
const {CommandEncoder, RenderPass} = require('../helper/CommandEncoder');
const {fetchViewForDepth} = require('../Vulkan/resource');
const {DepthMaterial} = require('../materials/DepthMaterial');
const Lens = require('../cameras/Lens');
const Camera3D = require('../cameras/Camera3D');
const Quaternion = require('../math/Quaternion');
const {RADIAN} = require('../math');
const Light3D = require('./Light3D');

const width = 4096;
const height = 4096;

class DirectionLight3D extends Light3D
{
	constructor(){
		super();

		this.camera = new Camera3D(new Lens.Ortho(width, height, -2000, 10000));
		this.camera.rotation = new Quaternion().fromEulerAngles(135 * RADIAN, 0, -90 * RADIAN);
	}

	drawForward(){

	}

	drawDeferred(ctx){
		const {width, height} = Vulkan.canvas;
		uv_scale[0] = width / ctx.width;
		uv_scale[1] = height / ctx.height;
		for(let commandEncoder of CommandEncoder(Vulkan.device)){
			for(let renderPassEncoder of renderPass3D(commandEncoder, ctx.lightView)){
				renderPassEncoder.setViewport(0, 0, width, height, 0, 1);
				pipeline.setPipeline(renderPassEncoder);
				pipeline.setBindGroup(renderPassEncoder, 0, [
					{binding:0, resource:ctx.depthView},
					{binding:1, resource:ctx.normalView},
					//{binding:2, resource:ctx.colorView},
					{binding:3, resource:this.depthView},
					{binding:4, resource:{buffer:tempBuffer}},
				]);
				pipeline.setVertexBuffer(renderPassEncoder, 0, uv_scale);
				renderPassEncoder.draw(4);//quad
			}
		}
	}

	drawShadow(ctx){
		//tempBuffer.set(this.lens.rawData);
		//tempBuffer.set(this.worldTransformInvert.rawData, 16);
	}

	drawShadowMap(root){
		this.camera.render(root, collectShadowUnits);
	}

	drawDepthMap(shadowCasterList, viewCamera){
		this.camera.moveTo(viewCamera.x, viewCamera.y, viewCamera.z);

		tempBuffer.set(this.camera.lens.rawData, 0);
		tempBuffer.set(this.camera.worldTransformInvert.rawData, 16);

		tempBuffer.set(viewCamera.lens.matrixInvert, 32);
		tempBuffer.set(viewCamera.worldTransform.rawData, 32+16);

		const {depthView, depthStencilView} = fetchViewForDepth({width, height});
		this.depthView = depthView;

		for(let commandEncoder of CommandEncoder(Vulkan.device)){
			for(let renderPassEncoder of clearDepthPass(commandEncoder, depthStencilView)){
				renderPassEncoder.setViewport(0, 0, width, height, 0, 1);
				DepthMaterial.setBindGroup(renderPassEncoder, 0, [{binding:0, resource:{buffer:tempBuffer}}]);
				DepthMaterial.draw(shadowCasterList, renderPassEncoder);
			}
		}
	}
}

const tempBuffer = new Float32Array(64);
const uv_scale = new Float32Array(2);

const renderPass3D = RenderPass({
	colorAttachments:[{
		loadOp:'load',//load
		storeOp:'store',//discard
	}]
});

const clearDepthPass = RenderPass({
	colorAttachments:[],//can't be undefined, will error
	//depthStencilAttachment:{depthLoadOp:'clear', depthClearValue:1, depthStoreOp:'store', stencilLoadOp:'clear', stencilClearValue:0, stencilStoreOp:'store'}
	depthStencilAttachment:{depthLoadOp:'clear', depthClearValue:1, depthStoreOp:'store'}
});

module.exports = DirectionLight3D;