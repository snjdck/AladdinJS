'use strict';

const vertexShaderGLSL = `#version 450
	layout(set = 0, binding = 0) uniform Uniforms {
		//mat4 modelViewProjectionMatrix;
		vec3 color[3];
	} uniforms;
	//const vec2 pos[3] = vec2[3](vec2(0.0f, 0.5f), vec2(-0.5f, -0.5f), vec2(0.5f, -0.5f));
	layout(location = 0) in vec3 pos;
	layout(location = 0) out vec3 out_color;
	void main() {
	  //gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);
	  gl_Position = vec4(pos, 1.0);
	  out_color = uniforms.color[gl_VertexIndex];
	}
`;

const fragmentShaderGLSL = `#version 450
	layout(set = 0, binding = 1) uniform sampler mySampler;
	layout(set = 0, binding = 2) uniform texture2D myTexture;
	layout(location = 0) out vec4 outColor;
	layout(location = 0) in vec3 out_color;
	void main() {
		vec4 temp = texture(sampler2D(myTexture, mySampler), vec2(0.0, 0.0));
		outColor = vec4(out_color, 1.0) + temp;
	}
`;

async function loadImage(path){
	let image = new Image();
	image.src = path;
	await image.decode();
	return image;
}

async function init(){
	const glslangModule = await import('https://unpkg.com/@webgpu/glslang@0.0.7/web/glslang.js');
	const glslang = await glslangModule.default();
	
	const canvas = document.createElement('canvas');
	document.body.appendChild(canvas);
	
	if(!navigator.gpu)return;
	const adapter = await navigator.gpu.requestAdapter();
	const device = await adapter.requestDevice();
	const context = canvas.getContext('gpupresent');
	//const swapChainFormat = await context.getSwapChainPreferredFormat(device);
	const swapChainFormat = 'bgra8unorm';
	const swapChain = context.configureSwapChain({
		device,
		format: swapChainFormat,
		usage: GPUTextureUsage.OUTPUT_ATTACHMENT
	});

	const vertexBuffer = device.createBuffer({
		size: 36,
		usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST
	});

	vertexBuffer.setSubData(0, new Float32Array([0, 0.5, 0, -0.5, -0.5, 0, 0.5, -0.5, 0]));

	const uniformBuffer = device.createBuffer({
		size: 48,
		usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST
	});

	uniformBuffer.setSubData(0, new Float32Array([1,0,0,1,0,1,0,1,0,0,1,1]));

	const imageBitmap = await createImageBitmap(await loadImage('./timg.jpeg'));

	const texture = device.createTexture({
		size: [imageBitmap.width, imageBitmap.height, 1],
		format: 'rgba8unorm',
		usage: GPUTextureUsage.SAMPLED | GPUTextureUsage.COPY_DST,
	});

	device.copyImageBitmapToTexture(
		{imageBitmap, origin:[0, 0]},
		{texture, mipLevel: 0, arrayLayer: 0, origin: [0, 0, 0]},
		[imageBitmap.width, imageBitmap.height, 1]
	);

	const sampler = device.createSampler({
		magFilter: 'linear',
		minFilter: 'linear',
	});

	const bindGroupLayout = device.createBindGroupLayout({
		bindings:[{
			binding: 0,
			visibility: GPUShaderStage.VERTEX,
			type: 'uniform-buffer',
		},{
			binding: 1,
			visibility: GPUShaderStage.FRAGMENT,
			type: 'sampler'
		},{
			binding: 2,
			visibility: GPUShaderStage.FRAGMENT,
			type: 'sampled-texture'
		}]
	});

	const bindGroup = device.createBindGroup({
		layout: bindGroupLayout,
		bindings: [{
			binding: 0,
			resource: {
				buffer: uniformBuffer,
				offset: 0
			}
		},{
			binding: 1,
			resource: sampler
		},{
			binding: 2,
			resource: texture.createView()
		}]
	});

	const pipelineLayout = device.createPipelineLayout({
		bindGroupLayouts: [bindGroupLayout]
	});

	const pipeline = device.createRenderPipeline({
		layout: pipelineLayout,
		vertexStage: {
			module: device.createShaderModule({
				code: glslang.compileGLSL(vertexShaderGLSL, "vertex"),
			}),
			entryPoint: 'main'
		},
		fragmentStage: {
			module: device.createShaderModule({
				code: glslang.compileGLSL(fragmentShaderGLSL, "fragment"),
			}),
			entryPoint: 'main'
		},
		primitiveTopology: 'triangle-list',
		colorStates:[{
			format: swapChainFormat
		}],
		depthStencilState: {
			format: 'depth24plus-stencil8',
		},
		vertexState: {
			indexFormat: 'uint16',
			vertexBuffers:[{
				arrayStride: 12,
				stepMode: 'vertex',
				attributes:[{
					format: 'float3',
					offset: 0,
					shaderLocation: 0
				}]
			}]
		}
	});

	const depthTexture = device.createTexture({
		size: [canvas.width, canvas.height, 1],
		format: 'depth24plus-stencil8',
		usage: GPUTextureUsage.OUTPUT_ATTACHMENT,
		dimension: '2d',//optional, default 2d(1d, 3d)
	});

	const depthStencilAttachmentDescriptor = {
		attachment: depthTexture.createView(),
		depthLoadValue: 1.0,
		depthStoreOp: 'store',
		stencilLoadValue: 0,
		stencilStoreOp: 'store'
	};
	
	function frame(){
		requestAnimationFrame(frame);
		const renderBundleEncoder = device.createRenderBundleEncoder({
			colorFormats:[swapChainFormat],
			depthStencilFormat: 'depth24plus-stencil8'
		});
		const commandEncoder = device.createCommandEncoder();
		const renderPassEncoder = commandEncoder.beginRenderPass({
			colorAttachments: [{
				attachment: swapChain.getCurrentTexture().createView(),
				loadValue: [0, 0, 0, 1]
			}],
			depthStencilAttachment: depthStencilAttachmentDescriptor//when 2D, can omit
		});
		renderBundleEncoder.setPipeline(pipeline);
		renderBundleEncoder.setBindGroup(0, bindGroup);
		renderBundleEncoder.setVertexBuffer(0, vertexBuffer);
		renderBundleEncoder.draw(3, 1, 0, 0);
		const renderBundle = renderBundleEncoder.finish();
		renderPassEncoder.executeBundles([renderBundle]);
		renderPassEncoder.endPass();

		device.defaultQueue.submit([commandEncoder.finish()]);
	}
	requestAnimationFrame(frame);
}

GPUDevice.prototype.copyImageBitmapToTexture = function(source, destination, copySize){
	const pitchSize = 64;
	const bytePerPixel = 4;

	const {imageBitmap} = source;
	const {width, height} = imageBitmap;

	const rowPitch = Math.ceil(width / pitchSize) * pitchSize * bytePerPixel;

	const canvas = document.createElement('canvas');
	canvas.width = width;
	canvas.height = height;

	const ctx = canvas.getContext('2d');
	ctx.drawImage(imageBitmap, 0, 0);
	const imageData = ctx.getImageData(0, 0, width, height);

	let bufferData;

	if(width % pitchSize == 0){
		bufferData = imageData.data;
	}else{
		bufferData = new Uint8Array(rowPitch * height);
		const data = imageData.data;
		for(let y=0; y<height; ++y){
			for(let x=0; x<width; ++x){
				let i = y * rowPitch + x * bytePerPixel;
				let j = (y * width + x) * bytePerPixel;
				bufferData[i  ] = data[j];
				bufferData[i+1] = data[j+1];
				bufferData[i+2] = data[j+2];
				bufferData[i+3] = data[j+3];
			}
		}
	}

	const buffer = this.createBuffer({
		size: bufferData.length,
		usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST
	});
	buffer.setSubData(0, bufferData);
	setTimeout(() => buffer.destory(), 1000);

	const commandEncoder = this.createCommandEncoder();
	commandEncoder.copyBufferToTexture({
		buffer,
		rowPitch,
		imageHeight: height,
		offset: 0
	}, destination, copySize);
	this.defaultQueue.submit([commandEncoder.finish()]);
}
/*

https://gpuweb.github.io/gpuweb/
https://gpuweb.github.io/WSL/
https://github.com/gpuweb/gpuweb

interface GPUCommandEncoder {
	void copyBufferToBuffer(
		GPUBuffer source,
		GPUBufferSize sourceOffset,
		GPUBuffer destination,
		GPUBufferSize destinationOffset,
		GPUBufferSize size);

	void copyBufferToTexture(
		GPUBufferCopyView source,
		GPUTextureCopyView destination,
		GPUExtent3D copySize);

	void copyTextureToBuffer(
		GPUTextureCopyView source,
		GPUBufferCopyView destination,
		GPUExtent3D copySize);

	void copyTextureToTexture(
		GPUTextureCopyView source,
		GPUTextureCopyView destination,
		GPUExtent3D copySize);
};

interface RenderBase {
	void setBindGroup(unsigned long index, GPUBindGroup bindGroup,
					  optional sequence<unsigned long> dynamicOffsets = []);

	void setBindGroup(unsigned long index, GPUBindGroup bindGroup,
					  Uint32Array dynamicOffsetsData,
					  unsigned long long dynamicOffsetsDataStart,
					  unsigned long long dynamicOffsetsDataLength);

	void setPipeline(GPURenderPipeline pipeline);

	void setIndexBuffer(GPUBuffer buffer, optional GPUBufferSize offset = 0);
	void setVertexBuffer(unsigned long slot, GPUBuffer buffer, optional GPUBufferSize offset = 0);

	void draw(unsigned long vertexCount, unsigned long instanceCount,
			  unsigned long firstVertex, unsigned long firstInstance);
	void drawIndexed(unsigned long indexCount, unsigned long instanceCount,
					 unsigned long firstIndex, long baseVertex, unsigned long firstInstance);

	void drawIndirect(GPUBuffer indirectBuffer, GPUBufferSize indirectOffset);
	void drawIndexedIndirect(GPUBuffer indirectBuffer, GPUBufferSize indirectOffset);
};

interface GPURenderPassEncoder extends RenderBase {
	void setViewport(float x, float y,
					 float width, float height,
					 float minDepth, float maxDepth);

	void setScissorRect(unsigned long x, unsigned long y, unsigned long width, unsigned long height);

	void setBlendColor(GPUColor color);
	void setStencilReference(unsigned long reference);

	void executeBundles(sequence<GPURenderBundle> bundles);
	void endPass();
};

interface GPURenderBundleEncoder extends RenderBase {
	GPURenderBundle finish();
};

enum GPUVertexFormat {
	"uchar2",
	"uchar4",
	"char2",
	"char4",
	"uchar2norm",
	"uchar4norm",
	"char2norm",
	"char4norm",
	"ushort2",
	"ushort4",
	"short2",
	"short4",
	"ushort2norm",
	"ushort4norm",
	"short2norm",
	"short4norm",
	"half2",
	"half4",
	"float",
	"float2",
	"float3",
	"float4",
	"uint",
	"uint2",
	"uint3",
	"uint4",
	"int",
	"int2",
	"int3",
	"int4"
};

enum GPUIndexFormat {
	"uint16",
	"uint32"
};

enum GPUInputStepMode {
	"vertex",
	"instance"
};

enum GPUPrimitiveTopology {
	"point-list",
	"line-list",
	"line-strip",
	"triangle-list",
	"triangle-strip"
};

dictionary GPUBindGroupDescriptor : GPUObjectDescriptorBase {
	required GPUBindGroupLayout layout;
	required sequence<GPUBindGroupBinding> bindings;
};
typedef (GPUSampler or GPUTextureView or GPUBufferBinding) GPUBindingResource;

dictionary GPUBindGroupBinding {
	required unsigned long binding;
	required GPUBindingResource resource;
};
dictionary GPUBufferBinding {
	required GPUBuffer buffer;
	GPUBufferSize offset = 0;
	GPUBufferSize size;
};

enum GPUBindingType {
	"uniform-buffer",
	"storage-buffer",
	"readonly-storage-buffer",
	"sampler",
	"sampled-texture",
	"storage-texture"
	// TODO: other binding types
};

interface GPUShaderStage {
	const GPUShaderStageFlags VERTEX   = 0x1;
	const GPUShaderStageFlags FRAGMENT = 0x2;
	const GPUShaderStageFlags COMPUTE  = 0x4;
};

interface GPUBufferUsage {
	const GPUBufferUsageFlags MAP_READ  = 0x0001;
	const GPUBufferUsageFlags MAP_WRITE = 0x0002;
	const GPUBufferUsageFlags COPY_SRC  = 0x0004;
	const GPUBufferUsageFlags COPY_DST  = 0x0008;
	const GPUBufferUsageFlags INDEX     = 0x0010;
	const GPUBufferUsageFlags VERTEX    = 0x0020;
	const GPUBufferUsageFlags UNIFORM   = 0x0040;
	const GPUBufferUsageFlags STORAGE   = 0x0080;
	const GPUBufferUsageFlags INDIRECT  = 0x0100;
};

interface GPUTextureUsage {
	const GPUTextureUsageFlags COPY_SRC          = 0x01;
	const GPUTextureUsageFlags COPY_DST          = 0x02;
	const GPUTextureUsageFlags SAMPLED           = 0x04;
	const GPUTextureUsageFlags STORAGE           = 0x08;
	const GPUTextureUsageFlags OUTPUT_ATTACHMENT = 0x10;
};

enum GPUTextureFormat {
	// 8-bit formats
	"r8unorm",
	"r8snorm",
	"r8uint",
	"r8sint",

	// 16-bit formats
	"r16uint",
	"r16sint",
	"r16float",
	"rg8unorm",
	"rg8snorm",
	"rg8uint",
	"rg8sint",

	// 32-bit formats
	"r32uint",
	"r32sint",
	"r32float",
	"rg16uint",
	"rg16sint",
	"rg16float",
	"rgba8unorm",
	"rgba8unorm-srgb",
	"rgba8snorm",
	"rgba8uint",
	"rgba8sint",
	"bgra8unorm",
	"bgra8unorm-srgb",
	// Packed 32-bit formats
	"rgb10a2unorm",
	"rg11b10float",

	// 64-bit formats
	"rg32uint",
	"rg32sint",
	"rg32float",
	"rgba16uint",
	"rgba16sint",
	"rgba16float",

	// 128-bit formats
	"rgba32uint",
	"rgba32sint",
	"rgba32float",

	// Depth and stencil formats
	"depth32float",
	"depth24plus",
	"depth24plus-stencil8"
};

dictionary GPUSamplerDescriptor : GPUObjectDescriptorBase {
	GPUAddressMode addressModeU = "clamp-to-edge";
	GPUAddressMode addressModeV = "clamp-to-edge";
	GPUAddressMode addressModeW = "clamp-to-edge";
	GPUFilterMode magFilter = "nearest";
	GPUFilterMode minFilter = "nearest";
	GPUFilterMode mipmapFilter = "nearest";
	float lodMinClamp = 0;
	float lodMaxClamp = 0xffffffff; // TODO: What should this be? Was Number.MAX_VALUE.
	GPUCompareFunction compare = "never";
};
enum GPUAddressMode {
	"clamp-to-edge",
	"repeat",
	"mirror-repeat"
};
enum GPUFilterMode {
	"nearest",
	"linear"
};
enum GPUCompareFunction {
	"never",
	"less",
	"equal",
	"less-equal",
	"greater",
	"not-equal",
	"greater-equal",
	"always"
};

*/