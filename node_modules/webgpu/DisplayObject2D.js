'use strict';

const {Matrix2D} = require('opengl/math');
const RADIAN = Math.PI / 180;

class DisplayObject2D
{
	constructor(){
		this._parent = null;
		this._children = [];

		this.x = 0.0;
		this.y = 0.0;
		this.scaleX = 1.0;
		this.scaleY = 1.0;
		this.rotation = 0.0;

		this._worldMatrix = new Matrix2D();
		this._localMatrix = new Matrix2D();

		this.visible = true;
		this.mouseEnabled = false;
		this.mouseChildren = true;
		this.type = '';
	}

	get parent(){
		return this._parent;
	}

	get children(){
		return this._children;
	}

	get numChildren(){
		return this._children.length;
	}

	get transform(){
		Matrix2D.compose(this._localMatrix,
			this.scaleX, this.scaleY,
			this.rotation * RADIAN,
			this.x, this.y
		);
		return this._localMatrix;
	}

	get worldTransform(){
		return this._worldMatrix;
	}

	contains(target){
		while(target != null){
			if(target == this)
				return true;
			target = target.parent;
		}
		return false;
	}

	removeFromParent(){
		this.parent?.removeChild(this);
	}

	removeAllChildren(){
		const {children} = this;
		while(children.length > 0){
			this.removeChild(children.pop());
		}
	}

	calculateRelativeTransform(target, result){
		if(target == null){
			result.copyFrom(this.worldTransform);
			return;
		}
		if(target == this){
			result.identity();
			return;
		}
		if(target == this.parent){
			result.copyFrom(this.transform);
			return;
		}
		if(target.parent == this){
			result.copyFrom(target.transform);
			result.invert();
			return;
		}
		if(this.contains(target)){
			target.calculateRelativeTransform(this, result);
			result.invert();
			return;
		}
		if(target.contains(this)){
			result.identity();
			let node = this;
			while(node != target){
				result.append(node.transform);
				node = node.parent;
			}
			return;
		}
		target.worldTransform.invert(result);
		result.prepend(this.worldTransform);
	}

	addChild(child){
		return this.addChildAt(child, this.numChildren);
	}

	removeChild(child){
		let index = this.getChildIndex(child);
		if(index >= 0)
			return this.removeChildAt(index);
	}

	addChildAt(child, index){
		console.assert(0 <= index && index <= this.numChildren);

		if(child.parent){
			if(child.parent === this){
				this.setChildIndex(child, Math.min(index, this.numChildren-1));
				return child;
			}
			child.parent.removeChild(child);
		}

		let {children} = this;
		children.splice(index, 0, child);
		child._parent = this;

		return child;
	}

	removeChildAt(index){
		console.assert(0 <= index && index < this.numChildren);
		let child = this._children.splice(index, 1)[0];
		child._parent = null;
		return child;
	}

	getChildAt(index){
		console.assert(0 <= index && index < this.numChildren);
		return this._children[index];
	}

	getChildIndex(child){
		return this._children.indexOf(child);
	}

	hasChild(child){
		return this._children.includes(child);
	}

	setChildIndex(child, index){
		console.assert(0 <= index && index < this.numChildren);
		let prevIndex = this.getChildIndex(child);
		if(prevIndex < 0 || prevIndex === index)return;
		let {_children} = this;
		_children.splice(prevIndex, 1);
		_children.splice(index, 0, child);
	}

	swapChildren(child1, child2){
		this.swapChildrenAt(this.getChildIndex(child1), this.getChildIndex(child2));
	}

	swapChildrenAt(index1, index2){
		if(index1 === index2)return;
		let {_children} = this;
		let child1 = _children[index1];
		let child2 = _children[index2];
		if(child1 && child2){
			_children[index1] = child2;
			_children[index2] = child1;
		}
	}

	get bottomChild(){
		return this.getChildAt(0);
	}

	get topChild(){
		return this.getChildAt(this.numChildren-1);
	}

	swapChildToTop(child){
		let childIndex = getChildIndex(child);
		if(childIndex < 0)return;
		let lastIndex = this.numChildren - 1;
		if(childIndex < lastIndex){
			this.swapChildrenAt(childIndex, lastIndex);
		}
	}

	swapChildToBottom(child){
		let childIndex = this.getChildIndex(child);
		if(childIndex > 0){
			this.swapChildrenAt(childIndex, 0);
		}
	}

	get root(){
		let target = this;
		while(target.parent)
			target = target.parent;
		return target;
	}

	get scene(){
		return this.root._scene;
	}
}

module.exports = DisplayObject2D;
