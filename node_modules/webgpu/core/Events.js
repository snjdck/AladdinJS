
const Signal = require('mvc/node_modules/signal');

class MouseEvents
{
	constructor(){
		window.addEventListener('pointerdown', evt => this.onMouseDown(evt));
		window.addEventListener('pointerup', evt => this.onMouseUp(evt));
		window.addEventListener('pointermove', evt => this.onMouseMove(evt));

		this.mouseDownSignal = new Signal();
		this.mouseUpSignal = new Signal();
		this.mouseMoveSignal = new Signal();

		this.mouseX = 0;
		this.mouseY = 0;
	}

	onMouseDown(evt){
		this.mouseX = evt.x;
		this.mouseY = evt.y;
		this.mouseDownSignal.notify(evt);
	}

	onMouseUp(evt){
		this.mouseX = evt.x;
		this.mouseY = evt.y;
		this.mouseUpSignal.notify(evt);
	}

	onMouseMove(evt){
		this.mouseX = evt.x;
		this.mouseY = evt.y;
		this.mouseMoveSignal.notify(evt);
	}
}

class KeyEvents
{
	constructor(){
		window.addEventListener('keydown', evt => this.onEvent(evt, true));
		window.addEventListener('keyup', evt => this.onEvent(evt, false));
		this.keyMap = new Map();
	}

	onEvent(evt, isKeyDown){
		if(evt.repeat)return;
		this.keyMap.set(evt.code, isKeyDown);
	}

	isKeyDown(key){
		let result;
		if(key == 'Shift'){
			result = this.keyMap.get('ShiftLeft') || this.keyMap.get('ShiftRight');
		}else{
			result = this.keyMap.get(key);
		}
		return result ?? false;
	}
}

exports.mouseEvents = new MouseEvents();
exports.keyboardEvents = new KeyEvents();
