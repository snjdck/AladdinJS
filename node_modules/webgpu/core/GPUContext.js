
class GPUContext
{
	constructor(renderPassEncoder){
		this.renderPassEncoder = renderPassEncoder;
		this.pipeline = null;
		this.resourcesQueue = [];
	}

	setPipeline(pipeline){
		if(this.pipeline == pipeline)return;
		const {renderPassEncoder, resourcesQueue} = this;
		pipeline.setPipeline(renderPassEncoder);
		if(this.pipeline == null){
			for(let resources of resourcesQueue){
				pipeline.setResources(renderPassEncoder, resources);
			}
		}
		this.pipeline = pipeline;
	}

	setResources(resources){
		const {pipeline} = this;
		if(pipeline){
			pipeline.setResources(this.renderPassEncoder, resources);
		}else{
			this.resourcesQueue.push(resources);
		}
	}

	setViewportWH(width, height){
		this.renderPassEncoder.setViewport(0, 0, width, height, 0, 1);
	}

	draw(vertexCount, instanceCount=1, firstVertex=0, firstInstance=0){
		this.renderPassEncoder.draw(vertexCount, instanceCount, firstVertex, firstInstance);
	}

	drawIndexed(indexCount, instanceCount=1, firstIndex=0, baseVertex=0, firstInstance=0){
		this.renderPassEncoder.drawIndexed(indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
	}
/*
	setViewport(x, y, width, height, minDepth=0, maxDepth=1){
		this.renderPassEncoder.setViewport(x, y, width, height, minDepth, maxDepth);
	}

	setVertexBuffer(slot, buffer, offset, size){
		this.renderPassEncoder.setVertexBuffer(slot, buffer, offset, size);
	}

	setIndexBuffer(buffer, indexFormat, offset, size){
		this.renderPassEncoder.setIndexBuffer(buffer, indexFormat, offset, size);
	}

	setBindGroup(index, bindGroup){
		this.renderPassEncoder.setBindGroup(index, bindGroup);
	}
*/
}

exports.GPUContext = GPUContext;
