'use strict';
/*

x1 = (a00 * x0 + a01 * y0 + a02 * z0 + a03);
y1 = (a10 * x0 + a11 * y0 + a12 * z0 + a13);
z1 = (a20 * x0 + a21 * y0 + a22 * z0 + a23);

x2 = (b00 * x1 + b01 * y1 + b02 * z1 + b03);
y2 = (b10 * x1 + b11 * y1 + b12 * z1 + b13);
z2 = (b20 * x1 + b21 * y1 + b22 * z1 + b23);

x2 = (a00 * b00 + a10 * b01 + a20 * b02) * x0 + (a01 * b00 + a11 * b01 + a21 * b02) * y0 + (a02 * b00 + a12 * b01 + a22 * b02) * z0 + (a03 * b00 + a13 * b01 + a23 * b02 + b03);
y2 = (a00 * b10 + a10 * b11 + a20 * b12) * x0 + (a01 * b10 + a11 * b11 + a21 * b12) * y0 + (a02 * b10 + a12 * b11 + a22 * b12) * z0 + (a03 * b10 + a13 * b11 + a23 * b12 + b13);
z2 = (a00 * b20 + a10 * b21 + a20 * b22) * x0 + (a01 * b20 + a11 * b21 + a21 * b22) * y0 + (a02 * b20 + a12 * b21 + a22 * b22) * z0 + (a03 * b20 + a13 * b21 + a23 * b22 + b23);

//*/

class Matrix
{
	static concat(va, vb, output){
		concat(va.rawData, vb.rawData, output.rawData);
		return output;
	}

	constructor(){
		this.rawData = new Float32Array(12);
	}

	identity(){
		const {rawData} = this;
		rawData.fill(0);
		rawData[0] = rawData[5] = rawData[10] = 1;
	}

	moveTo(x, y, z){
		const {rawData} = this;
		rawData[3] = x;
		rawData[7] = y;
		rawData[11] = z;
	}

	moveBy(x, y, z){
		const {rawData} = this;
		rawData[3] += x;
		rawData[7] += y;
		rawData[11] += z;
	}

	append(other, result=this){
		Matrix3D.concat(this, other, result);
	}

	transformCoords(vertex){
		const {rawData} = this;
		const {x, y, z} = vertex;
		vertex.x = (rawData[0] * x) + (rawData[1] * x) + (rawData[ 2] * x) + rawData[ 3];
		vertex.y = (rawData[4] * x) + (rawData[5] * x) + (rawData[ 6] * x) + rawData[ 7];
		vertex.z = (rawData[8] * x) + (rawData[9] * x) + (rawData[10] * x) + rawData[11];
		return vertex;
	}

	transformCoordsDelta(vertex){
		const {rawData} = this;
		const {x, y, z} = vertex;
		vertex.x = (rawData[0] * x) + (rawData[1] * x) + (rawData[ 2] * x);
		vertex.y = (rawData[4] * x) + (rawData[5] * x) + (rawData[ 6] * x);
		vertex.z = (rawData[8] * x) + (rawData[9] * x) + (rawData[10] * x);
		return vertex;
	}
}

function concat(va, vb, output){
	const [a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23] = va;
	const [b00, b01, b02, b03, b10, b11, b12, b13, b20, b21, b22, b23] = vb;

	output[ 0] = a00 * b00 + a10 * b01 + a20 * b02;
	output[ 1] = a01 * b00 + a11 * b01 + a21 * b02;
	output[ 2] = a02 * b00 + a12 * b01 + a22 * b02;
	output[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + b03;

	output[ 4] = a00 * b10 + a10 * b11 + a20 * b12;
	output[ 5] = a01 * b10 + a11 * b11 + a21 * b12;
	output[ 6] = a02 * b10 + a12 * b11 + a22 * b12;
	output[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + b13;

	output[ 8] = a00 * b20 + a10 * b21 + a20 * b22;
	output[ 9] = a01 * b20 + a11 * b21 + a21 * b22;
	output[10] = a02 * b20 + a12 * b21 + a22 * b22;
	output[11] = a03 * b20 + a13 * b21 + a23 * b22 + b23;
}

module.exports = Matrix;