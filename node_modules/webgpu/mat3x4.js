'use strict';
/*

x1 = (a00 * x0 + a01 * y0 + a02 * z0 + a03);
y1 = (a10 * x0 + a11 * y0 + a12 * z0 + a13);
z1 = (a20 * x0 + a21 * y0 + a22 * z0 + a23);

x2 = (b00 * x1 + b01 * y1 + b02 * z1 + b03);
y2 = (b10 * x1 + b11 * y1 + b12 * z1 + b13);
z2 = (b20 * x1 + b21 * y1 + b22 * z1 + b23);

x2 = (a00 * b00 + a10 * b01 + a20 * b02) * x0 + (a01 * b00 + a11 * b01 + a21 * b02) * y0 + (a02 * b00 + a12 * b01 + a22 * b02) * z0 + (a03 * b00 + a13 * b01 + a23 * b02 + b03);
y2 = (a00 * b10 + a10 * b11 + a20 * b12) * x0 + (a01 * b10 + a11 * b11 + a21 * b12) * y0 + (a02 * b10 + a12 * b11 + a22 * b12) * z0 + (a03 * b10 + a13 * b11 + a23 * b12 + b13);
z2 = (a00 * b20 + a10 * b21 + a20 * b22) * x0 + (a01 * b20 + a11 * b21 + a21 * b22) * y0 + (a02 * b20 + a12 * b21 + a22 * b22) * z0 + (a03 * b20 + a13 * b21 + a23 * b22 + b23);

//*/

class Mat3x4
{
	static concat(va, vb, output){
		concat(va.rawData, vb.rawData, output.rawData);
		return output;
	}

	constructor(rawData){
		if(rawData){
			this.rawData = rawData;
		}else{
			this.rawData = new Float32Array(12);
			this.identity();
		}
	}

	identity(){
		const {rawData} = this;
		rawData.fill(0);
		rawData[0] = rawData[5] = rawData[10] = 1;
		return this;
	}

	moveTo(x, y, z){
		const {rawData} = this;
		rawData[3] = x;
		rawData[7] = y;
		rawData[11] = z;
		return this;
	}

	moveBy(x, y, z){
		const {rawData} = this;
		rawData[3] += x;
		rawData[7] += y;
		rawData[11] += z;
		return this;
	}

	append(other, result=this){
		concat(this.rawData, other.rawData, result.rawData);
		return result;
	}

	prepend(other, result=this){
		concat(other.rawData, this.rawData, result.rawData);
		return result;
	}

	appendRotation(quaternion, result=this){
		//复制区域--begin
		const {x, y, z, w} = quaternion;
		
		const xx = x*x;
		const yy = y*y;
		const zz = z*z;
		const ww = w*w;
		
		const xy2 = 2*x*y;
		const xz2 = 2*x*z;
		const xw2 = 2*x*w;
		const yz2 = 2*y*z;
		const yw2 = 2*y*w;
		const zw2 = 2*z*w;
		//复制区域--end
		
		const b00 = xx + ww - yy - zz;
		const b01 = xy2 - zw2;
		const b02 = xz2 + yw2;
		
		const b10 = xy2 + zw2;
		const b11 = yy + ww - zz - xx;
		const b12 = yz2 - xw2;
		
		const b20 = xz2 - yw2;
		const b21 = yz2 + xw2;
		const b22 = zz + ww - xx - yy;

		const [a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23] = this.rawData;
		const output = result.rawData;

		output[ 0] = a00 * b00 + a10 * b01 + a20 * b02;
		output[ 1] = a01 * b00 + a11 * b01 + a21 * b02;
		output[ 2] = a02 * b00 + a12 * b01 + a22 * b02;
		output[ 3] = a03 * b00 + a13 * b01 + a23 * b02;

		output[ 4] = a00 * b10 + a10 * b11 + a20 * b12;
		output[ 5] = a01 * b10 + a11 * b11 + a21 * b12;
		output[ 6] = a02 * b10 + a12 * b11 + a22 * b12;
		output[ 7] = a03 * b10 + a13 * b11 + a23 * b12;

		output[ 8] = a00 * b20 + a10 * b21 + a20 * b22;
		output[ 9] = a01 * b20 + a11 * b21 + a21 * b22;
		output[10] = a02 * b20 + a12 * b21 + a22 * b22;
		output[11] = a03 * b20 + a13 * b21 + a23 * b22;

		return result;
	}

	prependRotation(quaternion, result=this){
		//复制区域--begin
		const {x, y, z, w} = quaternion;
		
		const xx = x*x;
		const yy = y*y;
		const zz = z*z;
		const ww = w*w;
		
		const xy2 = 2*x*y;
		const xz2 = 2*x*z;
		const xw2 = 2*x*w;
		const yz2 = 2*y*z;
		const yw2 = 2*y*w;
		const zw2 = 2*z*w;
		//复制区域--end
		
		const a00 = xx + ww - yy - zz;
		const a01 = xy2 - zw2;
		const a02 = xz2 + yw2;
		
		const a10 = xy2 + zw2;
		const a11 = yy + ww - zz - xx;
		const a12 = yz2 - xw2;
		
		const a20 = xz2 - yw2;
		const a21 = yz2 + xw2;
		const a22 = zz + ww - xx - yy;

		const [b00, b01, b02, b03, b10, b11, b12, b13, b20, b21, b22, b23] = this.rawData;
		const output = result.rawData;

		output[ 0] = a00 * b00 + a10 * b01 + a20 * b02;
		output[ 1] = a01 * b00 + a11 * b01 + a21 * b02;
		output[ 2] = a02 * b00 + a12 * b01 + a22 * b02;
		output[ 3] = b03;

		output[ 4] = a00 * b10 + a10 * b11 + a20 * b12;
		output[ 5] = a01 * b10 + a11 * b11 + a21 * b12;
		output[ 6] = a02 * b10 + a12 * b11 + a22 * b12;
		output[ 7] = b13;

		output[ 8] = a00 * b20 + a10 * b21 + a20 * b22;
		output[ 9] = a01 * b20 + a11 * b21 + a21 * b22;
		output[10] = a02 * b20 + a12 * b21 + a22 * b22;
		output[11] = b23;

		return result;
	}

	appendScale(sx, sy, sz, result=this){
		const [a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23] = this.rawData;
		const output = result.rawData;

		output[ 0] = a00 * sx;
		output[ 1] = a01 * sx;
		output[ 2] = a02 * sx;
		output[ 3] = a03 * sx;

		output[ 4] = a10 * sy;
		output[ 5] = a11 * sy;
		output[ 6] = a12 * sy;
		output[ 7] = a13 * sy;

		output[ 8] = a20 * sz;
		output[ 9] = a21 * sz;
		output[10] = a22 * sz;
		output[11] = a23 * sz;

		return result;
	}

	prependScale(sx, sy, sz, result=this){
		const [b00, b01, b02, b03, b10, b11, b12, b13, b20, b21, b22, b23] = this.rawData;
		const output = result.rawData;

		output[ 0] = sx * b00;
		output[ 1] = sy * b01;
		output[ 2] = sz * b02;

		output[ 4] = sx * b10;
		output[ 5] = sy * b11;
		output[ 6] = sz * b12;

		output[ 8] = sx * b20;
		output[ 9] = sy * b21;
		output[10] = sz * b22;

		if(result == this)return this;

		output[ 3] = b03;
		output[ 7] = b13;
		output[11] = b23;

		return result;
	}

	appendTranslation(tx, ty, tz, result=this){
		const [a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23] = this.rawData;
		const output = result.rawData;

		output[ 3] = a03 + tx;
		output[ 7] = a13 + ty;
		output[11] = a23 + tz;

		if(result == this)return this;

		output[ 0] = a00;
		output[ 1] = a01;
		output[ 2] = a02;

		output[ 4] = a10;
		output[ 5] = a11;
		output[ 6] = a12;

		output[ 8] = a20;
		output[ 9] = a21;
		output[10] = a22;

		return result;
	}

	prependTranslation(tx, ty, tz, result=this){
		const [b00, b01, b02, b03, b10, b11, b12, b13, b20, b21, b22, b23] = this.rawData;
		const output = result.rawData;

		output[ 3] = tx * b00 + ty * b01 + tz * b02 + b03;
		output[ 7] = tx * b10 + ty * b11 + tz * b12 + b13;
		output[11] = tx * b20 + ty * b21 + tz * b22 + b23;

		if(result == this)return this;

		output[ 0] = b00;
		output[ 1] = b01;
		output[ 2] = b02;

		output[ 4] = b10;
		output[ 5] = b11;
		output[ 6] = b12;

		output[ 8] = b20;
		output[ 9] = b21;
		output[10] = b22;

		return result;
	}

	clone(){
		const {constructor, rawData} = this;
		return new constructor(rawData.slice());
	}

	copyFrom(other){

	}

	invert(result=this){
		invert(this.rawData, result.rawData);
		return result;
	}

	transformCoords(vertex){
		const {rawData} = this;
		const {x, y, z} = vertex;
		vertex.x = (rawData[0] * x) + (rawData[1] * y) + (rawData[ 2] * z) + rawData[ 3];
		vertex.y = (rawData[4] * x) + (rawData[5] * y) + (rawData[ 6] * z) + rawData[ 7];
		vertex.z = (rawData[8] * x) + (rawData[9] * y) + (rawData[10] * z) + rawData[11];
		return vertex;
	}

	transformCoordsDelta(vertex){
		const {rawData} = this;
		const {x, y, z} = vertex;
		vertex.x = (rawData[0] * x) + (rawData[1] * y) + (rawData[ 2] * z);
		vertex.y = (rawData[4] * x) + (rawData[5] * y) + (rawData[ 6] * z);
		vertex.z = (rawData[8] * x) + (rawData[9] * y) + (rawData[10] * z);
		return vertex;
	}

	*[Symbol.iterator](){
		yield * this.rawData;
	}
}

function concat(va, vb, output){
	const [a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23] = va;
	const [b00, b01, b02, b03, b10, b11, b12, b13, b20, b21, b22, b23] = vb;

	output[ 0] = a00 * b00 + a10 * b01 + a20 * b02;
	output[ 1] = a01 * b00 + a11 * b01 + a21 * b02;
	output[ 2] = a02 * b00 + a12 * b01 + a22 * b02;
	output[ 3] = a03 * b00 + a13 * b01 + a23 * b02 + b03;

	output[ 4] = a00 * b10 + a10 * b11 + a20 * b12;
	output[ 5] = a01 * b10 + a11 * b11 + a21 * b12;
	output[ 6] = a02 * b10 + a12 * b11 + a22 * b12;
	output[ 7] = a03 * b10 + a13 * b11 + a23 * b12 + b13;

	output[ 8] = a00 * b20 + a10 * b21 + a20 * b22;
	output[ 9] = a01 * b20 + a11 * b21 + a21 * b22;
	output[10] = a02 * b20 + a12 * b21 + a22 * b22;
	output[11] = a03 * b20 + a13 * b21 + a23 * b22 + b23;
}

function invert(matrix, output){
	const [m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23] = matrix;

	const t00 = m11 * m22 - m12 * m21;
	const t01 = m12 * m20 - m10 * m22;
	const t02 = m10 * m21 - m11 * m20;

	const det = m00 * t00 + m01 * t01 + m02 * t02;

	if(det === 0){
		return console.error('det zero!');
	}

	const t10 = m02 * m21 - m01 * m22;
	const t11 = m00 * m22 - m02 * m20;
	const t12 = m01 * m20 - m00 * m21;

	const t20 = m01 * m12 - m02 * m11;
	const t21 = m02 * m10 - m00 * m12;
	const t22 = m00 * m11 - m01 * m10;

	const detInv = 1 / det;

	output[ 0] = t00 * detInv;
	output[ 1] = t10 * detInv;
	output[ 2] = t20 * detInv;
	output[ 3] = (t00 * m03 + t10 * m13 + t20 * m23) * -detInv;

	output[ 4] = t01 * detInv;
	output[ 5] = t11 * detInv;
	output[ 6] = t21 * detInv;
	output[ 7] = (t01 * m03 + t11 * m13 + t21 * m23) * -detInv;

	output[ 8] = t02 * detInv;
	output[ 9] = t12 * detInv;
	output[10] = t22 * detInv;
	output[11] = (t02 * m03 + t12 * m13 + t22 * m23) * -detInv;
}
/*
function invert(matrix, output){
	const [m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23] = matrix;
	const m30 = 0, m31 = 0, m32 = 0, m33 = 1;

	const t0 = m21 * m32 * m13 - m31 * m22 * m13 + m31 * m12 * m23 - m11 * m32 * m23 - m21 * m12 * m33 + m11 * m22 * m33,
	const t1 = m30 * m22 * m13 - m20 * m32 * m13 - m30 * m12 * m23 + m10 * m32 * m23 + m20 * m12 * m33 - m10 * m22 * m33,
	const t2 = m20 * m31 * m13 - m30 * m21 * m13 + m30 * m11 * m23 - m10 * m31 * m23 - m20 * m11 * m33 + m10 * m21 * m33,
	const t3 = m30 * m21 * m12 - m20 * m31 * m12 - m30 * m11 * m22 + m10 * m31 * m22 + m20 * m11 * m32 - m10 * m21 * m32;

	const det = m00 * t0 + m01 * t1 + m02 * t2 + m03 * t3;

	if(det === 0){
		return console.error('det zero!');
	}

	const detInv = 1 / det;

	output[ 0] = t0 * detInv;
	output[ 1] = ( m31 * m22 * m03 - m21 * m32 * m03 - m31 * m02 * m23 + m01 * m32 * m23 + m21 * m02 * m33 - m01 * m22 * m33 ) * detInv;
	output[ 2] = ( m11 * m32 * m03 - m31 * m12 * m03 + m31 * m02 * m13 - m01 * m32 * m13 - m11 * m02 * m33 + m01 * m12 * m33 ) * detInv;
	output[ 3] = ( m21 * m12 * m03 - m11 * m22 * m03 - m21 * m02 * m13 + m01 * m22 * m13 + m11 * m02 * m23 - m01 * m12 * m23 ) * detInv;

	output[ 4] = t1 * detInv;
	output[ 5] = ( m20 * m32 * m03 - m30 * m22 * m03 + m30 * m02 * m23 - m00 * m32 * m23 - m20 * m02 * m33 + m00 * m22 * m33 ) * detInv;
	output[ 6] = ( m30 * m12 * m03 - m10 * m32 * m03 - m30 * m02 * m13 + m00 * m32 * m13 + m10 * m02 * m33 - m00 * m12 * m33 ) * detInv;
	output[ 7] = ( m10 * m22 * m03 - m20 * m12 * m03 + m20 * m02 * m13 - m00 * m22 * m13 - m10 * m02 * m23 + m00 * m12 * m23 ) * detInv;

	output[ 8] = t2 * detInv;
	output[ 9] = ( m30 * m21 * m03 - m20 * m31 * m03 - m30 * m01 * m23 + m00 * m31 * m23 + m20 * m01 * m33 - m00 * m21 * m33 ) * detInv;
	output[10] = ( m10 * m31 * m03 - m30 * m11 * m03 + m30 * m01 * m13 - m00 * m31 * m13 - m10 * m01 * m33 + m00 * m11 * m33 ) * detInv;
	output[11] = ( m20 * m11 * m03 - m10 * m21 * m03 - m20 * m01 * m13 + m00 * m21 * m13 + m10 * m01 * m23 - m00 * m11 * m23 ) * detInv;

	output[12] = t3 * detInv;
	output[13] = ( m20 * m31 * m02 - m30 * m21 * m02 + m30 * m01 * m22 - m00 * m31 * m22 - m20 * m01 * m32 + m00 * m21 * m32 ) * detInv;
	output[14] = ( m30 * m11 * m02 - m10 * m31 * m02 - m30 * m01 * m12 + m00 * m31 * m12 + m10 * m01 * m32 - m00 * m11 * m32 ) * detInv;
	output[15] = ( m10 * m21 * m02 - m20 * m11 * m02 + m20 * m01 * m12 - m00 * m21 * m12 - m10 * m01 * m22 + m00 * m11 * m22 ) * detInv;
}
*/
module.exports = Mat3x4;
