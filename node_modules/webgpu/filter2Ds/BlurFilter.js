'use strict';

const Vulkan = require('../Vulkan');
const Filter2D = require('./Filter2D');

const MAX_W = 4096;
const MAX_H = 4096;

class BlurFilter extends Filter2D
{
	constructor(color=[1,0,1,1]){
		super();
		const {device, canvas} = Vulkan;

		this.uniformBuffer = device.createBuffer({
			size: 8 * 4,
			usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST
		});

		this.uniformBuffer2 = Vulkan.createBufferMapped(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, new Float32Array(color));

		this.bindGroup = device.createBindGroup({
			layout: Vulkan.bindGroupLayoutDict.bindGroupLayoutFilterBlur,
			entries: [{
				binding: 0,
				resource: {
					buffer: this.uniformBuffer
				}
			},{	binding: 1,
				resource: {
					buffer: this.uniformBuffer2
				}
			}]
		});
	}

	onDraw(){
		const {device, renderPassEncoder} = Vulkan;
		const rect = this.drawRect;
		renderPassEncoder.setPipeline(Vulkan.pipelineDict.pipelineFilterBlur);
		renderPassEncoder.setBindGroup(1, this.bindGroup);
		renderPassEncoder.draw(4, 1, 0, 0);//rect

		Vulkan.copyDataToBuffer(this.uniformBuffer, new Float32Array([
			rect.x / MAX_W, rect.y / MAX_H, rect.width / MAX_W, rect.height / MAX_H,
			rect.x / MAX_W - 1, rect.y / MAX_H + 1, 2 * rect.width / MAX_W, -2 * rect.height / MAX_H,

			//0,0,1,1,
			//-1, 1, 2, -2
		]));
	}
}

module.exports = BlurFilter;
