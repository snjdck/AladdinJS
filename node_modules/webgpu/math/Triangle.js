/**
 * 2R = c / sinC
 * S = 0.5 * ab * sinC
 * =>
 * R = abc / (4S)
 */
function CalcCircumcircleRadius(pa, pb, pc){
	const ab = pb.subtract(pa, null);
	const bc = pc.subtract(pb, null);
	const ca = pa.subtract(pc, null);
	return 0.5 * (ab.length * bc.length * ca.length) / Math.abs(ab.crossProd(bc));
}

function CalcInscribedCircleRadius(pa, pb, pc){
	const ab = pb.subtract(pa, null);
	const bc = pc.subtract(pb, null);
	const ca = pa.subtract(pc, null);
	return Math.abs(ab.crossProd(bc)) / (ab.length + bc.length + ca.length);
}

/**
 * s = start
 * e = end
 */
function IsSegmentIntersected(s1, e1, s2, e2){
	if(Math.max(s1.x, e1.x) < Math.min(s2.x, e2.x))return false;
	if(Math.max(s2.x, e2.x) < Math.min(s1.x, e1.x))return false;
	if(Math.max(s1.y, e1.y) < Math.min(s2.y, e2.y))return false;
	if(Math.max(s2.y, e2.y) < Math.min(s1.y, e1.y))return false;
	const s1s2 = s2.subtract(s1, null);
	const s1e1 = e1.subtract(s1, null);
	const s1e2 = e2.subtract(s1, null);
	const s2e1 = e1.subtract(s2, null);
	const s2e2 = e2.subtract(s2, null);
	if(s1e1.crossProd(s1s2) * s1e1.crossProd(s1e2) > 0)return false;
	if(s2e2.crossProd(s1s2) * s2e2.crossProd(s2e1) < 0)return false;
	return true;
}