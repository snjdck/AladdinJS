
const Vector3D = require('./Vector3D');

class Plane
{
	constructor(){
		this.normal = new Vector3D();
		this.distance = 0;
	}
	
	distanceToPoint(pt){
		return this.normal.dotProd(pt) - this.distance;
	}
	
	/** 点在平面上的投影点 */
	project(pt, result){
		let d = this.distanceToPoint(pt);
		pt.subtract(this.normal.scaleBy(d, result), result);
		return result;
	}
	
	mirror(pt, result){
		let d = this.distanceToPoint(pt) * 2;
		pt.subtract(this.normal.scaleBy(d, result), result);
		return result;
	}
	
	setTo(a, b, c, d){
		this.normal.setTo(a, b, c);
		let factor = 1 / this.normal.length;
		this.normal.scaleBy(factor);
		this.distance = d * factor;
		return this;
	}
	
	fromPoints(p0, p1, p2){
		p1.subtract(p0, tempPointAB);
		p2.subtract(p0, tempPointAC);
		tempPointAB.crossProd(tempPointAC, this.normal);
		this.distance = p0.dotProd(this.normal.normalize());
	}
	
	fromNormalAndPoint(normal, point){
		this.normal.copyFrom(normal);
		this.distance = point.dotProd(this.normal.normalize());
	}
}

const tempPointAB = new Vector3D();
const tempPointAC = new Vector3D();

module.exports = Plane;