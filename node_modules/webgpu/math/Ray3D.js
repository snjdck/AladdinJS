'use strict';

const Vector3D = require('opengl/math/Vector3D');

class Ray
{
	constructor(origin, direction){
		this.origin = origin;
		this.direction = direction;
	}

	cameraToWorld(matrix){
		matrix.transformCoords(this.origin);
		matrix.transformCoordsDelta(this.direction);
	}

	hitTestAABB(aabb){
		const {minX, minY, minZ, maxX, maxY, maxZ} = aabb;
		const {origin:{x:ox, y:oy, z:oz}, direction:{x:dx, y:dy, z:dz}} = this;

		const isOxIn = minX < ox && ox < maxX;
		const isOyIn = minY < oy && oy < maxY;
		const isOzIn = minZ < oz && oz < maxZ;

		if(isOxIn && isOyIn && isOzIn)return true;

		const isDxZero = dx === 0;
		const isDyZero = dy === 0;
		const isDzZero = dz === 0;

		if(isDxZero && isDyZero && isDzZero)return false;

		if(isDyZero && isDzZero)return isOyIn && isOzIn && (dx > 0 ? ox < maxX : minX < ox);
		if(isDzZero && isDxZero)return isOzIn && isOxIn && (dy > 0 ? oy < maxY : minY < oy);
		if(isDxZero && isDyZero)return isOxIn && isOyIn && (dz > 0 ? oz < maxZ : minZ < oz);

		if(isDxZero && !isOxIn)return false;
		if(isDyZero && !isOyIn)return false;
		if(isDzZero && !isOzIn)return false;

		let txMin, tyMin, tzMin, txMax, tyMax, tzMax;
		txMin = tyMin = tzMin = -Infinity;
		txMax = tyMax = tzMax =  Infinity;

		if(dx > 0){
			txMin = (minX - ox) / dx;
			txMax = (maxX - ox) / dx;
		}else if(dx < 0){
			txMin = (maxX - ox) / dx;
			txMax = (minX - ox) / dx;
		}

		if(dy > 0){
			tyMin = (minY - oy) / dy;
			tyMax = (maxY - oy) / dy;
		}else if(dy < 0){
			tyMin = (maxY - oy) / dy;
			tyMax = (minY - oy) / dy;
		}

		if(dz > 0){
			tzMin = (minZ - oz) / dz;
			tzMax = (maxZ - oz) / dz;
		}else if(dz < 0){
			tzMin = (maxZ - oz) / dz;
			tzMax = (minZ - oz) / dz;
		}

		return Math.max(txMin, tyMin, tzMin) < Math.min(txMax, tyMax, tzMax);
	}
}

module.exports = Ray;
