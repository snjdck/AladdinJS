
const submit = function(){
	const commandBufferList = [];
	function onSubmit(){
		this.submit(commandBufferList);
		commandBufferList.length = 0;
	}
	return (device, commandBuffer) => {
		if(commandBufferList.length == 0)queueMicrotask(onSubmit.bind(device.queue));
		commandBufferList.push(commandBuffer);
	}
}();

const CommandEncoder = function*(device){
	const encoder = device.createCommandEncoder();
	yield encoder;
	device.queue.submit([encoder.finish()]);
}

const ComputePass = function*(commandEncoder){
	const encoder = commandEncoder.beginComputePass();
	yield encoder;
	encoder.end();
}

const beginRenderPass = function*(desc, commandEncoder, ...textureViews){
	const n = desc.colorAttachments.length;
	for(let i=0; i<n; ++i){
		desc.colorAttachments[i].view = textureViews[i];
	}
	if(desc.depthStencilAttachment){
		desc.depthStencilAttachment.view = textureViews[n];
	}
	const encoder = commandEncoder.beginRenderPass(desc);
	yield encoder;
	encoder.end();
}

exports.CommandEncoder = CommandEncoder;
exports.ComputePass = ComputePass;

const createGetter = (newFn, hit=Object.create(null)) => k => k in hit ? hit[k] : (hit[k] = newFn(k));

exports.beginRenderPass = function(){
	const parseOp = v => {
		const [loadOp, storeOp] = v.split('+');
		return {
			loadOp: loadOp == 'load' ? 'load' : 'clear',
			clearValue: loadOp == 'load' ? undefined : JSON.parse(loadOp),
			storeOp,
		}
	}
	function parseDesc(desc){
		let colorAttachments, depthStencilAttachment;
		const [colors, depth, stencil] = desc.split(';');
		colorAttachments = colors ? colors.split(':').map(parseOp) : [];
		if(depth || stencil){
			depthStencilAttachment = {};
			if(depth){
				let {loadOp, storeOp, clearValue} = parseOp(depth);
				depthStencilAttachment.depthLoadOp = loadOp;
				depthStencilAttachment.depthClearValue = clearValue;
				depthStencilAttachment.depthStoreOp = storeOp;
			}
			if(stencil){
				let {loadOp, storeOp, clearValue} = parseOp(stencil);
				depthStencilAttachment.stencilLoadOp = loadOp;
				depthStencilAttachment.stencilClearValue = clearValue;
				depthStencilAttachment.stencilStoreOp = storeOp;
			}
		}
		return {colorAttachments, depthStencilAttachment};
	}
	const cache = createGetter(parseDesc);
	return (desc, ...args) => beginRenderPass(cache(desc), ...args);
}();