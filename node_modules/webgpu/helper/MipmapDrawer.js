'use strict';

const {CommandEncoder, beginRenderPass} = require('./CommandEncoder');
const {blit} = require('./RectDrawer');

const drawMipmap = function(){
	const drawFn = blit([[
		{name:'g_sampler', visibility:GPUShaderStage.FRAGMENT, sampler:{}, default:{minFilter:'linear'}},
		{name:'texture', visibility:GPUShaderStage.FRAGMENT, texture:{}},
	]], {format: 'bgra8unorm'}, `
		@fragment
		fn main(@location(0) uv: vec2<f32>) -> @location(0) vec4<f32> {
			return textureSample(texture, g_sampler, uv);
		}
`);
	return (device, texture) => {
		for(let commandEncoder of CommandEncoder(device)){
			for(let i=1, n=texture.mipLevelCount; i<n; ++i){
				for(let renderPassEncoder of beginRenderPass('[0,0,0,0]+store', commandEncoder, texture.createView({baseMipLevel:i,mipLevelCount:1}))){
					drawFn(renderPassEncoder, {texture: texture.createView({baseMipLevel:i-1,mipLevelCount:1})});
				}
			}
		}
	}
}();

exports.drawMipmap = drawMipmap;
