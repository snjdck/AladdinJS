'use strict';

const Vulkan = require('../Vulkan');
const {createListGetter} = require('utils/cache');
const {newPutFn, activeSlots} = require('utils/object/putInSlots');

function createSlot(maxCountPerSlot, bytePerInstance, valueFn, activeFn, cacheFn){
	let putInSlots = newPutFn(maxCountPerSlot);
	function add(entityList){
		const infoList = putInSlots(entityList.length);
		for(const {index, count, offsetInSlot, offsetInItem} of infoList){
			for(let i=0; i<count; ++i){
				cacheFn(index, (offsetInSlot + i) * bytePerInstance, valueFn(entityList[offsetInItem + i]));
			}
		}
		return infoList;
	}
	return {
		reset: () => putInSlots = newPutFn(maxCountPerSlot),
		bind(material, bindIndex){
			return {
				name: this.name, material, add,
				active(batchIndex, instanceOffset){
					activeFn.call(this, bindIndex, cacheFn(batchIndex), instanceOffset * bytePerInstance);
				}
			};
		}
	};
}

function createCache(usage, size){
	const getBuffer = createListGetter(() => Vulkan.device.createBuffer({usage: usage | GPUBufferUsage.COPY_DST, size}));
	return function(batchIndex, offset, value){
		if(value === undefined)return getBuffer(batchIndex);
		Vulkan.device.queue.writeBuffer(getBuffer(batchIndex), offset, value);
	}
}

const BufferSlot = (usage, size, activeFn) => (maxCountPerSlot, bytePerInstance, valueFn) => createSlot(maxCountPerSlot, bytePerInstance, valueFn, activeFn, createCache(usage, maxCountPerSlot * bytePerInstance * size));

const VertexBufferSlot = BufferSlot(GPUBufferUsage.VERTEX, 1, function(bindIndex, buffer, bufferOffset){
	Vulkan.renderPassEncoder.setVertexBuffer(bindIndex, buffer, bufferOffset);
});

const UniformBufferSlot = BufferSlot(GPUBufferUsage.UNIFORM, 2, function(bindIndex, buffer, bufferOffset){
	const {name, material} = this;
	Vulkan.renderPassEncoder.setBindGroup(bindIndex, material.createBindGroupWith({buffer,offset:0,size:0x4000}, name), [bufferOffset]);
});

exports.activeBindGroup = activeSlots;
exports.VertexBufferSlot = VertexBufferSlot;
exports.UniformBufferSlot = UniformBufferSlot;
