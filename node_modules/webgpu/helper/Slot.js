'use strict';

class Slot
{
	constructor(maxCount){
		this.maxCount = maxCount;
		this.nextIndex = 0;
		this.remainList = [];//[batchIndex, remainCount]
	}

	clear(){
		this.nextIndex = 0;
		this.remainList.length = 0;
	}

	*add(totalCount){
		if(totalCount == 0)return;
		const {remainList, maxCount} = this;
		const extra = totalCount % maxCount;
		if(extra > 0){
			const index = remainList.findIndex(remain => remain[1] >= extra);
			if(index < 0){
				remainList.push([this.nextIndex, maxCount - extra]);
				yield [this.nextIndex++, 0, extra];
			}else{
				const remain = remainList[index];
				yield [remain[0], maxCount - remain[1], extra];
				if(remain[1] > extra){
					remain[1] -= extra;
				}else{
					remainList.splice(index, 1);
				}
			}
		}
		for(let i=extra; i<totalCount;){
			const count = Math.min(maxCount, totalCount - i);
			yield [this.nextIndex++, 0, count];
			i += count;
		}
	}
}


/*
function assert(valueList, result){
	let slot = new Slot(10);
	let list = valueList.map(v => Array.from(slot.add(v))).reduce((a, b) => a.concat(b), []);
	let value = JSON.stringify(list);
	console.assert(value == result, value, result);
}

assert([0], '[]')
assert([7,3], '[[0,0,7],[0,7,3]]')
assert([7,4], '[[0,0,7],[1,0,4]]')
assert([7,4,3], '[[0,0,7],[1,0,4],[0,7,3]]')
assert([50, 50], '[[0,0,10],[1,0,10],[2,0,10],[3,0,10],[4,0,10],[5,0,10],[6,0,10],[7,0,10],[8,0,10],[9,0,10]]')
*/

module.exports = Slot;