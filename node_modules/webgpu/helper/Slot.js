'use strict';

class Slot
{
	constructor(maxCount){
		this.maxCount = maxCount;
		this.nextIndex = 0;
		this.remainList = [];//[batchIndex, remainCount]
	}

	clear(){
		this.nextIndex = 0;
		this.remainList.length = 0;
	}

	*add(totalCount){
		if(totalCount == 0)return;
		const {remainList, maxCount} = this;
		const extra = totalCount % maxCount;
		if(extra > 0){
			const index = findIndex(remainList, extra);
			if(index < 0){
				insert(remainList, [this.nextIndex, maxCount - extra]);
				yield [this.nextIndex++, 0, extra];
			}else{
				const remain = remainList[index];
				yield [remain[0], maxCount - remain[1], extra];
				remain[1] -= extra;
				update(remainList, index);
			}
		}
		for(let i=extra; i<totalCount;){
			const count = Math.min(maxCount, totalCount - i);
			yield [this.nextIndex++, 0, count];
			i += count;
		}
	}
}

function findIndex(list, value, n=list.length){
	for(let i=0; i<n; ++i){
		if(value <= list[i][1]){
			return i;
		}
	}
	return -1;
}

function insert(list, value){
	const i = findIndex(list, value[1]);
	if(i < 0){
		list.push(value);
	}else{
		list.splice(i, 0, value);
	}
}

function update(list, index){
	if(list[index][1] <= 0){
		list.splice(index, 1);
		return;
	}
	const value = list[index];
	const i = findIndex(list, value[1], index);
	if(i < 0)return;
	for(let j=index; j>i; --j){
		list[j] = list[j-1];
	}
	list[i] = value;
}

/*
function assert(valueList, result){
	let slot = new Slot(10);
	let list = valueList.map(v => Array.from(slot.add(v))).reduce((a, b) => a.concat(b), []);
	let value = JSON.stringify(list);
	console.assert(value == result, value, result);
}

assert([0], '[]')
assert([6,7,3,4], '[[0,0,6],[1,0,7],[1,7,3],[0,6,4]]')
assert([5,7,4,1,1,2], '[[0,0,5],[1,0,7],[0,5,4],[0,9,1],[1,7,1],[1,8,2]]')
assert([7,3], '[[0,0,7],[0,7,3]]')
assert([7,4], '[[0,0,7],[1,0,4]]')
assert([7,4,3], '[[0,0,7],[1,0,4],[0,7,3]]')
assert([50, 50], '[[0,0,10],[1,0,10],[2,0,10],[3,0,10],[4,0,10],[5,0,10],[6,0,10],[7,0,10],[8,0,10],[9,0,10]]')
//*/

module.exports = Slot;