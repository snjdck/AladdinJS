'use strict';

const Vulkan = require('../Vulkan');
const SlotCache = require('./SlotCache');

class VertexBufferSlotCache extends SlotCache
{
	constructor(maxCount, bytePerInstance, valueFn){
		super(createVertexBufferListCache(maxCount * bytePerInstance), maxCount, bytePerInstance, valueFn);
	}

	active(bindIndex, batchIndex, bufferOffset){
		const {cache, bytePerInstance} = this;
		const {renderPassEncoder} = Vulkan;
		renderPassEncoder.setVertexBuffer(bindIndex, cache(batchIndex), bufferOffset * bytePerInstance);
	}
}

function createVertexBufferListCache(size){
	const bufferList = [];
	return function(batchIndex, offset, value){
		const {device} = Vulkan;
		let buffer = bufferList[batchIndex];
		if(buffer == null){
			buffer = bufferList[batchIndex] = device.createBuffer({
				size,
				usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST
			});
		}
		if(!value)return buffer;
		Vulkan.copyDataToBuffer(buffer, value, offset);
	}
}

module.exports = VertexBufferSlotCache;
