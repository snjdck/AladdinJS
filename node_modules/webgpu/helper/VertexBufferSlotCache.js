'use strict';

const Vulkan = require('../Vulkan');
const {SlotCache, bufferFactory} = require('./SlotCache');

class VertexBufferSlotCache extends SlotCache
{
	constructor(maxCount, bytePerInstance, valueFn){
		super(createVertexBufferListCache(maxCount * bytePerInstance), maxCount, bytePerInstance, valueFn);
	}

	active(bindIndex, batchIndex, bufferOffset){
		const {cache, bytePerInstance} = this;
		const {renderPassEncoder} = Vulkan;
		renderPassEncoder.setVertexBuffer(bindIndex, cache(batchIndex), bufferOffset * bytePerInstance);
	}
}

function createVertexBufferListCache(size){
	const getBuffer = bufferFactory(() => Vulkan.createBuffer(GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST, size));
	return function(batchIndex, offset, value){
		const buffer = getBuffer(batchIndex);
		return value ? Vulkan.copyDataToBuffer(buffer, value, offset) : buffer;
	}
}

module.exports = VertexBufferSlotCache;
