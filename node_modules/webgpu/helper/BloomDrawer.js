'use strict';

const {CommandEncoder} = require('../core/CommandEncoder');
const Pipeline = require('../materials/Pipeline');
const {fetchBloomTexture} = require('../Vulkan/resource');

const createView = (texture, baseMipLevel=0) => texture.createView({baseMipLevel, mipLevelCount:1});

const drawBloom = function(){
	const blit1 = Pipeline.Blit([[
		{name:'g_sampler', sampler:{}, default:{minFilter:'linear',magFilter:'linear'}},
		{name:'texture'  , texture:{}},
	]], {format: 'rgba16float'}, `
		#include<gauss_blur>
		@fragment{
			let stride = 1 / vec2<f32>(textureDimensions(texture));
			return vec4(GaussNxN(texture, g_sampler, uvxy.xy, 5, stride, 1), 1);
		}
	`);
	const blit2 = Pipeline.Blit([[
		{name:'g_sampler', sampler:{}, default:{minFilter:'linear',magFilter:'linear'}},
		{name:'texture' , texture:{}},
		{name:'texture2', texture:{}}
	]], {format: 'rgba16float'}, `
		#include<gauss_blur>
		@fragment{
			let curr_stride = 1 / vec2<f32>(textureDimensions(texture));
			let prev_stride = 1 / vec2<f32>(textureDimensions(texture2));
			let curr_mip = GaussNxN(texture, g_sampler, uvxy.xy, 5, curr_stride, 1);
			let prev_mip = GaussNxN(texture2, g_sampler, uvxy.xy, 5, prev_stride, 1);
			return vec4(curr_mip + prev_mip, 1);
		}
	`);

	const blit3 = Pipeline.Blit([[
		{name:'g_sampler', sampler:{}, default:{minFilter:'linear',magFilter:'linear'}},
		{name:'texture' , texture:{}},
	]], {format: 'rgba16float'}, `
		@fragment{
			return textureSample(texture, g_sampler, uvxy.xy) * 5;
		}
	`);

	return (device, texture) => {
		const {texture0, texture1} = fetchBloomTexture({width:texture.width, height:texture.height});
		const n = texture0.mipLevelCount;
		for(let commandEncoder of CommandEncoder(device)){
			for(let i=0; i<n; ++i){
				for(let renderPassEncoder of commandEncoder.beginRenderPass('[0,0,0,0]+store', createView(texture0, i))){
					blit1(renderPassEncoder, {texture: i==0 ? createView(texture, 0) : createView(texture0, i-1)});
				}
			}
			for(let i=n-2; i>=0; --i){
				for(let renderPassEncoder of commandEncoder.beginRenderPass('[0,0,0,0]+store', createView(texture1, i))){
					blit2(renderPassEncoder, {
						texture: createView(texture0, i),
						texture2:createView(i == n-2 ? texture0 : texture1, i+1)
					});
				}
			}
			//*
			//commandEncoder.copyTextureToTexture({texture}, {texture:texture2}, texture2);
			for(let renderPassEncoder of commandEncoder.beginRenderPass('[0,0,0,0]+store', createView(texture))){
				blit3(renderPassEncoder, {texture: createView(texture1)});
			}
			//commandEncoder.copyTextureToTexture({texture:texture1}, {texture,mipLevel:1}, [texture1.width, texture1.height]);
		}
	}
}();

exports.drawBloom = drawBloom;
