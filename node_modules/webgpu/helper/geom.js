
/*4---5
-/|  /|
6---7 |
| 0-|-1
|/  |/
2---3
min = 0, max = 7
*/
const planeList = [
	[[0,1,2,3],[0,0,-1]],
	[[6,7,4,5],[0,0, 1]],
	[[6,4,2,0],[-1,0,0]],
	[[5,7,1,3],[ 1,0,0]],
	[[4,5,0,1],[0,-1,0]],
	[[7,6,3,2],[0, 1,0]],
];

const position = new Float32Array(36<<2);
const normal = new Float32Array(36<<2);

for(let i=0; i<6; ++i){
	const [plane, dir] = planeList[i];
	let offset = 6 * i << 2;
	for(let k of [0,1,2,3,2,1]){
		normal[offset] = dir[0]; position[offset++] = plane[k] & 1;
		normal[offset] = dir[1]; position[offset++] = plane[k] >> 1 & 1;
		normal[offset] = dir[2]; position[offset++] = plane[k] >> 2;
		offset++;
	}
}
/*
const cube = {
	subMeshList:[{vertexCount:36, attributes:{
		position,
		normal,
	}}]
}
*/
function createCube(bound){
	const pos = new Float32Array(36<<2);
	for(let i=0; i<pos.length; i+=4){
		pos[i  ] = position[i  ] ? bound.maxX : bound.minX;
		pos[i+1] = position[i+1] ? bound.maxY : bound.minY;
		pos[i+2] = position[i+2] ? bound.maxZ : bound.minZ;
	}
	return {
		subMeshList:[{vertexCount:36, attributes:{
			position:pos,
			normal,
		}}]
	}
}

function createPlane(){
	const w = 1000;
	const h = 500;
	return {
		subMeshList:[{vertexCount:4, attributes:{
			position:new Float32Array([
				0,0,h,0,
				w,0,h,0,
				0,0,0,0,
				w,0,0,0,
			]),
			uv:new Float32Array([
				0,0,
				1,0,
				0,1,
				1,1,
			]),
			normal:new Float32Array([
				0,1,0,0,
				0,1,0,0,
				0,1,0,0,
				0,1,0,0,
			]),
		}}]
	};
}

exports.createCube = createCube;
exports.createPlane = createPlane;