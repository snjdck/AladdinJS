'use strict';

const Pipeline = require('../materials/Pipeline');
/*
(0, 1, 2), (2, 1, 3), (2, 3, 4), (4, 3, 5)
0-2-4
|/|/|
1-3-5
*/
const defaultTarget = {
	blend: {
		color:{srcFactor: 'one', dstFactor: 'one', operation: 'add'},
		alpha:{srcFactor: 'one', dstFactor: 'one', operation: 'add'},
	}
};

const createDrawFn = (groups, code, target=defaultTarget) => {
	const pipeline = new Pipeline({
		groups,
		vertex: {entryPoint: 'mainVertex', code},
		fragment: {entryPoint: 'mainFragment', code, targets:[{format: 'bgra8unorm', ...target}]},
		primitive: {topology: 'triangle-strip'}
	});
	return (renderPassEncoder, resources) => {
		pipeline.setPipeline(renderPassEncoder);
		pipeline.setResources(renderPassEncoder, resources);
		renderPassEncoder.draw(4);//quad
	};
}

const createDepthDrawFn = (viewDimension, code) => createDrawFn([[
		{name:'depthTexture', binding:0, visibility:GPUShaderStage.FRAGMENT, texture:{sampleType:'depth'}},//depth, sint, uint, unfilterable-float
		{name:'normalTexture', binding:1, visibility:GPUShaderStage.FRAGMENT, texture:{sampleType:'unfilterable-float'}},//depth, sint, uint, unfilterable-float
		{name:'lightDepthTexture', binding:3, visibility:GPUShaderStage.FRAGMENT, texture:{sampleType:'depth',viewDimension}},
		{name:'cameraMatrixList', binding:4, visibility:GPUShaderStage.FRAGMENT, buffer:{}},
		{binding:7, visibility:GPUShaderStage.FRAGMENT, sampler:{type:'comparison'}, default:{compare:'less-equal'}},//greater, less-equal
	]], `
		const shadow_bias:f32 = 0.001;

		struct Info {
			lightCamera: MVP,
			viewCameraInv: MVP,
			lightColor: vec4<f32>,
			lightDirection: vec4<f32>,
		}

		fn m44tom33(m: mat4x4<f32>) -> mat3x3<f32> {return mat3x3<f32>(m[0].xyz, m[1].xyz, m[2].xyz);}
		fn m34tom33(m: mat3x4<f32>) -> mat3x3<f32> {return mat3x3<f32>(m[0].xyz, m[1].xyz, m[2].xyz);}
		fn m44tom34(m: mat4x4<f32>) -> mat3x4<f32> {return mat3x4<f32>(m[0], m[1], m[2]);}

		@group(0) @binding(0) var texture_position: texture_depth_2d;
		@group(0) @binding(1) var texture_normal: texture_2d<f32>;
		@group(0) @binding(3) var texture_depth: texture_depth_${viewDimension};
		@group(0) @binding(4) var<uniform> info: Info;
		@group(0) @binding(7) var sampler_depth: sampler_comparison;

		struct Output {
			@builtin(position) position: vec4<f32>,
			@location(0) xy: vec2<f32>,
		}

		fn calcNormal(v: vec2<f32>) -> vec3<f32> {
			let t = v * v;
			return vec3(v, sqrt(1 - t.x - t.y));
		}

		const pi:f32 = 3.1415926;

		struct PbrInfo {
			tColor:vec3<f32>,
			l:vec3<f32>,
			n:vec3<f32>,
			v:vec3<f32>,
			h:vec3<f32>,
			roughness:f32,
			metalness:f32,
			NdotH: f32,
			NdotL: f32,
			NdotV: f32,
		}

		fn microface_distribution(info:PbrInfo) -> f32 {
			let roughnessSq = info.roughness * info.roughness;
			let f:f32 = info.NdotH * info.NdotH * (roughnessSq - 1) + 1;
			return roughnessSq / (pi * f * f);
		}

		fn geometric_occlusion(info:PbrInfo) -> f32 {
			let k:f32 = (info.roughness + 1) * (info.roughness + 1) / 8.0;
			let attenuationL = info.NdotL + sqrt(mix(info.NdotL * info.NdotL, 1, k));
			let attenuationV = info.NdotV + sqrt(mix(info.NdotV * info.NdotV, 1, k));
			return 1 / max(0.01, attenuationL * attenuationV);
		}

		fn specluar_reflection(info:PbrInfo) -> vec3<f32> {
			let HdotV = saturate(dot(info.h, info.v));
			let f0 = mix(vec3<f32>(0.04), info.tColor, info.metalness);
			//return f0;
			return mix(f0, vec3<f32>(1), pow(1 - HdotV, 1));
		}

		fn test(
			l:vec3<f32>,
			n:vec3<f32>,
			v:vec3<f32>,
			lColor:vec3<f32>,
			tColor:vec3<f32>,
			roughness:f32,
			metalness:f32,
		) -> vec3<f32> {
			var info:PbrInfo;
			info.l = l;
			info.n = n;
			info.v = v;
			info.tColor = tColor;
			info.roughness = 0.1;
			info.metalness = 1;
			info.h = normalize(info.l + info.v);
			info.NdotH = saturate(dot(info.n, info.h));
			info.NdotL = saturate(dot(info.n, info.l));
			info.NdotV = saturate(dot(info.n, info.v));
			
			let ks: f32 = 0.5;//need input

			let diffuse = tColor;// / pi;
			let specular = microface_distribution(info) * geometric_occlusion(info) * specluar_reflection(info);
			return specluar_reflection(info) * lColor;
			//return (diffuse + specular) * lColor * info.NdotL;
		}

		struct MVP {
			screenMatrix: mat4x4<f32>,
			@size(64) cameraMatrix: mat3x4<f32>,
		}

		@vertex
		fn mainVertex(@builtin(vertex_index) vertex_index: u32) -> Output {
			let vertex = vec2<f32>(vec2(vertex_index >> 1, vertex_index & 1));

			var position = vertex * 2 - 1;
			position.y = -position.y;

			return Output(vec4<f32>(position, 0, 1), position);
		}

		fn calcWorldPt(position:vec2<f32>, depth:f32, pvm: MVP) -> vec3<f32> {
			let cameraPt = vec4<f32>(position, depth, 1) * pvm.screenMatrix;
			return vec4<f32>(cameraPt.xyz / cameraPt.w, 1) * pvm.cameraMatrix;
		}

		fn calc_shadow_2d(texture: texture_depth_2d, pos_in_light_camera: vec3<f32>, lightScreenMatrix: mat4x4<f32>) -> f32 {
			let pos_in_light_screen = vec4<f32>(pos_in_light_camera, 1) * lightScreenMatrix;
			let uv = (vec2(pos_in_light_screen.x, -pos_in_light_screen.y) / pos_in_light_screen.w + 1) * 0.5;
			let depth = pos_in_light_screen.z / pos_in_light_screen.w;
			return textureSampleCompare(texture, sampler_depth, uv, depth - shadow_bias);//depth_ref <= the sampled depth
		}

		fn calc_shadow_cube(texture: texture_depth_cube, pos_in_light_camera: vec3<f32>, lightScreenMatrix: mat4x4<f32>) -> f32 {
			let absv = abs(pos_in_light_camera);
			let maxComp = max(absv.x, max(absv.y, absv.z));
			let pos_in_light_screen = vec4<f32>(0, 0, maxComp, 1) * lightScreenMatrix;
			let depth = pos_in_light_screen.z / pos_in_light_screen.w;
			return textureSampleCompare(texture, sampler_depth, pos_in_light_camera, depth - shadow_bias);//depth_ref <= the sampled depth
		}

		@fragment
		fn mainFragment(
			@builtin(position) frag_coord: vec4<f32>,
			@location(0) position: vec2<f32>,
		) -> @location(0) vec4<f32> {
			let coords = vec2<u32>(frag_coord.xy);
			//let normal_in_world = calcNormal(textureLoad(texture_normal, coords, 0).xy);
			let normal_in_world = textureLoad(texture_normal, coords, 0).xyz;
			let pos_in_world = calcWorldPt(position, textureLoad(texture_position, coords, 0), info.viewCameraInv);
			let pos_in_light_camera: vec3<f32> = vec4<f32>(pos_in_world, 1) * info.lightCamera.cameraMatrix;
			let shadow_factor = calc_shadow_${viewDimension}(texture_depth, pos_in_light_camera, info.lightCamera.screenMatrix);
			${code}
		}
`);

exports.createDrawFn = createDrawFn;
exports.createDepthDrawFn = createDepthDrawFn;
