'use strict';

const Vulkan = require('../Vulkan');
const {SlotCache, bufferFactory} = require('./SlotCache');
const BufferBindGroup = require('./BufferBindGroup');

class UniformBufferSlotCache extends SlotCache
{
	constructor(bindGroupLayout, bytePerInstance, valueFn){
		const maxCount = Math.floor(0x4000 / bytePerInstance);
		super(createUniformBufferListCache(bindGroupLayout, 0x8000 - bytePerInstance), maxCount, bytePerInstance, valueFn);
	}

	active(bindIndex, batchIndex, bufferOffset){
		const {cache, bytePerInstance} = this;
		const {renderPassEncoder} = Vulkan;
		renderPassEncoder.setBindGroup(bindIndex, cache(batchIndex), [bufferOffset * bytePerInstance]);
	}
}

function createUniformBufferListCache(layout, size){
	const getGroup = bufferFactory(() => new BufferBindGroup(
		[[GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, size]],
		buffer => [[layout, {buffer, size: 0x4000}]],
	));
	return function(batchIndex, offset, value){
		const group = getGroup(batchIndex);
		return value ? Vulkan.copyDataToBuffer(group.getBuffer(), value, offset) : group.getBindGroup();
	}
}

module.exports = UniformBufferSlotCache;
