'use strict';

const Vulkan = require('../Vulkan');
const {SlotCache, bufferFactory} = require('./SlotCache');

class UniformBufferSlotCache extends SlotCache
{
	constructor(bindGroupLayout, bytePerInstance, valueFn){
		const maxCount = Math.floor(0x4000 / bytePerInstance);
		super(createUniformBufferListCache(bindGroupLayout, 0x8000 - bytePerInstance), maxCount, bytePerInstance, valueFn);
	}

	active(bindIndex, batchIndex, bufferOffset){
		const {cache, bytePerInstance} = this;
		const {renderPassEncoder} = Vulkan;
		renderPassEncoder.setBindGroup(bindIndex, cache(batchIndex), [bufferOffset * bytePerInstance]);
	}
}

function createUniformBufferListCache(layout, size){
	const getBuffer = bufferFactory(() => {
		const buffer = Vulkan.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, size);
		const bindGroup = Vulkan.createBindGroup(layout, [{buffer, size: 0x4000}]);
		return [buffer, bindGroup];
	});
	return function(batchIndex, offset, value){
		const [buffer, bindGroup] = getBuffer(batchIndex);
		return value ? Vulkan.copyDataToBuffer(buffer, value, offset) : bindGroup;
	}
}

module.exports = UniformBufferSlotCache;
