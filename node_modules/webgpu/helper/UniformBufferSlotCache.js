'use strict';

const Vulkan = require('../Vulkan');
const SlotCache = require('./SlotCache');

class UniformBufferSlotCache extends SlotCache
{
	constructor(bindGroupLayout, bytePerInstance, valueFn){
		const maxCount = Math.floor(0x4000 / bytePerInstance);
		super(createUniformBufferListCache(bindGroupLayout, 0x8000 - bytePerInstance), maxCount, bytePerInstance, valueFn);
	}

	active(bindIndex, batchIndex, bufferOffset){
		const {cache, bytePerInstance} = this;
		const {renderPassEncoder} = Vulkan;
		renderPassEncoder.setBindGroup(bindIndex, cache(batchIndex), [bufferOffset * bytePerInstance]);
	}
}

function createUniformBufferListCache(layout, size){
	const bufferList = [];
	const bindGroupList = [];
	return function(batchIndex, offset, value){
		let uniformBuffer = bufferList[batchIndex];
		if(uniformBuffer == null){
			uniformBuffer = bufferList[batchIndex] = Vulkan.createBuffer(GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST, size);
			bindGroupList[batchIndex] = Vulkan.createBindGroup(layout, [
				{buffer: uniformBuffer, size: 0x4000}
			]);
		}
		if(!value)return bindGroupList[batchIndex];
		Vulkan.copyDataToBuffer(uniformBuffer, value, offset);
	}
}

module.exports = UniformBufferSlotCache;
