'use strict';

const Vulkan = require('../Vulkan');
const Slot = require('./Slot');

class SlotCache
{
	constructor(bindGroupLayout, maxCount, bytePerInstance, uniformValueFn){
		this.uniformCache = Vulkan.createUniformBufferListCache(bindGroupLayout, 0x4000, maxCount * bytePerInstance);
		this.slot = new Slot(maxCount);
		this.bytePerInstance = bytePerInstance;
		this.uniformValueFn = uniformValueFn;
	}

	clear(){
		this.slot.clear();
	}

	getBindGroup(index){
		return this.uniformCache(index);
	}

	add(instanceList){
		const {uniformCache, slot, bytePerInstance, uniformValueFn} = this;
		const infoList = Array.from(slot.add(instanceList.length));
		let offset = 0;
		for(const info of infoList){
			const instanceCount = info[2];
			for(let i=0; i<instanceCount; ++i){
				const instance = instanceList[offset+i];
				uniformCache(info[0], (info[1] + i) * bytePerInstance, uniformValueFn(instance));
			}
			offset += instanceCount;
		}
		return infoList;
	}
}

module.exports = SlotCache;
