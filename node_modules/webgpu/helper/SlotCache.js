'use strict';

const Slot = require('./Slot');

class SlotCache
{
	constructor(cache, maxCount, bytePerInstance, valueFn){
		this.cache = cache;
		this.slot = new Slot(maxCount);
		this.bytePerInstance = bytePerInstance;
		this.valueFn = valueFn;
	}

	clear(){
		this.slot.clear();
	}

	add(instanceList){
		const {cache, slot, bytePerInstance, valueFn} = this;
		const infoList = Array.from(slot.add(instanceList.length));
		let index = 0;
		for(const [batchIndex, instanceOffset, instanceCount] of infoList){
			for(let i=0; i<instanceCount; ++i){
				cache(batchIndex, (instanceOffset + i) * bytePerInstance, valueFn(instanceList[index++]));
			}
		}
		return infoList;
	}

	bind(index){
		return new SlotCacheWrapper(this, index);
	}
}

class SlotCacheWrapper
{
	constructor(target, bindIndex){
		this.target = target;
		this.bindIndex = bindIndex;
	}

	clear(){
		this.target.clear();
	}

	add(instanceList){
		return this.target.add(instanceList);
	}

	active(batchIndex, bufferOffset){
		this.target.active(this.bindIndex, batchIndex, bufferOffset);
	}
}

exports.SlotCache = SlotCache;
exports.bufferFactory = fn => (list => i => list[i] ?? (list[i] = fn()))([]);
