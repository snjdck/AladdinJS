'use strict';

const Vulkan = require('../Vulkan');
const Slot = require('./Slot');

class SlotCache
{
	constructor(cache, maxCount, bytePerInstance, valueFn){
		this.cache = cache;
		this.slot = new Slot(maxCount);
		this.bytePerInstance = bytePerInstance;
		this.valueFn = valueFn;
	}

	clear(){
		this.slot.clear();
	}

	add(instanceList){
		const {cache, slot, bytePerInstance, valueFn} = this;
		const infoList = Array.from(slot.add(instanceList.length));
		let offset = 0;
		for(const info of infoList){
			const instanceCount = info[2];
			for(let i=0; i<instanceCount; ++i){
				const instance = instanceList[offset+i];
				cache(info[0], (info[1] + i) * bytePerInstance, valueFn(instance));
			}
			offset += instanceCount;
		}
		return infoList;
	}

	bind(index){
		return new SlotCacheWrapper(this, index);
	}
}

class SlotCacheWrapper
{
	constructor(target, bindIndex){
		this.target = target;
		this.bindIndex = bindIndex;
	}

	clear(){
		this.target.clear();
	}

	add(instanceList){
		return this.target.add(instanceList);
	}

	active(batchIndex, bufferOffset){
		this.target.active(this.bindIndex, batchIndex, bufferOffset);
	}
}

module.exports = SlotCache;
