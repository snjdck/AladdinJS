'use strict';

const Slot = require('./Slot');

class SlotCache
{
	constructor(cache, maxCount, bytePerInstance, valueFn){
		this.cache = cache;
		this.slot = new Slot(maxCount);
		this.bytePerInstance = bytePerInstance;
		this.valueFn = valueFn;
	}

	reset(){
		this.slot.clear();
	}

	add(instanceList){
		const {cache, slot, bytePerInstance, valueFn} = this;
		const infoList = Array.from(slot.add(instanceList.length));
		let index = 0;
		for(const [batchIndex, instanceOffset, instanceCount] of infoList){
			for(let i=0; i<instanceCount; ++i){
				cache(batchIndex, (instanceOffset + i) * bytePerInstance, valueFn(instanceList[index++]));
			}
		}
		return infoList;
	}

	bind(index){
		return new SlotCacheWrapper(this, index);
	}
}

class SlotCacheWrapper
{
	constructor(target, bindIndex){
		this.target = target;
		this.bindIndex = bindIndex;
	}

	clear(){
		this.target.clear();
	}

	add(instanceList){
		return this.target.add(instanceList);
	}

	active(batchIndex, bufferOffset){
		this.target.active(this.bindIndex, batchIndex, bufferOffset);
	}
}

const calcBindGroupInfoListFn = function(){
	function slotMapFn(slot){
		return slot.add(this);
	}
	return slotList => entityList => slotList.map(slotMapFn, entityList);
}();

function activeBindGroupFn(slotList){
	const slotCount = slotList.length;
	const offsetList = new Array(slotCount);
	const indexList = new Array(slotCount);
	return function*(entityCount, infoList){
		offsetList.fill(0);
		indexList.fill(0);
		for(let i=0; i<entityCount;){
			for(let j=0; j<slotCount; ++j){
				if(i < offsetList[j]){
					const [batchIndex, bufferOffset, instanceCount] = infoList[j][indexList[j]-1];
					slotList[j].active(batchIndex, bufferOffset + i - (offsetList[j] - instanceCount));
				}else{
					const [batchIndex, bufferOffset, instanceCount] = infoList[j][indexList[j]++];
					slotList[j].active(batchIndex, bufferOffset);
					offsetList[j] += instanceCount;
				}
			}
			const offsetEnd = Math.min(entityCount, ...offsetList);
			yield offsetEnd - i;
			i = offsetEnd;
		}
	}
}

/*
console.log(Array.from(activeBindGroupFn([])(6, [])))
console.log(Array.from(activeBindGroupFn([{active(...args){
	console.log('active 1:', ...args)
}},{active(...args){
	console.log('active 2:', ...args)
}}])(6, [[[0,0,3],[1,0,3]],[[0,0,2],[1,0,2],[2,0,2]]])))
//*/

exports.SlotCache = SlotCache;
exports.calcBindGroupInfoListFn = calcBindGroupInfoListFn;
exports.activeBindGroupFn = activeBindGroupFn;
