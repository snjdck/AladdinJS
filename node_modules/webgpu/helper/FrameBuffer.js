'use strict';

const Vulkan = require('../Vulkan');

class FrameBufferBase
{
	constructor(useDepthBuffer){
		this.useDepthBuffer = useDepthBuffer;
		this.width = this.height = 0;
	}

	needResize({width, height}){
		return this.width < width || this.height < height;
	}

	resize(frameRect){
		if(this.needResize(frameRect)){
			this.width = frameRect.width;
			this.height = frameRect.height;
			this._resize(frameRect.width, frameRect.height);
		}else{
			frameRect.width = this.width;
			frameRect.height = this.height;
		}
	}
}

class FrameBuffer extends FrameBufferBase
{
	constructor(useDepthBuffer=true){
		super(useDepthBuffer);
		this.renderPassDesc = {
			colorAttachments: [{
				attachment: null,
				loadValue: [0,0,0,0]
			}]
		};
		if(useDepthBuffer){
			this.renderPassDesc.depthStencilAttachment = {
				attachment: null,
				depthLoadValue: 1.0,
				depthStoreOp: 'store',
				stencilLoadValue: 0,
				stencilStoreOp: 'store'
			};
		}
	}

	get colorView(){
		return this.colorBuffer.createView();
	}

	get depthView(){
		return this.depthBuffer.createView();
	}

	_resize(width, height){
		if(this.colorBuffer)this.colorBuffer.destroy();
		if(this.depthBuffer)this.depthBuffer.destroy();

		this.colorBuffer = Vulkan.device.createTexture({
			size: [width, height, 1],
			format: Vulkan.swapChainFormat,
			usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.SAMPLED
		});
		this.renderPassDesc.colorAttachments[0].attachment = this.colorView;

		if(this.useDepthBuffer){
			this.depthBuffer = Vulkan.createDepthTexture(width, height);
			this.renderPassDesc.depthStencilAttachment.attachment = this.depthView;
		}
	}

	beginRenderPass(){
		Vulkan.renderPassEncoder = Vulkan.commandEncoder.beginRenderPass(this.renderPassDesc);
	}
}

class FrameBufferList extends FrameBufferBase
{
	constructor(useDepthBuffer=true, count=2){
		super(useDepthBuffer);
		this.frameBufferList = new Array(count).fill().map(() => new FrameBuffer(useDepthBuffer));
	}

	getFrameBuffer(index=0){
		return this.frameBufferList[index];
	}

	_resize(width, height){
		for(const frameBuffer of this.frameBufferList){
			frameBuffer._resize(width, height);
		}
	}

	render(handler){
		for(const frameBuffer of this.frameBufferList){
			frameBuffer.beginRenderPass();
			handler.next();
			Vulkan.renderPassEncoder.endPass();
		}
	}
}

exports.FrameBuffer = FrameBuffer;
exports.FrameBufferList = FrameBufferList;
