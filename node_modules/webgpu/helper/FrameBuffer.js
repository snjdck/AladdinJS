'use strict';

const Vulkan = require('../Vulkan');

class FrameBuffer
{
	constructor(useDepthBuffer=true){
		this.useDepthBuffer = useDepthBuffer;
		this.width = this.height = 0;
		this.renderPassDesc = {
			colorAttachments: [{
				attachment: null,
				loadValue: [0,0,0,0]
			}]
		};
		if(useDepthBuffer){
			this.renderPassDesc.depthStencilAttachment = {
				attachment: null,
				depthLoadValue: 1.0,
				depthStoreOp: 'store',
				stencilLoadValue: 0,
				stencilStoreOp: 'store'
			};
		}
	}

	resize(width, height){
		this.width = width;
		this.height = height;

		if(this.colorBuffer)this.colorBuffer.destroy();
		if(this.depthBuffer)this.depthBuffer.destroy();

		this.colorBuffer = Vulkan.device.createTexture({
			size: [width, height, 1],
			format: Vulkan.swapChainFormat,
			usage: GPUTextureUsage.OUTPUT_ATTACHMENT | GPUTextureUsage.SAMPLED
		});
		this.colorView = this.colorBuffer.createView();
		this.renderPassDesc.colorAttachments[0].attachment = this.colorView;

		if(this.useDepthBuffer){
			this.depthBuffer = Vulkan.createDepthTexture(width, height);
			this.depthView = this.depthBuffer.createView();
			this.renderPassDesc.depthStencilAttachment.attachment = this.depthView;
		}
	}

	beginRenderPass({width, height}){
		if(this.width < width || this.height < height){
			this.resize(width, height);
		}
		return Vulkan.renderPassEncoder = Vulkan.commandEncoder.beginRenderPass(this.renderPassDesc);
	}
}

module.exports = FrameBuffer;
