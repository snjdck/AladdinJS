'use strict';

const Clock = require('opengl/Clock');
const {Texture2D} = require('opengl/textures');
const {Quaternion, Vector3D, RADIAN} = require('opengl/math');
const DisplayObject2D = require('./DisplayObject2D');
const terrain = require('./terrain');
const world1objects = require('mu/world1objects');
const readMapObj = require('mu/readMapObj');
const mapTileList = require('mu/mapTileList');

const glsl_compiler = require('./glsl_compiler');
const KeyCode = require('opengl/const/KeyCode');
const {playMP3} = require('webonly/audio');
const {supportDrag} = require('webonly');

const shader_2d = require('./shaders/2d');
const shader_3d = require('./shaders/3d');
const shader_filter = require('./shaders/filter');
const shader_terrain = require('./shaders/terrain');
const shader_cull = require('./shaders/cull');
const shader_bound = require('./shaders/bound');
const shader_billboard = require('./shaders/billboard');
const {Bitmap, Bitmap3D} = require('./DisplayObject2DFactory');
const View3D = require('./view3d');
const Lens = require('./cameras/Lens');
const Camera3D = require('./cameras/Camera3D');
require('./lib');
const {parse} = require('mu/bmd');
const Vulkan = require('./Vulkan');
const MeshEntity = require('./3d/MeshEntity');
//const Material = require('./materials/Material')
const TextureMaterial = require('./materials/TextureMaterial')
const WingTextureMaterial = require('./materials/WingTextureMaterial')
const BillboardMaterial = require('./materials/BillboardMaterial')
const ColorMaterial = require('./materials/ColorMaterial')
const BoundMaterial = require('./materials/BoundMaterial')
const TerrainMaterial = require('./materials/TerrainMaterial')
const WireframeMaterial = require('./materials/WireframeMaterial')

const BlurFilter = require('./filter2Ds/BlurFilter');
const ColorMatrixFilter = require('./filter2Ds/ColorMatrixFilter');

const AABB = require('opengl/bounds/AABB');

const createTextureArray = function(){
	let canvas = document.createElement('canvas');
	let context = canvas.getContext('2d');
	return async function(pathList, width, height){
		const imageList = await Promise.all(pathList.map(v => Vulkan.loadImage(v)));
		width = width || Math.max(...imageList.map(v => v.naturalWidth));
		height = height || Math.max(...imageList.map(v => v.naturalHeight));
		const resizeOption = {
			resizeWidth: width,
			resizeHeight: height,
			resizeQuality: 'high',
		};
		const imageBitmapList = await Promise.all(imageList.map(v => createImageBitmap(v, resizeOption)));
		const depth = pathList.length;
		const {device} = Vulkan;
		const texture = device.createTexture({
			size: [width, height, depth],
			format: 'rgba8unorm',
			usage: GPUTextureUsage.SAMPLED | GPUTextureUsage.COPY_DST,
		});
		imageBitmapList.forEach((imageBitmap, i) => device.queue.copyImageBitmapToTexture(
			{imageBitmap},
			{texture, origin: [0, 0, i]},
			[width, height, 1]
		));
		return texture.createView({dimension: '2d-array', arrayLayerCount:depth});
		/*
		return texture.createView({
			dimension: '2d',
			baseArrayLayer: 4,
			arrayLayerCount: 1,
		});
		//*/
	}
}()

async function init(){
	playMP3('./assets/Music/MuTheme.mp3');
	let dragTotalCount = 0;
	let lastDragItem;
	supportDrag(function({files}){
		Array.from(files).map(v => {
			let reader = new FileReader();
			reader.onload = () => {
				let mesh = parse(new Uint8Array(reader.result));
				console.log(mesh)
				let entity = view3d.scene3d.addChild(new MeshEntity(mesh));
				entity.addMaterial(new TextureMaterial());
				entity.transform.moveTo(500, 300, 100);
				Clock.on("enterFrame", () => {
					entity.transform.prependRotation(new Quaternion().fromEulerAngles(0, 0, 0.5 * RADIAN));
				});
				if(lastDragItem){
					view3d.scene3d.removeChild(lastDragItem);
				}
				lastDragItem = entity;
				return
				entity.addMaterial(new TextureMaterial());
				entity.transform.moveTo(dragTotalCount * 500, 300, 100);
				dragTotalCount++;
			};
			reader.readAsArrayBuffer(v);
		})
	})
	const terrainMesh = await terrain();
	await glsl_compiler.init();

	Vulkan.shader_filter = glsl_compiler.compile(shader_filter);
	Vulkan.shader_2d = glsl_compiler.compile(shader_2d);
	Vulkan.shader_3d = glsl_compiler.compile(shader_3d);
	Vulkan.shader_3d_color = glsl_compiler.compile(shader_3d, undefined, 'fragment3DColorCode');
	Vulkan.shader_terrain = glsl_compiler.compile(shader_terrain);
	Vulkan.shader_cull = glsl_compiler.compute(shader_cull);
	Vulkan.shader_bound = glsl_compiler.compile(shader_bound);
	Vulkan.shader_billboard = glsl_compiler.compile(shader_billboard);
	
	const canvas = document.createElement('canvas');
	canvas.width = 1600;
	canvas.height = 900;
	document.body.appendChild(canvas);
	
	if(!navigator.gpu)return;
	const adapter = await navigator.gpu.requestAdapter();
	const device = await adapter.requestDevice();

	Vulkan.init(device, canvas);

	const wingNameList = Object.keys(wingDict);
	const wingList = await Promise.all(wingNameList.map(v => Vulkan.loadModel(`./assets/Wing/${v}.bmd`)));
	wingList.forEach((v, i) => wingDict[wingNameList[i]].mesh = v);
	console.log(wingDict)
	
	const playerMesh = await Vulkan.loadModel('./player.bmd');
	console.log(playerMesh)
	const weaponData = await Vulkan.loadModel('./Spear10.bmd');
	const monster03Data = await Vulkan.loadModel('./Monster03.bmd');
	
	const texture = await Vulkan.loadTexture(device, './1.png')
	const texture2 = await Vulkan.loadTexture(device, './2.jpg')

	const view3d = new View3D();

	const cameraWorldRot = new Quaternion().fromEulerAngles(120 * RADIAN, 0, -45 * RADIAN);
	const cameraWorldPos = new Vector3D(400, 600);

	view3d.scene3d.camera = new Camera3D(Lens.OrthoLH(canvas.width, canvas.height, -10000, 5000));
	view3d.scene3d.camera.cullEnabled = true;
	view3d.scene3d.camera.worldTransformInvert.compose(cameraWorldRot, cameraWorldPos).invert();

	let terrainTexture = await createTextureArray(mapTileList.map(v => `./assets/World1/${v}.jpg`));
	const meshTerrain = view3d.scene3d.root.addChild(new MeshEntity(terrainMesh).addMaterial(new TerrainMaterial(terrainTexture)));

	const mesh1 = view3d.scene3d.root.addChild(new MeshEntity(weaponData));
	const mesh2 = view3d.scene3d.root.addChild(new MeshEntity(weaponData));
	const mesh3 = view3d.scene3d.root.addChild(new MeshEntity(weaponData));
	const mesh4 = view3d.scene3d.root.addChild(new MeshEntity(weaponData));
	const monsterMesh = view3d.scene3d.root.addChild(new MeshEntity(monster03Data));

	//mesh1.visible = mesh2.visible = mesh3.visible = monsterMesh.visible = meshTerrain.visible = false;

	mesh1.addMaterial(new TextureMaterial());
	mesh2.addMaterial(new ColorMaterial([0, 1, 0, 1]));
	mesh3.addMaterial(new ColorMaterial([0, 0, 1, 1]));
	mesh4.addMaterial(new ColorMaterial([1, 1, 0, 1]));
	monsterMesh.addMaterial(new TextureMaterial()).addMaterial(new BoundMaterial(new AABB().setMinMax(0,0,0,100,100,200))).addMaterial(new WireframeMaterial());
	//monsterMesh.bound = new AABB().setMinMax(0,0,1000,100,100,1200);

	const rot = new Quaternion()//.fromEulerAngles(0, -90 * RADIAN, -90 * RADIAN);

	mesh1.transform.appendRotation(rot).moveTo(300, 500, 100);
	mesh2.transform.appendRotation(rot).moveTo(300, 600, 100);
	mesh3.transform.appendRotation(rot).moveTo(300, 700, 100);
	mesh4.transform.appendRotation(rot).moveTo(300, 400, 100);
	monsterMesh.transform.appendRotation(rot).moveTo(400, 400, 0);
/*
	mesh1.onTransformChanged();
	mesh2.onTransformChanged();
	mesh3.onTransformChanged();
	monsterMesh.onTransformChanged();
*/

	void async function(){
		const meshData = await Vulkan.loadModel('./assets/Skill/Magic02.bmd');
		let entity = new MeshEntity(meshData).addMaterial(new WingTextureMaterial());
		
		Clock.on('enterFrame', function(){
			entity.transform.identity().moveTo(0, performance.now() % 900,0);
		})
		//view3d.scene3d.addChild(entity);
		let playerEntity = await createPlayer(view3d.scene3d, playerMesh, 1);
		playerEntity.animation = playerEntity.animationList[146];

		playerEntity.addChild(entity);
	}();

	showSkill(view3d, playerMesh, 'Ice01', 500, transform => transform.moveTo(0,100,0))
	showSkill(view3d, playerMesh, 'Poison01', 1000, transform => transform.moveTo(0,100,0))
	showSkill(view3d, playerMesh, 'Protect01', 1500, transform => (transform, t) => transform.appendRotation(new Quaternion().fromEulerAngles(0,0,0.1)))
	showSkill(view3d, playerMesh, 'Protect02', 2000, transform => (transform, t) => transform.appendRotation(new Quaternion().fromEulerAngles(0,0,0.1)))
	showSkill(view3d, playerMesh, 'Inferno01', 3000, transform => (transform, t) => transform.appendRotation(new Quaternion().fromEulerAngles(0,0,0.1)))
	showSkill(view3d, playerMesh, 'WaveForce', 3000, transform => (transform, t) => transform.appendRotation(new Quaternion().fromEulerAngles(0,0,0.1)))
	showSkill(view3d, playerMesh, 'Storm01', 2500, transform => {
		transform.moveTo(0,100,0)
		return (transform, t) => transform.prependRotation(new Quaternion().fromEulerAngles(0,0,0.1))
	})
	showSkill(view3d, playerMesh, 'Blast01', 3500, transform => {
		transform.moveTo(0,100,0)
		return (transform, t) => transform.moveTo(0,100,900 - t % 900)
	});
	showSkill(view3d, playerMesh, 'Circle01', 4000)
	showSkill(view3d, playerMesh, 'Circle02', 4000)
	
	
	for(let [i, j] of Object.entries([1,2,3,4,5,6,201,202,203,206,301,302,303,304,305,306])){
		let playerEntity = await createPlayer(view3d.scene3d, playerMesh, j);
		playerEntity.transform.moveTo(i * 300, 500, 0);
		//playerEntity.bindObjectToBone("knife_gdf", new MeshEntity(weaponData).addMaterial(new TextureMaterial()));
		
	}
/*
	let clothCount = 0;
	for(let [name, info] of Object.entries(clothDict)){
		const layerMaxCount = 10;
		const gapW = 500, gapH = 300;
		let playerEntity = await createPlayer(view3d.scene3d, playerMesh, info.defaultModel || 1, info.useFlag || 0);
		playerEntity.transform.moveTo(clothCount % layerMaxCount * gapW, 2000 + Math.floor(clothCount / layerMaxCount) * gapH, 0);
		let wingInfo = wingDict[wingNameList[clothCount % wingList.length]];
		playerEntity.bindObjectToBone("Bone05", new MeshEntity(wingInfo.mesh).addMaterial(new (wingInfo.material || TextureMaterial)()));

		++clothCount;

		for(let prefix of clothPrefix){
			if(prefix == 'Helm' && info.noHelm)continue;
			const fullName = name.includes('$') ? name.replace('$', prefix) : (prefix + name);
			let mesh = await Vulkan.loadModel("./assets/Player/" + fullName + ".bmd");
			let meshEntity = new MeshEntity(mesh, false);
			meshEntity.addMaterial(new TextureMaterial());
			meshEntity.shareSkeletonWith(playerEntity);
			playerEntity.addChild(meshEntity);
		}
	}
//*/
	showWeaponModel(view3d.scene3d, playerMesh, 'knife_gdf', 'Staff', new Array(12).fill(0).map((v, i) => i + 1), 1, i =>  [2,3,4,5,8,9].includes(i) ? 6 : 4, 1000, function(i){
		if(i == 7 || i == 9){
			return WingTextureMaterial
		}
		if(i == 8){
			this.addMaterial(new WingTextureMaterial(), 0x2);
			this.addMaterial(new TextureMaterial(), ~0x2);
			return
		}
		if(i == 12){
			this.addMaterial(new WingTextureMaterial(), 0x1);
			this.addMaterial(new TextureMaterial(), ~0x1);
			return
		}
		return TextureMaterial
	});
	showWeaponModel(view3d.scene3d, playerMesh, 'knife_gdf', 'Spear', new Array(11).fill(0).map((v, i) => i + 1), 2, i => i == 3 ? 4 : 7, 1600, function(i){
		if(i == 1 || i == 11){
			this.addMaterial(new WingTextureMaterial(), 0x2);
			this.addMaterial(new TextureMaterial(), ~0x2);
			return
		}
		return TextureMaterial
	});
	showWeaponModel(view3d.scene3d, playerMesh, 'knife_gdf', 'Sword', new Array(32).fill(0).map((v, i) => i + 1).filter(v => ![23,24,25,26,30,31].includes(v)), 2, function(i, index, weaponMesh, materialType){
		let singleSword = [1,2,3,4,5,6,7,8,9,14,15,17,19,21];
		if(singleSword.includes(i)){
			if(i == 6 || i == 14 || i == 15){
				this.bindObjectToBone('hand_bofdgne01', new MeshEntity(weaponMesh)
					.addMaterial(new WingTextureMaterial(), 0x2)
					.addMaterial(new TextureMaterial(), ~0x2)
				);
			}else{
				this.bindObjectToBone('hand_bofdgne01', new MeshEntity(weaponMesh).addMaterial(new materialType()));
			}
			
			return 4;
		}
		return 5;
	}, 2200, function(i){
		if(i == 6 || i == 11 || i == 14 || i == 15){
			this.addMaterial(new WingTextureMaterial(), 0x2);
			this.addMaterial(new TextureMaterial(), ~0x2);
			return;
		}
		/*switch(i){
			case 11:
			case 27:
				return WingTextureMaterial
				
		}*/
		return TextureMaterial
	});
	showWeaponModel(view3d.scene3d, playerMesh, 'knife_gdf', 'Mace', new Array(18).fill(0).map((v, i) => i + 1).filter(v => v < 15 || v > 16), 2, i => i < 3 ? 4 : 5, 4000, function(i){
		if(i == 17){
			this.addMaterial(new WingTextureMaterial(), ~0x1);
			this.addMaterial(new TextureMaterial(), 0x1);
			return
		}
		if(i == 5 || i == 7){
			this.addMaterial(new WingTextureMaterial(), 0x2);
			this.addMaterial(new TextureMaterial(), ~0x2);
			return
		}
		if(i == 6){
			return WingTextureMaterial;
		}
		return TextureMaterial
	});
	showWeaponModel(view3d.scene3d, playerMesh, 'hand_bofdgne01', 'Shield', new Array(21).fill(0).map((v, i) => i + 1), 2, i => 4, 3100, i => {
		switch(i){
			case 11:
			case 27:
				return WingTextureMaterial
				
		}
		return TextureMaterial
	});
	const bow07 = await Vulkan.loadModel('./assets/Item/Bow07.bmd');
	console.log(bow07);
	
	const Arrows02 = await Vulkan.loadModel('./assets/Item/Arrows02.bmd');
	showWeaponModel(view3d.scene3d, playerMesh, 'hand_bofdgne01', 'Bow', [1,2,3,4,5,6,7,18,19,20,24], 3, function(_, i){
		let entity = new MeshEntity(Arrows02).addMaterial(new TextureMaterial());
		entity.transform.compose(new Quaternion().fromEulerAngles(-90 * RADIAN, 0, 90 * RADIAN), {x:-10, y:-10, z:0});
		this.bindObjectToBone('Bone05', entity);
		return 50/*8*/
	}, 4600, function(i){
		if(i == 7){
			Vulkan.fetchTexture('Shiny02.jpg', texture => {
				let material = new BillboardMaterial(texture, 32, 64);
				this.bindObjectToBone('light', new MeshEntity(null, false).addMaterial(material));
				this.bindObjectToBone('light01', new MeshEntity(null, false).addMaterial(material));
				this.bindObjectToBone('light02', new MeshEntity(null, false).addMaterial(material));
				this.bindObjectToBone('light03', new MeshEntity(null, false).addMaterial(material));
				this.bindObjectToBone('light05', new MeshEntity(null, false).addMaterial(material));
				this.bindObjectToBone('light06', new MeshEntity(null, false).addMaterial(material));
			});
		}
		switch(i){
			case 7:
			case 11:
			case 27:
				return WingTextureMaterial
				
		}
		return TextureMaterial
	});
	const Arrows01 = await Vulkan.loadModel('./assets/Item/Arrows01.bmd');
	showWeaponModel(view3d.scene3d, playerMesh, 'knife_gdf', 'CrossBow', [1,2,3,4,5,6,7,17,20], 3, function(_, i){
		let entity = new MeshEntity(Arrows01).addMaterial(new TextureMaterial());
		entity.transform.compose(new Quaternion().fromEulerAngles(-90 * RADIAN, 0, 90 * RADIAN), {x:10, y:-10, z:0});
		this.bindObjectToBone('Bone05', entity);
		return 51/*8*/
	}, 5200, i => {
		switch(i){
			case 11:
			case 27:
				return WingTextureMaterial
				
		}
		return TextureMaterial
	});
	showWeaponModel(view3d.scene3d, playerMesh, 'knife_gdf', 'Axe', [1,2,3,4,5,6,7,8,9], 2, i => 4, 5500, i => {
		switch(i){
			case 11:
			case 27:
				return WingTextureMaterial
				
		}
		return TextureMaterial
	});
	

	let bitmap3d = new Bitmap3D(200, 400, Lens.OrthoLH(200, 400, -5000, 5000));
	bitmap3d.root3d.addChild(new MeshEntity(weaponData).addMaterial(new ColorMaterial([1, 0, 1, 1])));
	bitmap3d.root3d.transform.appendRotation(new Quaternion().fromEulerAngles(0, 90 * RADIAN, 0));
	view3d.scene2d.root.addChild(bitmap3d);
/*
	for(let {boundList, mesh, matrix} of await readMapObj(1)){
		//console.log(mesh.name, matrix);
		//continue
		let entity = new MeshEntity(mesh).addMaterial(new TextureMaterial());
		entity.mouseEnabled = false;
		//entity.subEntityList.forEach((v, i) => v.staticBound = boundList[i]);
		//entity.transform = matrix;
		entity.transform.compose(matrix.rotation, matrix.translation);
		view3d.scene3d.root.addChild(entity);
		entity.bound = boundList.reduce((a, b) => a.union(b));
		//entity.addMaterial(new BoundMaterial(entity.bound));
	}
//*/	

		let a = texture.createView();

		let b = texture2.createView();

		var bitmap = new Bitmap();
		bitmap.texture = new Texture2D(a);
		bitmap.texture.scale9grid = [20,20,20,20];
		bitmap.width = bitmap.height = 500;

		var bmp2 = new Bitmap();
		bmp2.x = 480;
		bmp2.texture = new Texture2D(b);

		var bmp3 = new Bitmap();
		bmp3.x = 480;
		bmp3.y = 300;
		bmp3.texture = bmp2.texture;

		var box = new DisplayObject2D();
		box.addChild(bitmap);
		box.addChild(bmp2);
		box.addChild(bmp3);

		bmp2.filter = new BlurFilter();

		view3d.scene2d.root.addChild(box);
		box.scaleX = box.scaleY = 0.2;
		box.filter = new ColorMatrixFilter();

		Clock.on("enterFrame", function(){
		box.rotation += 0.5;
		bmp2.rotation -= 1;

		const moveStep = 20;

		if(Vulkan.keyboardMgr.isKeyDown(KeyCode.ARROW_LEFT)){//left
			cameraWorldPos.x -= moveStep;
		}else if(Vulkan.keyboardMgr.isKeyDown(KeyCode.ARROW_RIGHT)){//right
			cameraWorldPos.x += moveStep;
		}
		if(Vulkan.keyboardMgr.isKeyDown(KeyCode.ARROW_UP)){//up
			cameraWorldPos.y -= moveStep;
		}else if(Vulkan.keyboardMgr.isKeyDown(KeyCode.ARROW_DOWN)){//down
			cameraWorldPos.y += moveStep;
		}
		let scaleRatio = 1;
		view3d.scene3d.camera.worldTransformInvert.compose(cameraWorldRot, cameraWorldPos).invert().appendScale(scaleRatio,scaleRatio,scaleRatio);
		})
	
}
const clothPrefix = ["Helm", "Armor", "Pant", "Glove", "Boot"];
const createPlayer = function(){
	const prefixList = clothPrefix.map(v => v+ 'Class');
	return async function(scene3d, playerMesh, id=0, filter=0xFF){
		const playerEntity = new MeshEntity(playerMesh);
		scene3d.addChild(playerEntity);
		Clock.on("enterFrame", () => {
			playerEntity.transform.prependRotation(new Quaternion().fromEulerAngles(0, 0, 0.5 * RADIAN));
		});
		if(id > 0){
			const fileList = prefixList.filter((v, i) => filter & 1 << (4 - i)).map(v => v + id.toString().padStart(2, '0'));
			const meshList = await Promise.all(fileList.map(v => Vulkan.loadModel("./assets/Player/Class/" + v + ".bmd")));
			if(id == 3){
				meshList.forEach(mesh => mesh.subMeshList[0].texture = 'skin_archer_01.jpg')
			}
			for(let mesh of meshList){
				let meshEntity = new MeshEntity(mesh, false);
				meshEntity.addMaterial(new TextureMaterial());
				meshEntity.shareSkeletonWith(playerEntity);
				playerEntity.addChild(meshEntity);
			}
		}
		return playerEntity;
	}
}();

async function showWeaponModel(scene3d, playerMesh, boneName, prefix, itemIDs, charID, animationID, offsetY, materialFn){
	const layerMaxCount = 10;
	const gapW = 500, gapH = 300;
	let totalCount = 0;
	for(const i of itemIDs){
		const playerEntity = await createPlayer(scene3d, playerMesh, charID);
//*
		void function(index){
			window.addEventListener('click', function(){
				playerEntity.animation = playerEntity.animationList[++index];
				console.log('ani', index)
			})
		}//(0);//*/
		playerEntity.transform.moveTo(
			500 + totalCount % layerMaxCount * gapW,
			1000 + offsetY + Math.floor(totalCount / layerMaxCount) * gapH,
			0
		);
		
		const weaponMesh = await Vulkan.loadModel(`./assets/Item/${prefix + i.toString().padStart(2, '0')}.bmd`);
		const weaponEntity = new MeshEntity(weaponMesh);
		const materialType = materialFn.call(weaponEntity, i);
		if(materialType){
			weaponEntity.addMaterial(Reflect.construct(materialType, []))
		}
		playerEntity.bindObjectToBone(boneName, weaponEntity);
		
		playerEntity.animation = playerEntity.animationList[animationID.call(playerEntity, i, totalCount, weaponMesh, materialType)];
		//console.log(i,weaponMesh);
		++totalCount;
	}
}

async function showSkill(view3d, playerMesh, skillName, posX, skillFn){
	const meshData = await Vulkan.loadModel(`./assets/Skill/${skillName}.bmd`);
	const entity = new MeshEntity(meshData).addMaterial(new WingTextureMaterial());

	const updateFn = skillFn?.(entity.transform);
	if(updateFn instanceof Function){
		Clock.on('enterFrame', () => updateFn(entity.transform, performance.now()));
	}

	let playerEntity = await createPlayer(view3d.scene3d, playerMesh, 1);
	playerEntity.animation = playerEntity.animationList[146];

	playerEntity.addChild(entity);
	playerEntity.transform.moveTo(posX,0,0);
}


window.addEventListener('DOMContentLoaded', init);

const aniNameList = ['站立']

const clothDict = {
"Elf01":{useFlag:0x10,name:'藤',defaultModel:3},
"Elf02":{useFlag:0x10,name:'天蚕',defaultModel:3},
"Elf03":{useFlag:0x10,name:'风之',defaultModel:3},
"Elf04":{useFlag:0x10,name:'精灵之',defaultModel:3},
"Elf05":{name:'女神之',defaultModel:3},
"Elfc01":{useFlag:0x10,name:'藤',defaultModel:3},
"Elfc02":{useFlag:0x10,name:'天蚕',defaultModel:3},
"Male01":{name:'青铜',defaultModel:2},
"Male02":{name:'龙王之',defaultModel:2},
"Male03":{useFlag:0x10,name:'革',defaultModel:1},
"Male04":{name:'传说之',defaultModel:1},
"Male05":{name:'骷髅',defaultModel:1},
"Male06":{name:'皮',defaultModel:2}, 
"Male07":{name:'翡翠',defaultModel:2}, 
"Male08":{name:'魔王',defaultModel:1}, 
"Male09":{name:'黄金',defaultModel:2}, 
"Male10":{name:'白金',defaultModel:2},
"Male16":{noHelm:true,name:'亚特兰蒂斯之',useFlag:0x10,defaultModel:4}, 
"Male17":{name:'黑龙王之',defaultModel:2}, "Male18":{name:'黑凤凰之',defaultModel:2}, "Male19":{name:'火麒麟之'},
"Male20":{name:'圣灵之'}, "Male21":{name:'奔雷之',noHelm:true,useFlag:0x10,defaultModel:4}, "Male22":{name:'龙炎之',}, "Male23":{name:'黑炎之'}, "Male24":{name:'魔神之',noHelm:true,useFlag:0x10,defaultModel:4}, "Male25":{name:'红羽之'},
"Male26":{name:'圣元之'}, "Male27":{name:'圣魂之'}, "Male28":{name:'神圣之'}, "Male29":{name:'至尊之'}, 
"Male40":{name:'飓风之'}, "Male41":{name:'红翼之'}, "Male42":{name:'远古之'}, "Male43":{name:'魔灵之'}, "Male44":{name:'风影之'}, "Male45":{name:'恒翼之'}, 
"Male46":{name:'泰坦之'}, "Male47":{name:'勇气之'}, "Male48":{name:'巨石之',useFlag:0x10,defaultModel:4}, "Male49":{name:'破灭之',noHelm:true,useFlag:0x10,defaultModel:4},
"Male50":{name:'恐惧之'},"Male51":{name:'灵光之'}, 
"Male52":{name:'霸王之'}, "Male53":{name:'冥王之'}, "Male54":{name:'决胜之'},
"CW_$Male01":{name:'暴风之'},
"CW_$Male02":{name:'幻月之'},
"CW_$Male03":{name:'碧影之'},
"CW_$Male04":{name:'烈火之',noHelm:true,useFlag:0x10,defaultModel:4},
"CW_$Male05":{name:'圣光之'},
"hdk_$Male01":{name:'暗黑斗神之'},
"hdk_$Male02":{name:'法魂玄灵之'},
"hdk_$Male03":{name:'紫灵之'},
"hdk_$Male04":{name:'天魔斗神之',noHelm:true,useFlag:0x10,defaultModel:4},
"hdk_$Male05":{name:'宙斯之'},
};
const wingDict = {
	"Wing01":{material:WingTextureMaterial}, "Wing02":{}, "Wing03":{}, 
	"Wing04":{material:WingTextureMaterial}, "Wing05":{}, "Wing06":{material:WingTextureMaterial}, "Wing07":{}, 
	"Wing08":{}, "Wing09":{}, "Wing10":{}, "Wing11":{}, 
	"Wing42":{}, "Wing43":{}, "Wing44":{}
}
/*
GPUDevice.prototype.copyImageBitmapToTexture = function(source, destination, copySize){
	const {imageBitmap} = source;
	const {width, height} = imageBitmap;

	const canvas = document.createElement('canvas');
	canvas.width = width;
	canvas.height = height;

	const ctx = canvas.getContext('2d');
	ctx.drawImage(imageBitmap, 0, 0);
	const imageData = ctx.getImageData(0, 0, width, height);
	this.copyImageDataToTexture(imageData, destination, copySize);
}

GPUDevice.prototype.copyImageDataToTexture = function(imageData, destination, copySize){
	const pitchSize = 64;
	const bytePerPixel = 4;

	const {width, height} = imageData;

	const rowPitch = Math.ceil(width / pitchSize) * pitchSize * bytePerPixel;//mulitimes of 256

	let bufferData;

	if(width % pitchSize == 0){
		bufferData = imageData.data;
	}else{
		bufferData = new Uint8Array(rowPitch * height);
		const data = imageData.data;
		for(let y=0; y<height; ++y){
			for(let x=0; x<width; ++x){
				let i = y * rowPitch + x * bytePerPixel;
				let j = (y * width + x) * bytePerPixel;
				bufferData[i  ] = data[j];
				bufferData[i+1] = data[j+1];
				bufferData[i+2] = data[j+2];
				bufferData[i+3] = data[j+3];
			}
		}
	}

	const buffer = this.createBuffer({
		size: bufferData.length,
		usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST
	});
	buffer.setSubData(0, bufferData);

	const commandEncoder = this.createCommandEncoder();
	commandEncoder.copyBufferToTexture({
		buffer,
		rowPitch,
		imageHeight: height,
		offset: 0
	}, destination, copySize);
	this.defaultQueue.submit([commandEncoder.finish()]);

	buffer.destroy();
}
//*/
/*

https://gpuweb.github.io/gpuweb/
https://gpuweb.github.io/WSL/
https://github.com/gpuweb/gpuweb
https://www.khronos.org/opengl/wiki/Compute_Shader

const renderBundleEncoder = device.createRenderBundleEncoder({
	colorFormats:[swapChainFormat],
	depthStencilFormat: 'depth24plus-stencil8'
});
renderPassEncoder.executeBundles([renderBundleEncoder.finish()]);

const computePassEncoder = commandEncoder.beginComputePass();
const computePipeline = device.createComputePipeline({
	layout: pipelineLayout,
	computeStage: {
		module: device.createShaderModule({
			code: '',
		}),
		entryPoint: 'main'
	}
});

interface GPUComputePassEncoder {
	void setBindGroup(unsigned long index, GPUBindGroup bindGroup,
                      optional sequence<unsigned long> dynamicOffsets = []);

    void setBindGroup(unsigned long index, GPUBindGroup bindGroup,
                      Uint32Array dynamicOffsetsData,
                      unsigned long long dynamicOffsetsDataStart,
                      unsigned long long dynamicOffsetsDataLength);

    void setPipeline(GPUComputePipeline pipeline);
    void dispatch(unsigned long x, optional unsigned long y = 1, optional unsigned long z = 1);
    void dispatchIndirect(GPUBuffer indirectBuffer, GPUBufferSize indirectOffset);

    void endPass();
};

interface GPUCommandEncoder {
	void copyBufferToBuffer(
		GPUBuffer source,
		GPUBufferSize sourceOffset,
		GPUBuffer destination,
		GPUBufferSize destinationOffset,
		GPUBufferSize size);

	void copyBufferToTexture(
		GPUBufferCopyView source,
		GPUTextureCopyView destination,
		GPUExtent3D copySize);

	void copyTextureToBuffer(
		GPUTextureCopyView source,
		GPUBufferCopyView destination,
		GPUExtent3D copySize);

	void copyTextureToTexture(
		GPUTextureCopyView source,
		GPUTextureCopyView destination,
		GPUExtent3D copySize);
};

interface RenderBase {
	void setBindGroup(unsigned long index, GPUBindGroup bindGroup,
					  optional sequence<unsigned long> dynamicOffsets = []);

	void setBindGroup(unsigned long index, GPUBindGroup bindGroup,
					  Uint32Array dynamicOffsetsData,
					  unsigned long long dynamicOffsetsDataStart,
					  unsigned long long dynamicOffsetsDataLength);

	void setPipeline(GPURenderPipeline pipeline);

	void setIndexBuffer(GPUBuffer buffer, optional GPUBufferSize offset = 0);
	void setVertexBuffer(unsigned long slot, GPUBuffer buffer, optional GPUBufferSize offset = 0);

	void draw(unsigned long vertexCount, unsigned long instanceCount,
			  unsigned long firstVertex, unsigned long firstInstance);
	void drawIndexed(unsigned long indexCount, unsigned long instanceCount,
					 unsigned long firstIndex, long baseVertex, unsigned long firstInstance);

	void drawIndirect(GPUBuffer indirectBuffer, GPUBufferSize indirectOffset);
	void drawIndexedIndirect(GPUBuffer indirectBuffer, GPUBufferSize indirectOffset);
};

interface GPURenderPassEncoder extends RenderBase {
	void setViewport(float x, float y,
					 float width, float height,
					 float minDepth, float maxDepth);

	void setScissorRect(unsigned long x, unsigned long y, unsigned long width, unsigned long height);

	void setBlendColor(GPUColor color);
	void setStencilReference(unsigned long reference);

	void executeBundles(sequence<GPURenderBundle> bundles);
	void endPass();
};

interface GPURenderBundleEncoder extends RenderBase {
	GPURenderBundle finish();
};

enum GPUVertexFormat {
	"uchar2",
	"uchar4",
	"char2",
	"char4",
	"uchar2norm",
	"uchar4norm",
	"char2norm",
	"char4norm",
	"ushort2",
	"ushort4",
	"short2",
	"short4",
	"ushort2norm",
	"ushort4norm",
	"short2norm",
	"short4norm",
	"half2",
	"half4",
	"float",
	"float2",
	"float3",
	"float4",
	"uint",
	"uint2",
	"uint3",
	"uint4",
	"int",
	"int2",
	"int3",
	"int4"
};

enum GPUIndexFormat {
	"uint16",
	"uint32"
};

enum GPUInputStepMode {
	"vertex",
	"instance"
};

enum GPUPrimitiveTopology {
	"point-list",
	"line-list",
	"line-strip",
	"triangle-list",
	"triangle-strip"
};

dictionary GPUBindGroupDescriptor : GPUObjectDescriptorBase {
	required GPUBindGroupLayout layout;
	required sequence<GPUBindGroupBinding> bindings;
};
typedef (GPUSampler or GPUTextureView or GPUBufferBinding) GPUBindingResource;

dictionary GPUBindGroupBinding {
	required unsigned long binding;
	required GPUBindingResource resource;
};
dictionary GPUBufferBinding {
	required GPUBuffer buffer;
	GPUBufferSize offset = 0;
	GPUBufferSize size;
};

enum GPUBindingType {
	"uniform-buffer",
	"storage-buffer",
	"readonly-storage-buffer",
	"sampler",
	"comparison-sampler",
	"sampled-texture",
	"readonly-storage-texture",
	"writeonly-storage-texture",
	// TODO: other binding types
};

interface GPUShaderStage {
	const GPUShaderStageFlags VERTEX   = 0x1;
	const GPUShaderStageFlags FRAGMENT = 0x2;
	const GPUShaderStageFlags COMPUTE  = 0x4;
};

interface GPUBufferUsage {
	const GPUBufferUsageFlags MAP_READ  = 0x0001;
	const GPUBufferUsageFlags MAP_WRITE = 0x0002;
	const GPUBufferUsageFlags COPY_SRC  = 0x0004;
	const GPUBufferUsageFlags COPY_DST  = 0x0008;
	const GPUBufferUsageFlags INDEX     = 0x0010;
	const GPUBufferUsageFlags VERTEX    = 0x0020;
	const GPUBufferUsageFlags UNIFORM   = 0x0040;
	const GPUBufferUsageFlags STORAGE   = 0x0080;
	const GPUBufferUsageFlags INDIRECT  = 0x0100;
	const GPUBufferUsageFlags QUERY_RESOLVE = 0x0200;
};

interface GPUTextureUsage {
	const GPUTextureUsageFlags COPY_SRC          = 0x01;
	const GPUTextureUsageFlags COPY_DST          = 0x02;
	const GPUTextureUsageFlags SAMPLED           = 0x04;
	const GPUTextureUsageFlags STORAGE           = 0x08;
	const GPUTextureUsageFlags OUTPUT_ATTACHMENT = 0x10;
};

enum GPUTextureFormat {
	// 8-bit formats
	"r8unorm",
	"r8snorm",
	"r8uint",
	"r8sint",

	// 16-bit formats
	"r16uint",
	"r16sint",
	"r16float",
	"rg8unorm",
	"rg8snorm",
	"rg8uint",
	"rg8sint",

	// 32-bit formats
	"r32uint",
	"r32sint",
	"r32float",
	"rg16uint",
	"rg16sint",
	"rg16float",
	"rgba8unorm",
	"rgba8unorm-srgb",
	"rgba8snorm",
	"rgba8uint",
	"rgba8sint",
	"bgra8unorm",
	"bgra8unorm-srgb",
	// Packed 32-bit formats
	"rgb10a2unorm",
	"rg11b10float",

	// 64-bit formats
	"rg32uint",
	"rg32sint",
	"rg32float",
	"rgba16uint",
	"rgba16sint",
	"rgba16float",

	// 128-bit formats
	"rgba32uint",
	"rgba32sint",
	"rgba32float",

	// Depth and stencil formats
	"depth32float",
	"depth24plus",
	"depth24plus-stencil8"
};

dictionary GPUSamplerDescriptor : GPUObjectDescriptorBase {
	GPUAddressMode addressModeU = "clamp-to-edge";
	GPUAddressMode addressModeV = "clamp-to-edge";
	GPUAddressMode addressModeW = "clamp-to-edge";
	GPUFilterMode magFilter = "nearest";
	GPUFilterMode minFilter = "nearest";
	GPUFilterMode mipmapFilter = "nearest";
	float lodMinClamp = 0;
	float lodMaxClamp = 0xffffffff; // TODO: What should this be? Was Number.MAX_VALUE.
	GPUCompareFunction compare = "never";
};
enum GPUAddressMode {
	"clamp-to-edge",
	"repeat",
	"mirror-repeat"
};
enum GPUFilterMode {
	"nearest",
	"linear"
};
enum GPUCompareFunction {
	"never",
	"less",
	"equal",
	"less-equal",
	"greater",
	"not-equal",
	"greater-equal",
	"always"
};

*/