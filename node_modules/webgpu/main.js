'use strict';

const WebGL = require('opengl/WebGL');
const Clock = require('opengl/Clock');
const {Texture2D} = require('opengl/textures');
const {Quaternion, Vector3D, RADIAN} = require('opengl/math');
const DisplayObject2D = require('opengl/DisplayObject2D');
const terrain = require('./terrain');
const mapTileList = require('mu/mapTileList');

const glsl_compiler = require('./glsl_compiler');

const shader_2d = require('./shaders/2d');
const shader_3d = require('./shaders/3d');
const shader_filter = require('./shaders/filter');
const shader_terrain = require('./shaders/terrain');
const {
	View3D, Vulkan, Bitmap, BlurFilter, ColorMatrixFilter, MeshEntity, Camera3D,
	TextureMaterial,
	ColorMaterial,
	TerrainMaterial,
} = require('./lib');

const createTextureArray = function(){
	let canvas = document.createElement('canvas');
	let context = canvas.getContext('2d');
	return async function(pathList, width, height){
		const imageList = await Promise.all(pathList.map(v => WebGL.loadImage(v)));
		width = width || Math.max(...imageList.map(v => v.width));
		height = height || Math.max(...imageList.map(v => v.height));
		const resizeOption = {
			resizeWidth: width,
			resizeHeight: height,
			resizeQuality: 'high',
		};
		const imageBitmapList = await Promise.all(imageList.map(v => createImageBitmap(v, resizeOption)));
		const depth = pathList.length;
		const {device} = Vulkan;
		const texture = device.createTexture({
			size: [width, height, depth],
			format: 'rgba8unorm',
			usage: GPUTextureUsage.SAMPLED | GPUTextureUsage.COPY_DST,
		});
		imageBitmapList.forEach((imageBitmap, i) => device.defaultQueue.copyImageBitmapToTexture(
			{imageBitmap},
			{texture, arrayLayer: 0, origin: [0, 0, 0]},
			[width, height, 1]
		));
		return texture.createView({
			dimension: '2d'
		});
	}
}()

async function init(){
	const terrainMesh = await terrain();
	await glsl_compiler.init();

	Vulkan.shader_filter = glsl_compiler.compile(shader_filter);
	Vulkan.shader_2d = glsl_compiler.compile(shader_2d);
	Vulkan.shader_3d = glsl_compiler.compile(shader_3d);
	Vulkan.shader_3d_color = glsl_compiler.compile(shader_3d, undefined, 'fragment3DColorCode');
	Vulkan.shader_terrain = glsl_compiler.compile(shader_terrain);
	
	const canvas = document.createElement('canvas');
	canvas.width = 550;
	canvas.height = 400;
	document.body.appendChild(canvas);
	
	if(!navigator.gpu)return;
	const adapter = await navigator.gpu.requestAdapter();
	const device = await adapter.requestDevice();

	Vulkan.init(device, canvas);

	const playerMesh = await Vulkan.loadModel('./player.bmd');
	const weaponData = await Vulkan.loadModel('./Spear10.bmd');
	const monster03Data = await Vulkan.loadModel('./Monster03.bmd');

	const fileList = ["ArmorCls", "BootCls", "GloveCls","HelmCls","PantCls"].map(v => Vulkan.loadModel("./" + v + ".bmd"));
	const meshList = [];

	for await(let file of fileList){
		meshList.push(file);
	}
	
	const texture = await Vulkan.loadTexture(device, './1.png')
	const texture2 = await Vulkan.loadTexture(device, './2.jpg')

	const view3d = new View3D();

	view3d.scene3d.camera = new Camera3D();
	view3d.scene3d.camera.worldTransformInvert.compose(new Quaternion().fromEulerAngles(120 * RADIAN, 0, -45 * RADIAN), new Vector3D(400, 600)).invert();

	let terrainTexture = await createTextureArray(mapTileList.map(v => `./World1/${v}.jpg`));
	const meshTerrain = view3d.scene3d.root.addChild(new MeshEntity(terrainMesh).addMaterial(new TerrainMaterial(terrainTexture)));

	const mesh1 = view3d.scene3d.root.addChild(new MeshEntity(weaponData));
	const mesh2 = view3d.scene3d.root.addChild(new MeshEntity(weaponData));
	const mesh3 = view3d.scene3d.root.addChild(new MeshEntity(weaponData));
	const monsterMesh = view3d.scene3d.root.addChild(new MeshEntity(monster03Data));

	mesh1.addMaterial(new TextureMaterial());
	mesh2.addMaterial(new ColorMaterial([0, 1, 0, 1]));
	mesh3.addMaterial(new ColorMaterial([0, 0, 1, 1]));
	monsterMesh.addMaterial(new TextureMaterial());

	const rot = new Quaternion()//.fromEulerAngles(0, -90 * RADIAN, -90 * RADIAN);

	mesh1.transform.appendRotation(rot).moveTo(300, 500, 100);
	mesh2.transform.appendRotation(rot).moveTo(300, 600, 100);
	mesh3.transform.appendRotation(rot).moveTo(300, 700, 100);
	monsterMesh.transform.appendRotation(rot).moveTo(400, 400, 0);

	mesh1.onTransformChanged();
	mesh2.onTransformChanged();
	mesh3.onTransformChanged();
	monsterMesh.onTransformChanged();

	let playerEntity = new MeshEntity(playerMesh);
	view3d.scene3d.root.addChild(playerEntity);
	for(let mesh of meshList){
		let meshEntity = new MeshEntity(mesh, false);
		meshEntity.addMaterial(new TextureMaterial());
		meshEntity.shareSkeletonWith(playerEntity);
		//view3d.scene3d.root.addChild(meshEntity);
		playerEntity.addChild(meshEntity);
		//meshEntity.transform.appendRotation(rot);
		//meshEntity.onTransformChanged();
	}
	playerEntity.transform.moveTo(500, 500, 0);
	playerEntity.onTransformChanged();
	playerEntity.bindObjectToBone("knife_gdf", new MeshEntity(weaponData).addMaterial(new TextureMaterial()));
	
		let a = texture.createView();

		let b = texture2.createView();

		var bitmap = new Bitmap();
		bitmap.texture = new Texture2D(a);
		bitmap.texture.scale9grid = [20,20,20,20];
		bitmap.width = bitmap.height = 500;

		var bmp2 = new Bitmap();
		bmp2.x = 480;
		bmp2.texture = new Texture2D(b);

		var bmp3 = new Bitmap();
		bmp3.x = 480;
		bmp3.y = 300;
		bmp3.texture = bmp2.texture;

		var box = new DisplayObject2D();
		box.addChild(bitmap);
		box.addChild(bmp2);
		box.addChild(bmp3);

		bmp2.filter = new BlurFilter();

		view3d.scene2d.root.addChild(box);
		box.scale = 0.2;
		box.filter = new ColorMatrixFilter();

		Clock.on("enterFrame", function(){
		box.rotation += 0.5;
		bmp2.rotation -= 1;
		})
	
}

window.addEventListener('DOMContentLoaded', init);
/*
GPUDevice.prototype.copyImageBitmapToTexture = function(source, destination, copySize){
	const {imageBitmap} = source;
	const {width, height} = imageBitmap;

	const canvas = document.createElement('canvas');
	canvas.width = width;
	canvas.height = height;

	const ctx = canvas.getContext('2d');
	ctx.drawImage(imageBitmap, 0, 0);
	const imageData = ctx.getImageData(0, 0, width, height);
	this.copyImageDataToTexture(imageData, destination, copySize);
}

GPUDevice.prototype.copyImageDataToTexture = function(imageData, destination, copySize){
	const pitchSize = 64;
	const bytePerPixel = 4;

	const {width, height} = imageData;

	const rowPitch = Math.ceil(width / pitchSize) * pitchSize * bytePerPixel;//mulitimes of 256

	let bufferData;

	if(width % pitchSize == 0){
		bufferData = imageData.data;
	}else{
		bufferData = new Uint8Array(rowPitch * height);
		const data = imageData.data;
		for(let y=0; y<height; ++y){
			for(let x=0; x<width; ++x){
				let i = y * rowPitch + x * bytePerPixel;
				let j = (y * width + x) * bytePerPixel;
				bufferData[i  ] = data[j];
				bufferData[i+1] = data[j+1];
				bufferData[i+2] = data[j+2];
				bufferData[i+3] = data[j+3];
			}
		}
	}

	const buffer = this.createBuffer({
		size: bufferData.length,
		usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST
	});
	buffer.setSubData(0, bufferData);

	const commandEncoder = this.createCommandEncoder();
	commandEncoder.copyBufferToTexture({
		buffer,
		rowPitch,
		imageHeight: height,
		offset: 0
	}, destination, copySize);
	this.defaultQueue.submit([commandEncoder.finish()]);

	buffer.destroy();
}
//*/
/*

https://gpuweb.github.io/gpuweb/
https://gpuweb.github.io/WSL/
https://github.com/gpuweb/gpuweb
https://www.khronos.org/opengl/wiki/Compute_Shader

const renderBundleEncoder = device.createRenderBundleEncoder({
	colorFormats:[swapChainFormat],
	depthStencilFormat: 'depth24plus-stencil8'
});
renderPassEncoder.executeBundles([renderBundleEncoder.finish()]);

const computePassEncoder = commandEncoder.beginComputePass();
const computePipeline = device.createComputePipeline({
	layout: pipelineLayout,
	computeStage: {
		module: device.createShaderModule({
			code: '',
		}),
		entryPoint: 'main'
	}
});

interface GPUComputePassEncoder {
	void setBindGroup(unsigned long index, GPUBindGroup bindGroup,
                      optional sequence<unsigned long> dynamicOffsets = []);

    void setBindGroup(unsigned long index, GPUBindGroup bindGroup,
                      Uint32Array dynamicOffsetsData,
                      unsigned long long dynamicOffsetsDataStart,
                      unsigned long long dynamicOffsetsDataLength);

    void setPipeline(GPUComputePipeline pipeline);
    void dispatch(unsigned long x, optional unsigned long y = 1, optional unsigned long z = 1);
    void dispatchIndirect(GPUBuffer indirectBuffer, GPUBufferSize indirectOffset);

    void endPass();
};

interface GPUCommandEncoder {
	void copyBufferToBuffer(
		GPUBuffer source,
		GPUBufferSize sourceOffset,
		GPUBuffer destination,
		GPUBufferSize destinationOffset,
		GPUBufferSize size);

	void copyBufferToTexture(
		GPUBufferCopyView source,
		GPUTextureCopyView destination,
		GPUExtent3D copySize);

	void copyTextureToBuffer(
		GPUTextureCopyView source,
		GPUBufferCopyView destination,
		GPUExtent3D copySize);

	void copyTextureToTexture(
		GPUTextureCopyView source,
		GPUTextureCopyView destination,
		GPUExtent3D copySize);
};

interface RenderBase {
	void setBindGroup(unsigned long index, GPUBindGroup bindGroup,
					  optional sequence<unsigned long> dynamicOffsets = []);

	void setBindGroup(unsigned long index, GPUBindGroup bindGroup,
					  Uint32Array dynamicOffsetsData,
					  unsigned long long dynamicOffsetsDataStart,
					  unsigned long long dynamicOffsetsDataLength);

	void setPipeline(GPURenderPipeline pipeline);

	void setIndexBuffer(GPUBuffer buffer, optional GPUBufferSize offset = 0);
	void setVertexBuffer(unsigned long slot, GPUBuffer buffer, optional GPUBufferSize offset = 0);

	void draw(unsigned long vertexCount, unsigned long instanceCount,
			  unsigned long firstVertex, unsigned long firstInstance);
	void drawIndexed(unsigned long indexCount, unsigned long instanceCount,
					 unsigned long firstIndex, long baseVertex, unsigned long firstInstance);

	void drawIndirect(GPUBuffer indirectBuffer, GPUBufferSize indirectOffset);
	void drawIndexedIndirect(GPUBuffer indirectBuffer, GPUBufferSize indirectOffset);
};

interface GPURenderPassEncoder extends RenderBase {
	void setViewport(float x, float y,
					 float width, float height,
					 float minDepth, float maxDepth);

	void setScissorRect(unsigned long x, unsigned long y, unsigned long width, unsigned long height);

	void setBlendColor(GPUColor color);
	void setStencilReference(unsigned long reference);

	void executeBundles(sequence<GPURenderBundle> bundles);
	void endPass();
};

interface GPURenderBundleEncoder extends RenderBase {
	GPURenderBundle finish();
};

enum GPUVertexFormat {
	"uchar2",
	"uchar4",
	"char2",
	"char4",
	"uchar2norm",
	"uchar4norm",
	"char2norm",
	"char4norm",
	"ushort2",
	"ushort4",
	"short2",
	"short4",
	"ushort2norm",
	"ushort4norm",
	"short2norm",
	"short4norm",
	"half2",
	"half4",
	"float",
	"float2",
	"float3",
	"float4",
	"uint",
	"uint2",
	"uint3",
	"uint4",
	"int",
	"int2",
	"int3",
	"int4"
};

enum GPUIndexFormat {
	"uint16",
	"uint32"
};

enum GPUInputStepMode {
	"vertex",
	"instance"
};

enum GPUPrimitiveTopology {
	"point-list",
	"line-list",
	"line-strip",
	"triangle-list",
	"triangle-strip"
};

dictionary GPUBindGroupDescriptor : GPUObjectDescriptorBase {
	required GPUBindGroupLayout layout;
	required sequence<GPUBindGroupBinding> bindings;
};
typedef (GPUSampler or GPUTextureView or GPUBufferBinding) GPUBindingResource;

dictionary GPUBindGroupBinding {
	required unsigned long binding;
	required GPUBindingResource resource;
};
dictionary GPUBufferBinding {
	required GPUBuffer buffer;
	GPUBufferSize offset = 0;
	GPUBufferSize size;
};

enum GPUBindingType {
	"uniform-buffer",
	"storage-buffer",
	"readonly-storage-buffer",
	"sampler",
	"sampled-texture",
	"storage-texture"
	// TODO: other binding types
};

interface GPUShaderStage {
	const GPUShaderStageFlags VERTEX   = 0x1;
	const GPUShaderStageFlags FRAGMENT = 0x2;
	const GPUShaderStageFlags COMPUTE  = 0x4;
};

interface GPUBufferUsage {
	const GPUBufferUsageFlags MAP_READ  = 0x0001;
	const GPUBufferUsageFlags MAP_WRITE = 0x0002;
	const GPUBufferUsageFlags COPY_SRC  = 0x0004;
	const GPUBufferUsageFlags COPY_DST  = 0x0008;
	const GPUBufferUsageFlags INDEX     = 0x0010;
	const GPUBufferUsageFlags VERTEX    = 0x0020;
	const GPUBufferUsageFlags UNIFORM   = 0x0040;
	const GPUBufferUsageFlags STORAGE   = 0x0080;
	const GPUBufferUsageFlags INDIRECT  = 0x0100;
};

interface GPUTextureUsage {
	const GPUTextureUsageFlags COPY_SRC          = 0x01;
	const GPUTextureUsageFlags COPY_DST          = 0x02;
	const GPUTextureUsageFlags SAMPLED           = 0x04;
	const GPUTextureUsageFlags STORAGE           = 0x08;
	const GPUTextureUsageFlags OUTPUT_ATTACHMENT = 0x10;
};

enum GPUTextureFormat {
	// 8-bit formats
	"r8unorm",
	"r8snorm",
	"r8uint",
	"r8sint",

	// 16-bit formats
	"r16uint",
	"r16sint",
	"r16float",
	"rg8unorm",
	"rg8snorm",
	"rg8uint",
	"rg8sint",

	// 32-bit formats
	"r32uint",
	"r32sint",
	"r32float",
	"rg16uint",
	"rg16sint",
	"rg16float",
	"rgba8unorm",
	"rgba8unorm-srgb",
	"rgba8snorm",
	"rgba8uint",
	"rgba8sint",
	"bgra8unorm",
	"bgra8unorm-srgb",
	// Packed 32-bit formats
	"rgb10a2unorm",
	"rg11b10float",

	// 64-bit formats
	"rg32uint",
	"rg32sint",
	"rg32float",
	"rgba16uint",
	"rgba16sint",
	"rgba16float",

	// 128-bit formats
	"rgba32uint",
	"rgba32sint",
	"rgba32float",

	// Depth and stencil formats
	"depth32float",
	"depth24plus",
	"depth24plus-stencil8"
};

dictionary GPUSamplerDescriptor : GPUObjectDescriptorBase {
	GPUAddressMode addressModeU = "clamp-to-edge";
	GPUAddressMode addressModeV = "clamp-to-edge";
	GPUAddressMode addressModeW = "clamp-to-edge";
	GPUFilterMode magFilter = "nearest";
	GPUFilterMode minFilter = "nearest";
	GPUFilterMode mipmapFilter = "nearest";
	float lodMinClamp = 0;
	float lodMaxClamp = 0xffffffff; // TODO: What should this be? Was Number.MAX_VALUE.
	GPUCompareFunction compare = "never";
};
enum GPUAddressMode {
	"clamp-to-edge",
	"repeat",
	"mirror-repeat"
};
enum GPUFilterMode {
	"nearest",
	"linear"
};
enum GPUCompareFunction {
	"never",
	"less",
	"equal",
	"less-equal",
	"greater",
	"not-equal",
	"greater-equal",
	"always"
};

*/