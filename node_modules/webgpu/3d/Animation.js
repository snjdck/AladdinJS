"use strict";

class Animation
{
	constructor(name, duration, trackDict){
		this.name = name;
		this.duration = duration;
		this.trackDict = trackDict;
		this.keyFrameTimes = [];
		this.keyFrameCount = 0;
		this.offsetData = [];
	}
/*
	copyFirstFrameToEnd(timeToAdd=1){
		this.duration += timeToAdd;
		this.keyFrameCount += 1;
		this.keyFrameTimes.push(this.keyFrameTimes.at(-1) + timeToAdd);
		this.offsetData.push(this.offsetData[0]);
		for(let keyFrameList of Object.values(this.trackDict)){
			keyFrameList.push(keyFrameList[0]);
		}
	}

	removeLastFrame(timeToDel=1){
		this.duration -= timeToDel;
		this.keyFrameCount -= 1;
		this.keyFrameTimes.pop();
		this.offsetData.pop();
		for(let keyFrameList of Object.values(this.trackDict)){
			keyFrameList.pop();
		}
	}
*/
	calcTransform(boneID, time, result){
		const {keyFrameTimes} = this;
		const keyFrameList = this.trackDict[boneID];
		if(keyFrameList.length === 1){
			result.copyFrom(keyFrameList[0]);
			return;
		}
		for(let i=keyFrameList.length-1; i>=0; --i){
			const keyFrame = keyFrameList[i];
			if(time < keyFrameTimes[i])continue;
			const nextKeyFrame = keyFrameList[i+1];
			if(nextKeyFrame){
				const factor = (time - keyFrameTimes[i]) / (keyFrameTimes[i+1] - keyFrameTimes[i]);
				keyFrame.interpolate(nextKeyFrame, factor, result);
			}else{
				result.copyFrom(keyFrame);
			}
			break;
		}
	}
}

module.exports = Animation;