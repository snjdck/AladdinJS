"use strict";

class Animation
{
	constructor(name, duration, trackDict){
		this.name = name;
		this.duration = duration;
		this.trackDict = trackDict;
		this.keyFrameTimes = [];
		this.keyFrameCount = 0;
		this.offsetData = [];
	}

	calcTransform(boneID, time, result){
		const {keyFrameTimes} = this;
		const keyFrameList = this.trackDict[boneID];
		if(time <= 0 || keyFrameList.length == 1)return result.copyFrom(keyFrameList[0]);
		if(time >= this.duration)return result.copyFrom(keyFrameList.at(-1));
		for(let i=keyFrameList.length-1; i>=0; --i){
			const keyTime = keyFrameTimes[i];
			if(time < keyTime)continue;
			const factor = (time - keyTime) / (keyFrameTimes[i+1] - keyTime);
			return keyFrameList[i].interpolate(keyFrameList[i+1], factor, result);
		}
	}

	copyFirstFrameToEnd(timeToAdd=1){
		this.duration += timeToAdd;
		this.keyFrameCount += 1;
		this.keyFrameTimes.push(this.keyFrameTimes.at(-1) + timeToAdd);
		this.offsetData.push(this.offsetData[0]);
		for(let keyFrameList of Object.values(this.trackDict)){
			keyFrameList.push(keyFrameList[0]);
		}
	}

	removeLastFrame(timeToDel=1){
		this.duration -= timeToDel;
		this.keyFrameCount -= 1;
		this.keyFrameTimes.pop();
		this.offsetData.pop();
		for(let keyFrameList of Object.values(this.trackDict)){
			keyFrameList.pop();
		}
	}
}

module.exports = Animation;