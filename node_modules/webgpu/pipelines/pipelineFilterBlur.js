'use strict';

const Vulkan = require('../Vulkan');

module.exports = function(){
	const {device} = Vulkan;
	return device.createRenderPipeline({
		layout: device.createPipelineLayout({
			bindGroupLayouts: [
				Vulkan.bindGroupLayoutDict.bindGroupLayoutFilter2D,
				Vulkan.bindGroupLayoutDict.bindGroupLayoutFilterBlur
			]
		}),
		vertexStage: {
			module: device.createShaderModule({
				code: Vulkan.shader_filter.vertexCode,
			}),
			entryPoint: 'main'
		},
		fragmentStage: {
			module: device.createShaderModule({
				code: Vulkan.shader_filter.fragmentCode,
			}),
			entryPoint: 'main'
		},
		primitiveTopology: 'triangle-strip',
		vertexState: {
			indexFormat: 'uint16'
		},
		colorStates:[{
			format: Vulkan.swapChainFormat,
			colorBlend: {
				srcFactor: 'src-alpha',
				dstFactor: 'one-minus-src-alpha',
				operation: 'add'
			},
			alphaBlend: {
				srcFactor: 'src-alpha',
				dstFactor: 'one-minus-src-alpha',
				operation: 'add'
			}
		}]
	});
}