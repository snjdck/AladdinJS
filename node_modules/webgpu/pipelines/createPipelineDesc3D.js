'use strict';

const Vulkan = require('../Vulkan');

module.exports = function(bindGroupLayouts, vertexCode, fragmentCode, primitiveTopology='triangle-list'){
	const {device} = Vulkan;
	return {
		layout: device.createPipelineLayout({
			bindGroupLayouts
		}),
		vertexStage: {
			module: device.createShaderModule({
				code: vertexCode,
			}),
			entryPoint: 'main'
		},
		fragmentStage: {
			module: device.createShaderModule({
				code: fragmentCode,
			}),
			entryPoint: 'main'
		},
		primitiveTopology,
		rasterizationState: {
			frontFace: 'ccw',
			cullMode: 'back',
		},
		colorStates:[{
			format: Vulkan.swapChainFormat,
			colorBlend: {
				srcFactor: 'src-alpha',
				dstFactor: 'one-minus-src-alpha',
				operation: 'add'
			},
			alphaBlend: {
				srcFactor: 'src-alpha',
				dstFactor: 'one-minus-src-alpha',
				operation: 'add'
			}
		}],
		depthStencilState: {
			format: 'depth24plus-stencil8',
			depthWriteEnabled: true,
			depthCompare: 'less-equal',
		},
		vertexState: {
			//indexFormat: 'uint16',
			vertexBuffers:[{
				arrayStride: 9 << 2,
				stepMode: 'vertex',
				attributes:[{
					shaderLocation: 0,
					offset: 0,
					format: 'float3'
				},{
					shaderLocation: 1,
					offset: 3 << 2,
					format: 'float3'
				},{
					shaderLocation: 2,
					offset: 6 << 2,
					format: 'float2'
				},{
					shaderLocation: 3,
					offset: 8 << 2,
					format: 'uint'
				}]
			}]
		}
	};
}