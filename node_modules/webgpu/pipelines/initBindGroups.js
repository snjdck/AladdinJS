'use strict';

const Vulkan = require('../Vulkan');

function build(bindGroupLayoutDescDict){
	return Object.fromEntries(
		Object.entries(bindGroupLayoutDescDict).map(
			([k, v]) => [k, Vulkan.device.createBindGroupLayout(v)]
		)
	);
}

module.exports = function(){
	const bindGroupLayoutDescDict = {};

	bindGroupLayoutDescDict.bindGroupLayout = {
		entries:[{
			binding: 0,
			visibility: GPUShaderStage.VERTEX,
			type: 'uniform-buffer',
		},{binding: 1,
			visibility: GPUShaderStage.FRAGMENT,
			type: 'sampler'
		}]
	};

	bindGroupLayoutDescDict.bindGroupLayout2 = {
		entries:[{
			binding: 0,
			visibility: GPUShaderStage.VERTEX | GPUShaderStage.COMPUTE,
			type: 'uniform-buffer',
		}]
	};

	bindGroupLayoutDescDict.bindGroupLayout2Dynamic = {
		entries:[{
			binding: 0,
			visibility: GPUShaderStage.VERTEX,
			type: 'uniform-buffer',
			hasDynamicOffset: true
		}]
	};

	bindGroupLayoutDescDict.bindGroupLayout3 = {
		entries:[{
			binding: 0,
			visibility: GPUShaderStage.FRAGMENT,
			type: 'sampled-texture'
		}]
	};

	bindGroupLayoutDescDict.bindGroupLayout4 = {
		entries:[{
			binding: 0,
			visibility: GPUShaderStage.FRAGMENT,
			type: 'uniform-buffer',
			hasDynamicOffset: true
		}]
	};

	bindGroupLayoutDescDict.bindGroupLayout5 = {
		entries:[{
			binding: 0,
			visibility: GPUShaderStage.FRAGMENT,
			type: 'sampled-texture',
			viewDimension: '2d-array',
		}]
	};

	bindGroupLayoutDescDict.bindGroupLayoutCull = {
		entries:[{
			binding: 0,
			visibility: GPUShaderStage.COMPUTE,
			type: 'storage-buffer',
		}]
	};

	bindGroupLayoutDescDict.bindGroupLayoutFilter2D = {
		entries:[{
			binding: 0,
			visibility: GPUShaderStage.FRAGMENT,
			type: 'sampler'
		},{
			binding: 1,
			visibility: GPUShaderStage.FRAGMENT,
			type: 'sampled-texture'
		}]
	};

	bindGroupLayoutDescDict.bindGroupLayoutFilterBlur = {
		entries:[{
			binding: 0,
			visibility: GPUShaderStage.VERTEX,
			type: 'uniform-buffer',
		},{
			binding: 1,
			visibility: GPUShaderStage.FRAGMENT,
			type: 'uniform-buffer'
		}]
	};

	return build(bindGroupLayoutDescDict);
}
