'use strict';

const Vulkan = require('../Vulkan');

module.exports = function(){
	const {device} = Vulkan;
	return device.createRenderPipeline({
		layout: device.createPipelineLayout({
			bindGroupLayouts: [
				Vulkan.bindGroupLayoutDict.bindGroupLayout,
				Vulkan.bindGroupLayoutDict.bindGroupLayout2Dynamic,
				//Vulkan.bindGroupLayoutDict.bindGroupLayout3,
			]
		}),
		vertexStage: {
			module: device.createShaderModule({
				code: Vulkan.shader_billboard.vertexCode,
			}),
			entryPoint: 'main'
		},
		fragmentStage: {
			module: device.createShaderModule({
				code: Vulkan.shader_billboard.fragmentCode,
			}),
			entryPoint: 'main'
		},
		primitiveTopology: 'triangle-strip',
		rasterizationState: {
			frontFace: 'ccw',
			cullMode: 'none',
		},
		colorStates:[{
			format: Vulkan.swapChainFormat,
			colorBlend: {
				srcFactor: 'one',
				dstFactor: 'one-minus-src-alpha',
				operation: 'add'
			},
			alphaBlend: {
				srcFactor: 'src-alpha',
				dstFactor: 'one-minus-src-alpha',
				operation: 'add'
			}
		}],
		depthStencilState: {
			format: 'depth24plus-stencil8',
			depthWriteEnabled: false,
			depthCompare: 'less-equal',
		},
		vertexState: {
			indexFormat: 'uint16',
		}
	});
}
