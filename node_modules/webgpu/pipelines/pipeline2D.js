'use strict';

const Vulkan = require('../Vulkan');

module.exports = function(){
	const {device} = Vulkan;
	return device.createRenderPipeline({
		layout: device.createPipelineLayout({
			bindGroupLayouts: [
				Vulkan.bindGroupLayoutDict.bindGroupLayout,
				Vulkan.bindGroupLayoutDict.bindGroupLayout3,
			]
		}),
		vertexStage: {
			module: device.createShaderModule({
				code: Vulkan.shader_2d.vertexCode,
			}),
			entryPoint: 'main'
		},
		fragmentStage: {
			module: device.createShaderModule({
				code: Vulkan.shader_2d.fragmentCode,
			}),
			entryPoint: 'main'
		},
		primitiveTopology: 'triangle-list',
		colorStates:[{
			format: Vulkan.swapChainFormat,
			colorBlend: {
				srcFactor: 'src-alpha',
				dstFactor: 'one-minus-src-alpha',
				operation: 'add'
			},
			alphaBlend: {
				srcFactor: 'src-alpha',
				dstFactor: 'one-minus-src-alpha',
				operation: 'add'
			}
		}],
		vertexState: {
			indexFormat: 'uint16',
			vertexBuffers:[{
				arrayStride: 22 << 2,
				stepMode: 'instance',
				attributes:[{
					shaderLocation: 0,
					offset: 0,
					format: 'float3'
				},{
					shaderLocation: 1,
					offset: 3 << 2,
					format: 'float3'
				},{
					shaderLocation: 2,
					offset: 6 << 2,
					format: 'float4'
				},{
					shaderLocation: 3,
					offset: 10 << 2,
					format: 'float4'
				},{
					shaderLocation: 4,
					offset: 14 << 2,
					format: 'float4'
				},{
					shaderLocation: 5,
					offset: 18 << 2,
					format: 'float4'
				}]
			}]
		}
	});
}