const vertexShaderGLSL = `#version 450

layout(binding=0)
uniform _ {
	vec2 screenWH;
};

//layout(location=0)in mat2x3 worldMatrix;

layout(location=0)
in vec3 worldMatrixX;

layout(location=1)
in vec3 worldMatrixY;

layout(location=2)
in vec4 textureMul;

layout(location=3)
in vec4 textureAdd;

layout(location=4)
in vec4 rectSize;//w,rw,h,rh

layout(location=5)
in vec4 scale9grid;//lm,rm,tm,bm

layout(location = 0)
out vec2 uv;

void main() {
	mat2x3 worldMatrix = mat2x3(worldMatrixX, worldMatrixY);
	vec2 inputPosition = vec2(gl_VertexIndex >> 1 & 1, gl_VertexIndex >> 3);
	vec4 inputMargin = vec4(equal(
		ivec2(gl_VertexIndex & 3, gl_VertexIndex >> 2).xxyy,
		ivec2(1, 2).xyxy
	));
	inputMargin.yw = -inputMargin.yw;
	vec4 margin = inputMargin * scale9grid;
	margin = margin.xxzz + margin.yyww;

	vec4 xyuv = fma(inputPosition.xxyy, rectSize, margin);
	xyuv.yw /= rectSize.yw;
	xyuv = fma(xyuv.xzyw, textureMul, textureAdd);

	xyuv.xy = vec3(xyuv.xy, 1) * worldMatrix;
	xyuv.xy = fma(xyuv.xy, screenWH, vec2(-1, 1));

	gl_Position = vec4(xyuv.xy, 0, 1);
	uv = xyuv.zw;
}
`;

const fragmentShaderGLSL = `#version 450
	layout(binding=1)uniform sampler mySampler;
	layout(set=1, binding=0)uniform texture2D myTexture;

	layout(location=0)out vec4 outColor;
	layout(location=0)in vec2 uv;

	void main() {
		vec4 temp = texture(sampler2D(myTexture, mySampler), uv);
		outColor = temp;
	}
`;

exports.vertexCode = vertexShaderGLSL;
exports.fragmentCode = fragmentShaderGLSL;
