const numParticles = 10;
const code = `#version 450
/*
// work group dimensions
in uvec3 gl_NumWorkGroups; (dispatch_x, dispatch_y, dispatch_z)
const uvec3 gl_WorkGroupSize; (local_size_x, local_size_y, local_size_z)

// work group and invocation IDs
in uvec3 gl_WorkGroupID; ([0, dispatch_x), [0, dispatch_y), [0, dispatch_z))
in uvec3 gl_LocalInvocationID; ([0, local_size_x), [0, local_size_y), [0, local_size_z))

// derived variables
in uvec3 gl_GlobalInvocationID;
= gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID;
in uint gl_LocalInvocationIndex;
= gl_LocalInvocationID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y + gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_LocalInvocationID.x;




    void draw(GPUSize32 vertexCount, optional GPUSize32 instanceCount = 1,
              optional GPUSize32 firstVertex = 0, optional GPUSize32 firstInstance = 0);
    void drawIndexed(GPUSize32 indexCount, optional GPUSize32 instanceCount = 1,
                     optional GPUSize32 firstIndex = 0,
                     optional GPUSignedOffset32 baseVertex = 0,
                     optional GPUSize32 firstInstance = 0);
*/

/*
layout(std140, set = 0, binding = 0)
uniform SimParams {
	float deltaT;
	float rule1Distance;
	float rule2Distance;
	float rule3Distance;
	float rule1Scale;
	float rule2Scale;
	float rule3Scale;
} params;
*/

layout(set=1, binding=0)
uniform WORLD_BLOCK {
	mat3x4 worldMatrixList[100];
};

layout(set=2, binding=0)
uniform MVP_BLOCK {
	mat4 screenMatrix;
	mat3x4 cameraMatrix;
};

layout(set=3, binding=0)
uniform BOUND_BLOCK {
	vec3 boundList[20];//(min, max),every bound use two vec3.
};

layout(set=0, binding=0)
buffer ParticlesA {
	uvec4 particles[];
};

vec4 pts[8];

bool canCull(uint idx){
	bool result = true;
	for(int i=0; i<8; ++i){
		float v = pts[i][idx];
		float w = pts[i].w;
		if(v > -w){
			result = false;
			break;
		}
	}
	if(result)return true;
	for(int i=0; i<8; ++i){
		float v = pts[i][idx];
		float w = pts[i].w;
		if(v < w){
			return false;
		}
	}
	return true;
}

layout(local_size_x=3) in;
shared bvec3 cullFlag;

void main(){
	uint index = gl_WorkGroupID.x;
	uint boundIndex = index << 1;
	
	for(int i=0; i<8; ++i){
		uvec3 xyz = uvec3(i & 1, (i >> 1) & 1, i >> 2);
		for(int j=0; j<3; ++j){
			pts[i][j] = boundList[boundIndex + xyz[j]][j];
		}
		pts[i].w = 1;
		pts[i] = vec4(vec4(pts[i] * worldMatrixList[particles[index].w], 1) * cameraMatrix, 1) * screenMatrix;
	}
	uint axis = gl_LocalInvocationID.x;
	cullFlag[axis] = canCull(axis);
	barrier();
	if(any(cullFlag))return;
	//if(canCull(0) || canCull(1))return;
	particles[index].y = 1;
}
`;


module.exports = code;
