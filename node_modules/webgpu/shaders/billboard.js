
const vertex3DShaderGLSL = `#version 450

layout(binding=0)
uniform MVP_BLOCK {
	mat4 screenMatrix;
	mat3x4 cameraMatrix;
};

layout(set=1, binding=0)
uniform WORLD_BLOCK {
	mat4x4 worldMatrixList[256];
};

layout(location = 0)
out vec2 uv;

void main()
{
	vec2 vertex = vec2(gl_VertexIndex >> 1, gl_VertexIndex & 1);
	vec2 xyDiff = fma(vertex, vec2(2.0), vec2(-1.0)) * vec2(16,32);
	vec3 worldPosition = vec3(0);
	worldPosition = vec4(worldPosition, 1) * mat3x4(worldMatrixList[gl_InstanceIndex << 2]);
	
	vec3 cameraPosition = vec4(worldPosition, 1) * cameraMatrix;

	cameraPosition.xy += xyDiff;

	vec4 screenPosition = vec4(cameraPosition, 1) * screenMatrix;

	gl_Position = screenPosition;
	uv = vertex;
}
`;

const fragment3DShaderGLSL = `

	[[binding(1), set(0)]] var<uniform_constant> mySampler: sampler;
	[[binding(0), set(2)]] var<uniform_constant> myTexture: texture_sampled_2d<f32>;

	[[location(0)]] var<in> uv: vec2<f32>;
	[[location(0)]] var<out> outColor: vec4<f32>;

	[[stage(fragment)]]
	fn main() -> void {
		outColor = textureSample(myTexture, mySampler, uv);
		return;
	}
`;


exports.vertexCode = vertex3DShaderGLSL
exports.fragmentCode = fragment3DShaderGLSL;
