
const vertex3DShaderGLSL = `#version 450

const uint indexList[24] = uint[](
	0, 1, 1, 3, 3, 2, 2, 0,
	4, 5, 5, 7, 7, 6, 6, 4,
	0, 4, 1, 5, 3, 7, 2, 6
);

layout(binding=0)
uniform MVP_BLOCK {
	mat4 screenMatrix;
	mat3x4 cameraMatrix;
};

layout(set=1, binding=0)
uniform WORLD_BLOCK {
	mat4x4 worldMatrixList[256];
};
/*
layout(set=2, binding=0)
uniform BOUND_BLOCK {
	vec3 boundList[2];
};
*/
void main()
{
	vec3 boundList[2] = {
		vec3(0,0,0),
		vec3(100,100,200)
	};
	uint vertexID = indexList[gl_VertexIndex];
	uvec3 xyz = uvec3(vertexID & 1, (vertexID >> 1) & 1, vertexID >> 2);
	vec3 vertex;
	for(int i=0; i<3; ++i){
		vertex[i] = boundList[xyz[i]][i];
	}

	vec3 worldPosition = vertex;
	worldPosition = vec4(worldPosition, 1) * mat3x4(worldMatrixList[gl_InstanceIndex << 2]);
	vec3 cameraPosition = vec4(worldPosition, 1) * cameraMatrix;
	vec4 screenPosition = vec4(cameraPosition, 1) * screenMatrix;

	gl_Position = screenPosition;
}
`;

const fragment3DShaderGLSL = `#version 450
	layout(location=0)out vec4 outColor;

	void main() {
		outColor = vec4(1, 0, 1, 1);
	}
`;



exports.vertexCode = vertex3DShaderGLSL
exports.fragmentCode = fragment3DShaderGLSL;
