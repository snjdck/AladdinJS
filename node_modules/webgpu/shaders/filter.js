
const filterVertexShaderGLSL = `#version 450

layout(binding=0)
uniform _ {
	vec4 sourceRect;
	vec4 destRect;
};
//vec4 sourceRect = vec4(0, 0, 1, 1);
//vec4 destRect = vec4(-1, -1, 2, 2);

layout(location = 0)
out vec2 uv;

void main() {
	vec2 vertex = vec2(gl_VertexIndex >> 1, gl_VertexIndex & 1);
	//gl_Position = vec4(fma(vertex, vec2(2), vec2(-1)), 0, 1);
	//uv = vertex;
	gl_Position = vec4(fma(vertex, destRect.zw, destRect.xy), 0, 1);
	uv = fma(vertex, sourceRect.zw, sourceRect.xy);
}
`;
const filterFragmentShaderGLSL = `#version 450
	layout(binding=1)uniform sampler _sampler;
	layout(binding=2)uniform texture2D _texture;

	layout(binding=3)
	uniform _ {
		vec4 mixColor;
	};

	layout(location=0)out vec4 outColor;
	layout(location=0)in vec2 uv;

	void main() {
		float s = dFdx(uv.x);
		float t = dFdy(uv.y);

		vec2 tc0 = uv + vec2(-s, -t);
		vec2 tc1 = uv + vec2( 0, -t);
		vec2 tc2 = uv + vec2( s, -t);
		vec2 tc3 = uv + vec2(-s,  0);
		vec2 tc4 = uv;
		vec2 tc5 = uv + vec2( s,  0);
		vec2 tc6 = uv + vec2(-s,  t);
		vec2 tc7 = uv + vec2( 0,  t);
		vec2 tc8 = uv + vec2( s,  t);

		vec4 col0 = texture(sampler2D(_texture, _sampler), tc0);
		vec4 col1 = texture(sampler2D(_texture, _sampler), tc1);
		vec4 col2 = texture(sampler2D(_texture, _sampler), tc2);
		vec4 col3 = texture(sampler2D(_texture, _sampler), tc3);
		vec4 col4 = texture(sampler2D(_texture, _sampler), tc4);
		vec4 col5 = texture(sampler2D(_texture, _sampler), tc5);
		vec4 col6 = texture(sampler2D(_texture, _sampler), tc6);
		vec4 col7 = texture(sampler2D(_texture, _sampler), tc7);
		vec4 col8 = texture(sampler2D(_texture, _sampler), tc8);

		vec4 sum = (
			1.0 * col0 + 2.0 * col1 + 1.0 * col2 +
			2.0 * col3 + 4.0 * col4 + 2.0 * col5 +
			1.0 * col6 + 2.0 * col7 + 1.0 * col8
		) / 16.0;

		outColor = sum * mixColor;
	}
`;

exports.vertexCode = filterVertexShaderGLSL;
exports.fragmentCode = filterFragmentShaderGLSL;
