'use strict';

const Vulkan = require('./Vulkan');

module.exports = Vulkan;

const TextManager = require('../managers/TextManager');

//const DirectBufferManager = require('../managers/DirectBufferManager');
const MouseManager = require('../managers/MouseManager');
const KeyBoardManager = require('../managers/KeyBoardManager');
const CameraManager = require('../managers/CameraManager');

Vulkan.registerBindGroupLayout('0', [
	[GPUShaderStage.VERTEX, 'buffer'],
	[GPUShaderStage.FRAGMENT, 'sampler'],
]);

Vulkan.registerBindGroupLayout('2', [
	[GPUShaderStage.VERTEX | GPUShaderStage.COMPUTE, 'buffer'],
]);

Vulkan.registerBindGroupLayout('2_dynamic', [
	[GPUShaderStage.VERTEX, 'buffer', {hasDynamicOffset: true}],
]);

Vulkan.registerBindGroupLayout('3', [
	[GPUShaderStage.FRAGMENT, 'texture'],
]);

Vulkan.registerBindGroupLayout('4', [
	[GPUShaderStage.FRAGMENT, 'buffer', {hasDynamicOffset: true}],
]);

Vulkan.registerBindGroupLayout('5', [
	[GPUShaderStage.FRAGMENT, 'texture', {viewDimension: '2d-array'}],
]);

Vulkan.registerBindGroupLayout('cull', [
	[GPUShaderStage.COMPUTE, 'buffer', {type: 'storage'}],
]);

Vulkan.registerBindGroupLayout('filter2D', [
	[GPUShaderStage.FRAGMENT, 'sampler'],
	[GPUShaderStage.FRAGMENT, 'texture'],
]);

Vulkan.registerBindGroupLayout('filter_blur', [
	[GPUShaderStage.VERTEX, 'buffer'],
	[GPUShaderStage.FRAGMENT, 'buffer'],
]);

//Vulkan.registerManagerFactory('render2D', Render2D);

Vulkan.registerManagerFactory('textMgr', TextManager);

//Vulkan.registerManagerFactory('vertexBufferMgr', VertexBufferManager);
//Vulkan.registerManagerFactory('directBufferMgr', DirectBufferManager);
Vulkan.registerManagerFactory('mouseMgr', MouseManager);
Vulkan.registerManagerFactory('keyboardMgr', KeyBoardManager);
Vulkan.registerManagerFactory('cameraMgr', CameraManager);
