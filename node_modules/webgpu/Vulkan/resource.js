const Vulkan = require('./index');
const {TexturePool, BufferPool, LRUCache} = require('../helper/ResourcePool');
const {createBufferWith, createTexture, createDepthTexture} = require('webonly/utils_gpu');

const fetchBuffer = function(){
	const map = new Map();
	return (size, usage) => {
		if(!map.has(usage)){
			map.set(usage, BufferPool(size => Vulkan.device.createBuffer({usage, size})));
		}
		return map.get(usage)(size);
	}
}();

const bufferCache = LRUCache((data, usage) => createBufferWith(Vulkan.device, usage, data));

const fetchTextures = TexturePool((width, height) => {
	const {device} = Vulkan;
	const usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST
	const colorTexture = device.createTexture({
		format: 'bgra8unorm',
		size: [width, height, 1],
		usage
	});
	const normalTexture = device.createTexture({
		format: 'rgba32float',
		size: [width, height, 1],
		usage
	});
	const depthTexture = device.createTexture({
		size: [width, height, 1],
		format: 'depth24plus-stencil8',
		usage
	});
	return {
		colorTexture,
		normalTexture,
		depthTexture,
		colorView:colorTexture.createView(),
		normalView:normalTexture.createView(),
		depthView:depthTexture.createView(),
		destroy(){
			console.log('destroy textures',width, height);
			colorTexture.destroy();
			normalTexture.destroy();
			depthTexture.destroy();
		}
	};
});

const fetchView3D = TexturePool((width, height) => {
	console.log('new view3d',width, height);
	let colorTexture = createTexture(Vulkan.device, width, height, 1, GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT);
	let depthTexture = createDepthTexture(Vulkan.device, width, height);
	return {
		colorView:colorTexture.createView(),
		depthView:depthTexture.createView(),
		destroy(){
			console.log('destroy view3d',width, height);
			colorTexture.destroy();
			depthTexture.destroy();
		}
	};
});

const fetchView2D = TexturePool((width, height) => {
	console.log('new filter',width, height);
	let texture = createTexture(Vulkan.device, width, height, 2, GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST);
	return {
		view0:texture.createView({dimension:'2d', baseArrayLayer:0, arrayLayerCount:1}),
		view1:texture.createView({dimension:'2d', baseArrayLayer:1, arrayLayerCount:1}),
		destroy(){
			texture.destroy();
			console.log('delete filter',width, height)
		},
		copyTexture(commandEncoder, sx, sy, width, height){
			commandEncoder.copyTextureToTexture(
				{texture, origin: [sx, sy, 0]},
				{texture, origin: [0, 0, 1]},
				[width, height, 1]
			);
		}
	};
});

exports.fetchBuffer = fetchBuffer;
exports.bufferCache = bufferCache;
exports.fetchView3D = fetchView3D;
exports.fetchView2D = fetchView2D;
exports.fetchTextures = fetchTextures;
