const Vulkan = require('./index');
const {TexturePool, BufferPool, LRUCache} = require('../helper/ResourcePool');
const {createBufferWith, createTexture, createDepthTexture} = require('webonly/utils_gpu');

const newBufferPool = usage => BufferPool(size => Vulkan.device.createBuffer({usage, size}));

const fetchBuffer = function(){
	const forEachFn = v => v.reset();
	const map = new Map();
	return {
		fetch(size, usage){
			if(!map.has(usage)){
				map.set(usage, newBufferPool(usage));
			}
			return map.get(usage).fetch(size);
		},
		reset(){
			map.forEach(forEachFn);
		}
	}
}();

const bufferCache = LRUCache((data, usage) => createBufferWith(Vulkan.device, usage, data));

const fetchView3D = TexturePool((width, height) => {
	console.log('new',width, height);
	let colorTexture = createTexture(Vulkan.device, width, height, 1, GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT);
	let depthTexture = createDepthTexture(Vulkan.device, width, height);
	return {
		colorView:colorTexture.createView(),
		depthView:depthTexture.createView(),
		destroy(){
			console.log('destroy',width, height);
			colorTexture.destroy();
			depthTexture.destroy();
		}
	};
});

const fetchView2D = TexturePool((width, height) => {
	console.log('new filter',width, height);
	let texture = createTexture(Vulkan.device, width, height, 2, GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST);
	return {
		view0:texture.createView({dimension:'2d', baseArrayLayer:0, arrayLayerCount:1}),
		view1:texture.createView({dimension:'2d', baseArrayLayer:1, arrayLayerCount:1}),
		destroy(){
			texture.destroy();
			console.log('delete filter',width, height)
		},
		copyTexture(sx, sy, width, height){
			Vulkan.commandEncoder.copyTextureToTexture(
				{texture, origin: [sx, sy, 0]},
				{texture, origin: [0, 0, 1]},
				[width, height, 1]
			);
		}
	};
});

exports.fetchBuffer = fetchBuffer;
exports.bufferCache = bufferCache;
exports.fetchView3D = fetchView3D;
exports.fetchView2D = fetchView2D;
