'use strict';

const Vulkan = module.exports = {
	swapChainFormat: 'bgra8unorm',
	_managerFactoryDict: {},
	_managerList: [],
	events: new EventTarget(),
};

Vulkan.init = function(device, canvas){
	this.device = device;
	this.canvas = canvas;
	Object.entries(this._managerFactoryDict).forEach(([name, factory]) => this.registerManager(name, new factory()));
}

Vulkan.registerManagerFactory = function(name, factory){
	this._managerFactoryDict[name] = factory;
}

Vulkan.registerManager = function(name, value){
	this[name] = value;
	this._managerList.push(value);
}

Vulkan.updateManagers = function(method){
	this._managerList.forEach(v => v[method]?.());
}

Vulkan.loadImage = async path => {
	let image = new Image();
	image.src = path;
	await image.decode();
	return image;
}

Vulkan.createBufferMapped = function(usage, data){
	const {device} = Vulkan;
	const buffer = device.createBuffer({usage, size: data.byteLength, mappedAtCreation:true});
	const mapping = buffer.getMappedRange();
	new data.constructor(mapping).set(data);
	buffer.unmap();
	return buffer;
}

Vulkan.copyDataToBuffer = function(buffer, data, offset=0){
	const queue = Vulkan.device.defaultQueue;
	queue.writeBuffer(buffer, offset, data.buffer);
	return;
	const commandEncoder = Vulkan.copyDataCommandEncoder;
	const copyBuffer = createBufferMapped(GPUBufferUsage.COPY_SRC, data);
	commandEncoder.copyBufferToBuffer(copyBuffer, 0, buffer, offset, data.byteLength);
	Vulkan.destroyList.push(copyBuffer);
	//copyBuffer.destroy();
	return copyBuffer;
}

Vulkan.createUniformBufferListCache = function(layout, totalSize=0x4000, size=totalSize){
	const bufferList = [];
	const bindGroupList = [];
	return function(batchIndex, offset, value){
		const {device} = Vulkan;
		let uniformBuffer = bufferList[batchIndex];
		if(uniformBuffer == null){
			uniformBuffer = bufferList[batchIndex] = device.createBuffer({
				size: totalSize,
				usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST
			});
			bindGroupList[batchIndex] = device.createBindGroup({
				layout,
				entries: [{
					binding: 0,
					resource: {buffer: uniformBuffer, size}
				}]
			});
		}
		if(!value)return bindGroupList[batchIndex];
		Vulkan.copyDataToBuffer(uniformBuffer, value, offset);
	}
}

Vulkan.createCanvasContext = function(width, height){
	let canvas = document.createElement('canvas');
	canvas.width = width;
	canvas.height = height;
	let context = canvas.getContext('2d');
	context.fillStyle = '#FFFFFF';
	context.strokeStyle = 'green';
	context.textBaseline = 'ideographic';//bottom,top
	/*
	canvas.setAttribute('style', 'position: absolute;left: 0;');
	document.body.appendChild(canvas)
	context.fillText("你好,world", 100, 30);
	//*/
	return context;
}

Vulkan.createDepthTexture = function(width, height){
	const {device} = Vulkan;
	return device.createTexture({
		size: [width, height, 1],
		format: 'depth24plus-stencil8',
		usage: GPUTextureUsage.OUTPUT_ATTACHMENT
	});
}
