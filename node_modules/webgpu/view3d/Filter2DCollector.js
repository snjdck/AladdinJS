'use strict';

const Vulkan = require('../Vulkan');
const traverseTree = require('utils/traverseTree');
const Filter2D = require('../filter2Ds/Filter2D');
const {Texture2D} = require('opengl/textures');

const MAX_W = 4096;
const MAX_H = 4096;

function Filter2DCollector(){
	const list = [];
	let level = 0;

	const getLevelList = () => list[level] || (list[level] = []);
	const onLeaveFilter = () => --level;
	const clearGroup = group => group.length = 0;

	function onCollect(item){
		if(!item.visible)return true;
		if(!item.filter)return;
		getLevelList().push(item);
		++level;
		return onLeaveFilter;
	}

	function onDraw(item){
		const {filter} = item;
		if(filter && item != this){
			Vulkan.render2D.add(filter);
			return true;
		}
		Vulkan.render2D.tryAdd(item);
	}

	const beginRenderPass = function(){
		const desc = {
			colorAttachments: [{
				attachment: null,
				loadValue: [0,0,0,0]
			}]
		}
		return function(colorAttachment){
			desc.colorAttachments[0].attachment = colorAttachment;
			Vulkan.renderPassEncoder = Vulkan.commandEncoder.beginRenderPass(desc);
		}
	}();

	return function(root){
		const {canvas:{width, height}} = Vulkan;
		const {filterSwapChain} = Vulkan;

		const frameBufferA = filterSwapChain.frameBufferA.createView();
		const frameBufferB = filterSwapChain.frameBufferB.createView();
		const {rectPack} = filterSwapChain;

		traverseTree(root, onCollect);
		for(const group of list.reverse()){
			if(group.length == 0)continue;
			rectPack.clear();
			beginRenderPass(frameBufferA);

			Vulkan.render2D.prepareToDraw();
			for(let filterItem of group){
				const rect = filterItem.filter.drawRect = rectPack.insert(width, height);
				Vulkan.renderPassEncoder.setViewport(rect.x, rect.y, rect.width, rect.height, 0, 1);
				traverseTree.call(filterItem, filterItem, onDraw);
				Vulkan.render2D.draw();
			}
			
			Vulkan.renderPassEncoder.endPass();
			beginRenderPass(frameBufferB);

			Vulkan.renderPassEncoder.setBindGroup(0, Filter2D.textureBindGroup);
			for(const {filter} of group){
				filter.onDraw();
				filter.width = width;
				filter.height = height;
				filter.texture = new Texture2D(frameBufferB);
				filter.texture.setUV(MAX_W, MAX_H, filter.drawRect, false);
			}

			Vulkan.renderPassEncoder.endPass();
		}
		list.forEach(clearGroup);
	}
}

module.exports = Filter2DCollector;
