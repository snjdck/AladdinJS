'use strict';

const DisplayObject2D = require('../DisplayObject2D');
const DisplayObject3D = require('../DisplayObject3D');

class View3D
{
	constructor(){
		this.scene3d = new DisplayObject3D();
		this.scene2d = new DisplayObject2D();

		this.scene3d._scene = this;
		this.scene2d._scene = this;
	}

	render(encoder){
		const {scene3d, scene2d} = this;
		const canvasSize = encoder.canvas;

		scene3d.camera.collectDrawUnits(scene3d);
		scene2d.camera.collectDrawUnits(scene2d);

		for(let commandEncoder of encoder.createCommandEncoder()){
			const colorTexture = commandEncoder.fetchTempTexture(canvasSize, '2d,bgra8unorm,0x11,1');
			const depthTexture = commandEncoder.fetchTempTexture(canvasSize, '2d,depth24plus-stencil8,0x14,1');
			const colorView = commandEncoder.fetchTextureView(colorTexture);
			const depthStencilView = commandEncoder.fetchTextureView(depthTexture);
			for(let renderPassEncoder of commandEncoder.beginRenderPass('load+store;load+discard;load+discard', colorView, depthStencilView)){
				scene3d.camera.draw(renderPassEncoder, {colorTexture, depthTexture});
			}
			for(let renderPassEncoder of commandEncoder.beginRenderPass('load+store', colorView)){
				scene2d.camera.draw(renderPassEncoder);
			}
			commandEncoder.copyTextureToTexture(
				{texture:colorTexture},
				{texture:commandEncoder.getCurrentTexture()},
				canvasSize
			);
		}
	}
}

module.exports = View3D;
