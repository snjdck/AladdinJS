'use strict';

const Vulkan = require('../Vulkan');
const DisplayObject2D = require('../DisplayObject2D');
const DisplayObject3D = require('../DisplayObject3D');
const {CommandEncoder, RenderPass} = require('../helper/CommandEncoder');
const {createDepthTexture} = require('webonly/utils_gpu');

const renderPass3DDeferred = RenderPass({
	colorAttachments:[{
		loadOp:'clear',//load
		clearValue:[0,0,0,0],//when loadOp is clear
		storeOp:'store',//discard
	},{
		loadOp:'clear',//load
		clearValue:[0,0,0,0],//when loadOp is clear
		storeOp:'store',//discard
	}],
	depthStencilAttachment:{
		depthLoadOp:'clear',//load
		depthClearValue:1,//[0,1],when depthLoadOp is clear
		depthStoreOp:'store',//store
		depthReadOnly:false,
		stencilLoadOp:'clear',//load
		stencilClearValue:0,
		stencilStoreOp:'store',//store
		stencilReadOnly:false,
	}
});

const renderPass3D = RenderPass({
	colorAttachments:[{loadOp:'load', storeOp:'store'}],
	depthStencilAttachment:{depthLoadOp:'load', depthStoreOp:'discard', stencilLoadOp:'load', stencilStoreOp:'discard'}
});

const renderPass2D = RenderPass({colorAttachments:[{loadOp:'load', storeOp:'store'}]});

class View3D
{
	constructor(){
		this.scene3d = new DisplayObject3D();
		this.scene2d = new DisplayObject2D();

		this.scene3d._scene = this;
		this.scene2d._scene = this;

		const {width, height} = Vulkan.canvas;
		this.depthTexture = createDepthTexture(Vulkan.device, width, height);
		Vulkan.mainDepthStencil = this.depthTexture.createView();
		Vulkan.floatTexture = Vulkan.device.createTexture({
			dimension: '2d',
			format: 'rgba32float',
			size: [width, height, 1],
			usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,
		});
	}

	render(){
		Vulkan.mainColorTexture = Vulkan.swapChain.getCurrentTexture();
		Vulkan.mainColorTextureView = Vulkan.mainColorTexture.createView();
		
		//console.time('render')
		const {scene3d, scene2d} = this;

		scene3d.camera.collectDrawUnits(scene3d);
		scene2d.camera.collectDrawUnits(scene2d);

		for(let commandEncoder of CommandEncoder(Vulkan.device)){
			for(let renderPassEncoder of renderPass3D(commandEncoder, Vulkan.mainColorTextureView, Vulkan.mainDepthStencil)){
				for(let commandEncoderDeferred of CommandEncoder(Vulkan.device)){
					for(let renderPassEncoderDeferred of renderPass3DDeferred(commandEncoderDeferred, Vulkan.mainColorTextureView, Vulkan.floatTexture.createView(), Vulkan.mainDepthStencil)){
						scene3d.camera.draw(renderPassEncoder, renderPassEncoderDeferred);
					}
				}
			}
			for(let renderPassEncoder of renderPass2D(commandEncoder, Vulkan.mainColorTextureView)){
				scene2d.camera.draw(renderPassEncoder);
			}
		}
		//console.timeEnd('render')
	}
}

module.exports = View3D;
