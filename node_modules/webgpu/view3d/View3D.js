'use strict';

const DisplayObject2D = require('../DisplayObject2D');
const DisplayObject3D = require('../DisplayObject3D');
const {mouseEvents} = require('../core/Events');

class View3D
{
	constructor(){
		this.scene3d = new DisplayObject3D();
		this.scene2d = new DisplayObject2D();

		this.scene3d._scene = this;
		this.scene2d._scene = this;

		this.picking = new Picking();
	}

	render(encoder){
		const {scene3d, scene2d} = this;
		const canvasSize = encoder.canvas;
		
		const pickColorTexture = encoder.fetchTempTexture(pickTextureSize, 'r32uint,0x11');
		const pickDepthTexture = encoder.fetchTempTexture(pickTextureSize, 'depth24plus-stencil8,0x10');
		const pickColorView = encoder.fetchTextureView(pickColorTexture);
		const pickDepthStencilView = encoder.fetchTextureView(pickDepthTexture);
		const pickBuffer = encoder.fetchTempBuffer(4, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);

		scene3d.camera.collectDrawUnits(scene3d);
		scene2d.camera.collectDrawUnits(scene2d);

		const colorTexture = encoder.fetchTempTexture(canvasSize, 'bgra8unorm,0x11');
		const depthTexture = encoder.fetchTempTexture(canvasSize, 'depth24plus-stencil8,0x14');
		const colorView = encoder.fetchTextureView(colorTexture);
		const depthStencilView = encoder.fetchTextureView(depthTexture);

		this.picking.reset();
		for(let commandEncoder of encoder.createCommandEncoder()){
			for(let renderPassEncoder of commandEncoder.beginRenderPass('load+store;load+discard;load+discard', colorView, depthStencilView)){
				scene3d.camera.draw(renderPassEncoder, {colorTexture, depthTexture});
			}
			for(let renderPassEncoder of commandEncoder.beginRenderPass('load+store', colorView)){
				scene2d.camera.draw(renderPassEncoder);
			}
			commandEncoder.copyTextureToTexture({texture:colorTexture}, {texture:commandEncoder.getCurrentTexture()}, canvasSize);
			for(let renderPassEncoder of commandEncoder.beginRenderPass('[0,0,0,0]+store;1+discard;0+discard', pickColorView, pickDepthStencilView)){
				scene3d.camera.drawPick(renderPassEncoder, mouseEvents.mouseX, mouseEvents.mouseY, this.picking);
			}
			for(let renderPassEncoder of commandEncoder.beginRenderPass('load+store', pickColorView)){
				scene2d.camera.drawPick(renderPassEncoder, mouseEvents.mouseX, mouseEvents.mouseY, this.picking);
			}
			commandEncoder.copyTextureToBuffer({texture:pickColorTexture}, {buffer:pickBuffer}, pickTextureSize);
		}
		encoder.readBuffer(pickBuffer, this.onBufferRead.bind(this, this.picking.itemMap));
	}

	onBufferRead(itemMap, arrayBuffer){
		const value = new Uint32Array(arrayBuffer)[0];
		this.picking.setTarget(itemMap.get(value));
	}
}

const pickTextureSize = {width:1, height:1};

class Picking
{
	constructor(){
		this.prevTarget = null;
		this.currTarget = null;
	}

	reset(){
		this.itemMap = new Map();
		this.nextID = 0;
	}

	register(drawUnit){
		drawUnit.id = ++this.nextID;
		this.itemMap.set(drawUnit.id, drawUnit);
	}

	setTarget(target){
		this.prevTarget = this.currTarget;
		this.currTarget = target;
		console.log(target)
	}

	getTarget(){
		return this.currTarget;
	}
}

module.exports = View3D;
