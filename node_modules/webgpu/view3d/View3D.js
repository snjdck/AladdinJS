'use strict';

const Vulkan = require('../Vulkan');
const DisplayObject2D = require('../DisplayObject2D');
const DisplayObject3D = require('../DisplayObject3D');
const drawScene = require('./drawScene');
const {tickByFrame} = require('webonly/timer');
const Signal = require('mvc/node_modules/signal');
const {FrameBufferBase} = require('../helper/FrameBuffer');

class View3D
{
	constructor(){
		this.scene3d = new DisplayObject3D();
		this.scene2d = new DisplayObject2D();

		this.preDrawSignal = new Signal();
		this.drawSignal = new Signal();

		this.frameBuffer = new FrameBufferBase({}, {clearValue:[0,0,0,1]});
		
		tickByFrame.call(this, this.onTick);

		const {width, height} = Vulkan.canvas;
		this.depthTexture = Vulkan.createDepthTexture(width, height);
	}

	addPreDrawTask(handler){
		this.preDrawSignal.add(handler);
	}

	addDrawTask(handler){
		this.drawSignal.add(handler);
	}

	onTick(timeElapsed){
		Vulkan.commandEncoder = Vulkan.device.createCommandEncoder();
		Vulkan.mainColorTexture = Vulkan.swapChain.getCurrentTexture().createView();
		Vulkan.mainDepthStencil = this.depthTexture.createView();

		const {frameBuffer, preDrawSignal, drawSignal} = this;

		preDrawSignal.notify(this);

		frameBuffer.setColorAttachment(Vulkan.mainColorTexture);
		frameBuffer.setDepthStencilAttachment(Vulkan.mainDepthStencil);
		frameBuffer.render(() => drawSignal.notify(this));

		Vulkan.device.queue.submit([Vulkan.commandEncoder.finish()]);
	}
}

module.exports = View3D;
