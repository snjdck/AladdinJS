'use strict';

const Vulkan = require('../Vulkan');
const DisplayObject2D = require('../DisplayObject2D');
const DisplayObject3D = require('../DisplayObject3D');
const Signal = require('mvc/node_modules/signal');
const RenderPass = require('../helper/RenderPass');

const renderPass = RenderPass({
	colorAttachments:[{
		loadOp:'clear',//load
		clearValue:[0,0,0,1],//when loadOp is clear
		storeOp:'store',//discard
		view:null
	}],
	depthStencilAttachment:{
		depthLoadOp:'clear',//load
		depthClearValue:1,//[0,1],when depthLoadOp is clear
		depthStoreOp:'discard',//store
		depthReadOnly:false,
		stencilLoadOp:'clear',//load
		stencilClearValue:0,
		stencilStoreOp:'discard',//store
		stencilReadOnly:false,
		view:null
	}
});

class View3D
{
	constructor(){
		this.scene3d = new DisplayObject3D();
		this.scene2d = new DisplayObject2D();

		this.scene3d._scene = this;
		this.scene2d._scene = this;

		this.preDrawSignal = new Signal();
		this.drawSignal = new Signal();

		const {width, height} = Vulkan.canvas;
		this.depthTexture = Vulkan.createDepthTexture(width, height);
	}

	addPreDrawTask(handler){
		this.preDrawSignal.add(handler);
	}

	addDrawTask(handler){
		this.drawSignal.add(handler);
	}

	render(){
		Vulkan.commandEncoder = Vulkan.device.createCommandEncoder();
		Vulkan.mainColorTexture = Vulkan.swapChain.getCurrentTexture().createView();
		Vulkan.mainDepthStencil = this.depthTexture.createView();

		const {frameBuffer, preDrawSignal, drawSignal} = this;

		this.nextCameraIndex = 0;
		this.nextViewportIndex = 0;

		preDrawSignal.notify(this);

		renderPass(() => drawSignal.notify(this), Vulkan.mainColorTexture, Vulkan.mainDepthStencil);

		Vulkan.device.queue.submit([Vulkan.commandEncoder.finish()]);
	}
}

module.exports = View3D;
