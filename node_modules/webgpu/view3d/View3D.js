'use strict';

const Vulkan = require('../Vulkan');
const DisplayObject2D = require('../DisplayObject2D');
const DisplayObject3D = require('../DisplayObject3D');
const {CommandEncoder, RenderPass} = require('../helper/CommandEncoder');
const {createDepthTexture} = require('webonly/utils_gpu');

const renderPass3D = RenderPass({
	colorAttachments:[{
		loadOp:'clear',//load
		clearValue:[0,0,0,1],//when loadOp is clear
		storeOp:'store',//discard
		view:null
	}],
	depthStencilAttachment:{
		depthLoadOp:'clear',//load
		depthClearValue:1,//[0,1],when depthLoadOp is clear
		depthStoreOp:'discard',//store
		depthReadOnly:false,
		stencilLoadOp:'clear',//load
		stencilClearValue:0,
		stencilStoreOp:'discard',//store
		stencilReadOnly:false,
		view:null
	}
});

const renderPass2D = RenderPass({colorAttachments:[{loadOp:'load', storeOp:'store'}]});

class View3D
{
	constructor(){
		this.scene3d = new DisplayObject3D();
		this.scene2d = new DisplayObject2D();

		this.scene3d._scene = this;
		this.scene2d._scene = this;

		//this.preDrawSignal = new Signal();
		//this.drawSignal = new Signal();

		const {width, height} = Vulkan.canvas;
		this.depthTexture = createDepthTexture(Vulkan.device, width, height);
		Vulkan.mainDepthStencil = this.depthTexture.createView();
	}
/*
	addPreDrawTask(handler){
		this.preDrawSignal.add(handler);
	}

	addDrawTask(handler){
		this.drawSignal.add(handler);
	}
*/
	render(){
		Vulkan.mainColorTexture = Vulkan.swapChain.getCurrentTexture().createView();
		
		//console.log('begin---------------')
		//console.timeStamp('render begin')
		//this.preDrawSignal.notify(this);

		const {scene3d, scene2d} = this;

		scene3d.camera.collectDrawUnits(scene3d);
		scene2d.camera.collectDrawUnits(scene2d);

		for(let commandEncoder of CommandEncoder(Vulkan.device)){
			for(let renderPassEncoder of renderPass3D(commandEncoder, Vulkan.mainColorTexture, Vulkan.mainDepthStencil)){
				scene3d.camera.draw(renderPassEncoder);
			}
			for(let renderPassEncoder of renderPass2D(commandEncoder, Vulkan.mainColorTexture)){
				scene2d.camera.draw(renderPassEncoder);
			}
		}
		//Vulkan.device.queue.onSubmittedWorkDone().then(this.onSubmitDone);
		//console.log('end---------------')
		//console.timeStamp('render end')
	}
}

module.exports = View3D;
