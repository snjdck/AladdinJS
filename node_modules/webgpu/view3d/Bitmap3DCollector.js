'use strict';

const Vulkan = require('../Vulkan');
const traverseTree = require('utils/traverseTree');
const {MaxRectsBinPack, Rect} = require('utils/MaxRectsBinPack');
const FrameBuffer = require('../helper/FrameBuffer');

function Bitmap3DCollector(){
	const frameBuffer = new FrameBuffer(true);
	const rectPack = new MaxRectsBinPack(8192, 8192);
	const elementList = [];
	const onInsert = ({width, height}) => rectPack.insert(width, height);
	function onCollect(item){
		if(!item.visible)return true;
		if(item.type === 'bitmap3d'){
			elementList.push(item);
		}
	}
	return function(root){
		traverseTree(root, onCollect);
		const elementCount = elementList.length;
		if(elementCount <= 0)return;
		const drawRectList = elementList.map(onInsert);
		const frameRect = Rect.Merge(drawRectList);
		const renderPassEncoder = frameBuffer.beginRenderPass(frameRect);
		for(let i=0; i<elementCount; ++i){
			const bitmap3D = elementList[i];
			const drawRect = drawRectList[i];
			bitmap3D.texture.rawTexture = frameBuffer.colorView;
			bitmap3D.texture.setUV(frameRect.width, frameRect.height, drawRect, false);
			renderPassEncoder.setViewport(drawRect.x, drawRect.y, drawRect.width, drawRect.height, 0, 1);
			bitmap3D.camera.draw(bitmap3D.root3d);
		}
		renderPassEncoder.endPass();
		rectPack.clear();
		elementList.length = 0;
	}
}

module.exports = Bitmap3DCollector;
