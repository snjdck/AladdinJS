'use strict';

const Vulkan = require('../Vulkan');
const RenderPass = require('../helper/RenderPass');
const {fetchView3D} = require('../Vulkan/resource');

const renderPass3D = RenderPass({
	colorAttachments:[{
		loadOp:'clear',//load
		clearValue:[0,0,0,0],//when loadOp is clear
		storeOp:'store',//discard
		view:null
	}],
	depthStencilAttachment:{
		depthLoadOp:'clear',//load
		depthClearValue:1,//[0,1],when depthLoadOp is clear
		depthStoreOp:'discard',//store
		depthReadOnly:false,
		stencilLoadOp:'clear',//load
		stencilClearValue:0,
		stencilStoreOp:'discard',//store
		stencilReadOnly:false,
		view:null
	}
});

const drawBitmap3D = function(){
	function onRender(renderPassEncoder){
		renderPassEncoder.setViewport(0, 0, this.width, this.height, 0, 1);
		this.camera.draw();
	}
	return itemList => {
		const commandEncoder = Vulkan.device.createCommandEncoder();
		Vulkan.commandEncoders2.push(commandEncoder);
		for(let item of itemList){
			const {colorView, depthView, width, height} = fetchView3D(item);
			item.texture.rawTexture = colorView;
			item.texture.setUV(width, height, {x:0,y:0,width:item.width,height:item.height}, false);
			item.camera.collectDrawUnits(item.root3d);
			renderPass3D.call(item, commandEncoder, onRender, colorView, depthView);
		}
	}
}();

module.exports = drawBitmap3D;
