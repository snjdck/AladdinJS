'use strict';

const RenderPass = require('../helper/RenderPass');
const {fetchView3D} = require('../Vulkan/resource');

const renderPass3D = RenderPass({
	colorAttachments:[{
		loadOp:'clear',//load
		clearValue:[0,0,0,0],//when loadOp is clear
		storeOp:'store',//discard
		view:null
	}],
	depthStencilAttachment:{
		depthLoadOp:'clear',//load
		depthClearValue:1,//[0,1],when depthLoadOp is clear
		depthStoreOp:'discard',//store
		depthReadOnly:false,
		stencilLoadOp:'clear',//load
		stencilClearValue:0,
		stencilStoreOp:'discard',//store
		stencilReadOnly:false,
		view:null
	}
});

function drawBitmap3D(commandEncoder, item){
	const {colorView, depthView, width, height} = fetchView3D(item);
	item.texture.rawTexture = colorView;
	item.texture.setUV(width, height, {x:0,y:0,width:item.width,height:item.height}, false);
	item.camera.collectDrawUnits(item.root3d);
	for(let renderPassEncoder of renderPass3D(commandEncoder, colorView, depthView)){
		renderPassEncoder.setViewport(0, 0, item.width, item.height, 0, 1);
		item.camera.draw();
	}
}

module.exports = drawBitmap3D;
