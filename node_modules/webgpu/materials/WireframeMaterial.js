'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const TextureMaterial = require('./TextureMaterial');

const maxCountPerDraw = 4;

const pipeline = {
	...TextureMaterial.pipelineDesc,
	groups: TextureMaterial.pipelineDesc.groups.slice(0, 2),
	fragment: {
		...TextureMaterial.pipelineDesc.fragment,
		code: `
			struct Input {
				@location(0) uv: vec2<f32>,
				@location(1) @interpolate(flat) instanceIndex: u32,
				@location(2) normal: vec3<f32>,
			};

			@fragment
			fn main(input: Input) -> @location(0) vec4<f32> {
				return vec4<f32>(1.0, 0.0, 1.0, 1.0);
			}
		`
	},
	primitive: {
		topology: 'line-list',
	}
};

class WireframeMaterial extends Material.Subclass({pipeline}, [Material.Utils.groupMesh, Material.Utils.cut(maxCountPerDraw)]){
	static onDrawBatched(drawUnitList, mesh){
		this.setBindGroup(1, [
			{binding:0, resource:{buffer:drawUnitList}},
			{binding:1, resource:{buffer:drawUnitList}},
		]);
		for(let subMesh of mesh.subMeshList){
			subMesh.setBuffers(this.vertexBuffers, 'indexWireframe');
			subMesh.draw(drawUnitList.length, 0, 'indexWireframe');
		}
	}
}

module.exports = WireframeMaterial;
