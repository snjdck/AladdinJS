'use strict';

const TextureMaterial = require('./TextureMaterial');
const Material = require('./Material');
const Vulkan = require('../Vulkan');
const {fetchBuffer, bufferCache} = require('../Vulkan/resource');
const {CommandEncoder, ComputePass} = require('../helper/CommandEncoder');

const pipeline22 = {
	groups: [[
		//{binding:0, visibility:GPUShaderStage.COMPUTE, buffer:{type:'read-only-storage'}},//read-only-storage, uniform
		{binding:1, visibility:GPUShaderStage.COMPUTE, buffer:{type:'storage'}},
	]],
	compute: {
		entryPoint: 'main',
		code: `

			struct Inputs {
				// workgroup_id is a uniform built-in value.
				@builtin(workgroup_id) wgid : vec3<u32>,
				// local_invocation_index is a non-uniform built-in value.
				@builtin(local_invocation_index) lid : u32
			}
			//@group(0) @binding(0) var<storage,read> aa: array<u32>;
			@group(0) @binding(1) var<storage,read_write> bb: array<u32>;

			@compute @workgroup_size(1)
			fn main(inputs : Inputs){
				var index: u32 = inputs.wgid.x * 3;
				var index2: u32 = inputs.wgid.x * 6;
				bb[index2] = index;
				bb[index2+1] = index+1;
				bb[index2+2] = index+1;
				bb[index2+3] = index+2;
				bb[index2+4] = index+2;
				bb[index2+5] = index;
			}
		`
	}
};

const Test = Material.Subclass(pipeline22);

const pipeline = {
	...TextureMaterial.pipelineDesc,
	groups: TextureMaterial.pipelineDesc.groups.slice(0, 2),
	fragment: {
		...TextureMaterial.pipelineDesc.fragment,
		code: `
			struct Input {
				@location(0) uv: vec2<f32>,
				@location(1) @interpolate(flat) instanceIndex: u32,
				@location(2) normal: vec3<f32>,
			};

			@fragment
			fn main(input: Input) -> @location(0) vec4<f32> {
				return vec4<f32>(1.0, 0.0, 1.0, 1.0);
			}
		`
	},
	primitive: {
		topology: 'line-list',
	}
};

class WireframeMaterial extends TextureMaterial.Subclass(pipeline){
	static onDraw(drawUnitList, mesh, renderPassEncoder){
		this.setBindGroup(renderPassEncoder, 1, [
			{binding:0, resource:{buffer:drawUnitList}},
			{binding:1, resource:{buffer:drawUnitList}},
		]);
		for(let subMesh of mesh.subMeshList){
			subMesh.setBuffers(renderPassEncoder, this.vertexBuffers, 'indexWireframe');
			subMesh.draw(renderPassEncoder, drawUnitList.length, 0, 'indexWireframe');
		}
		for(let commandEncoder of CommandEncoder(Vulkan.device)){
			for(let subMesh of mesh.subMeshList){
				//const buffer1 = bufferCache(subMesh.attributes.position, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC)
				//const buffer1 = fetchBuffer(3 * 4, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC);
				const buffer2 = fetchBuffer(subMesh.vertexCount * 2 * 4, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC);
				const buffer3 = fetchBuffer(subMesh.vertexCount * 2 * 4, GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST);
				for(let computePassEncoder of ComputePass(commandEncoder)){
					computePassEncoder.setPipeline(Test.pipeline);
					Test.setBindGroup(computePassEncoder, 0, [
						//{binding:0, resource:{buffer:buffer1}},
						{binding:1, resource:{buffer:buffer2}},
					]);
					computePassEncoder.dispatchWorkgroups(subMesh.vertexCount / 3);
				}
				commandEncoder.copyBufferToBuffer(buffer2, 0, buffer3, 0, subMesh.vertexCount * 2 * 4);
				subMesh.setBuffers(renderPassEncoder, this.vertexBuffers);
				renderPassEncoder.setIndexBuffer(buffer3, 'uint32');
				renderPassEncoder.drawIndexed(subMesh.vertexCount * 2, drawUnitList.length, 0, 0, 0);
			}
		}
	}
}

module.exports = WireframeMaterial;
