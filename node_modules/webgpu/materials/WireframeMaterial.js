'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const TextureMaterial = require('./TextureMaterial');

const pipeline = {
	...TextureMaterial.pipelineDict.pipeline,
	groups: [TextureMaterial.pipelineDict.pipeline.groups[0], [
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{}},
		{binding:1, visibility:GPUShaderStage.VERTEX, buffer:{}}
	]],
	fragment: {
		...TextureMaterial.pipelineDict.pipeline.fragment,
		code: `
			struct Input {
				@location(0) uv: vec2<f32>,
				@location(1) @interpolate(flat) instanceIndex: u32,
				@location(2) normal: vec3<f32>,
			};

			@fragment
			fn main(input: Input) -> @location(0) vec4<f32> {
				return vec4<f32>(1.0, 0.0, 1.0, 1.0);
			}
		`
	},
	primitive: {
		topology: 'line-list',
	}
};

class WireframeMaterial extends Material.Subclass({pipeline}){
	onDraw({entity}){
		const materialType = this.constructor;
		materialType.setBindGroup(1, [
			{binding:0, resource:{buffer:entity.worldTransform.rawData}},
			{binding:1, resource:{buffer:entity.copyBoneStateToTempBuffer(), size:256 << 4, dataSize:entity.skeleton.boneCount << 3}},
		]);
		for(let subMesh of entity.mesh.subMeshList){
			subMesh.setBuffers(materialType.vertexBuffers, 'indexWireframe');
			subMesh.draw(1, 0, 'indexWireframe');
		}
	}
}

module.exports = WireframeMaterial;
