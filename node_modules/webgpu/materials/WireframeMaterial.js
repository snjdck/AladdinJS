'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');

const pipelineDesc = {
	layout: ['0', '2_dynamic', '2_dynamic'],
	vertex: {
		module: 'vertex_3d',
		buffers: [{
			name: 'position',
			arrayStride: 3 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:0, format:'float32x3'}]
		}, {
			name: 'normal',
			arrayStride: 3 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:1, format:'float32x3'}]
		}, {
			name: 'uv',
			arrayStride: 2 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:2, format:'float32x2'}]
		}, {
			name: 'boneIndex',
			arrayStride: 1 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:3, format:'uint32'}]
		}]
	},
	fragment: {
		module: 'fragment_wireframe',
		targets:[{
			format: 'bgra8unorm',
			blend: ['transparent']
		}]
	},
	depthStencil: {
		format: 'depth24plus-stencil8',
		depthWriteEnabled: true,
		depthCompare: 'less-equal',
	},
	primitive: {
		topology: 'line-list',
	}
};

class WireframeMaterial extends Material.Subclass(
	pipelineDesc,
	{transform:1, bone:2}
){
	static onDraw(instanceCount, mesh){
		for(let subMesh of mesh.subMeshList){
			subMesh.setVertexBuffer(this.vertexBuffers);
			subMesh.setIndexBuffer('indexWireframe');
			subMesh.drawIndexed(instanceCount, 'indexWireframe');
		}
	}
}

module.exports = WireframeMaterial;
