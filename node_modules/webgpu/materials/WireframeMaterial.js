'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');

const pipelineDesc = {
	layout: ['0', '2_dynamic', '2_dynamic'],
	vertex: {
		module: 'vertex_3d',
		buffers: [{
			arrayStride: 9 << 2,
			stepMode: 'vertex',
			attributes: ['float32x3', 'float32x3', 'float32x2', 'uint32']
		}]
	},
	fragment: {
		module: 'fragment_wireframe',
		targets:[{
			format: 'bgra8unorm',
			blend: ['transparent']
		}]
	},
	depthStencil: {
		format: 'depth24plus-stencil8',
		depthWriteEnabled: true,
		depthCompare: 'less-equal',
	},
	primitive: {
		topology: 'line-list',
	}
};

class WireframeMaterial extends Material.Subclass(
	pipelineDesc,
	{transform:1, bone:2}
){
	static setIndexBuffer(mesh){
		Vulkan.renderPassEncoder.setIndexBuffer(mesh.wireframeIndexBuffer, 'uint16');
	}
	static onDraw(instanceCount, mesh){
		Vulkan.renderPassEncoder.drawIndexed(mesh.wireframeIndexCount, instanceCount);
	}
}

module.exports = WireframeMaterial;
