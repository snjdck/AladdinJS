'use strict';

const TextureMaterial = require('./TextureMaterial');
const Pipeline = require('./Pipeline');
const Vulkan = require('../Vulkan');
const {fetchBuffer, bufferCache} = require('../Vulkan/resource');
const {CommandEncoder, ComputePass} = require('../helper/CommandEncoder');

const pipeline01 = new Pipeline({
	groups: [[
		{binding:1, visibility:GPUShaderStage.COMPUTE, buffer:{type:'storage'}},
	]],
	compute: {
		entryPoint: 'main',
		code: `
			struct Input {
				@builtin(workgroup_id) wgid: vec3<u32>,
				@builtin(local_invocation_id) liid: vec3<u32>,
			}

			@group(0) @binding(0) var<storage,read> _from: array<u32>;
			@group(0) @binding(1) var<storage,read_write> _to: array<u32>;

			@compute @workgroup_size(3)
			fn main(input: Input){
				var offset: u32 = input.liid.x;
				var source: u32 = input.wgid.x * 3;
				var dest: u32 = input.wgid.x * 6 + offset * 2;

				_to[dest] = source + offset;
				_to[dest+1] = source + (offset + 1) % 3;
			}

			@compute @workgroup_size(3)
			fn mainIndexed(input: Input){
				var offset: u32 = input.liid.x;
				var source: u32 = input.wgid.x * 3;
				var dest: u32 = input.wgid.x * 6 + offset * 2;

				_to[dest] = _from[source + offset];
				_to[dest+1] = _from[source + (offset + 1) % 3];
			}
		`
	}
});

const pipeline02 = new Pipeline({
	groups: [[
		{binding:0, visibility:GPUShaderStage.COMPUTE, buffer:{type:'read-only-storage'}},//read-only-storage, uniform
		{binding:1, visibility:GPUShaderStage.COMPUTE, buffer:{type:'storage'}},
	]],
	compute: {
		entryPoint: 'mainIndexed',
		code: pipeline01.desc.compute.code
	}
});

const pipeline = {
	...TextureMaterial.pipelineDesc,
	groups: TextureMaterial.pipelineDesc.groups.slice(0, 2),
	fragment: {
		...TextureMaterial.pipelineDesc.fragment,
		code: `
			struct Input {
				@location(0) uv: vec2<f32>,
				@location(1) @interpolate(flat) instanceIndex: u32,
				@location(2) normal: vec3<f32>,
			};

			@fragment
			fn main(input: Input) -> @location(0) vec4<f32> {
				return vec4<f32>(1.0, 0.0, 1.0, 1.0);
			}
		`
	},
	primitive: {
		topology: 'line-list',
	}
};

class WireframeMaterial extends TextureMaterial.Subclass(pipeline){
	static onDraw(drawUnitList, mesh, renderPassEncoder){
		this.setBindGroup(renderPassEncoder, 1, [
			{binding:0, resource:{buffer:drawUnitList}},
			{binding:1, resource:{buffer:drawUnitList}},
		]);
		/*
		for(let subMesh of mesh.subMeshList){
			subMesh.setBuffers(renderPassEncoder, this.vertexBuffers, 'indexWireframe');
			subMesh.draw(renderPassEncoder, drawUnitList.length, 0, 'indexWireframe');
		}
		*/
		for(let commandEncoder of CommandEncoder(Vulkan.device)){
			for(let subMesh of mesh.subMeshList){
				const buffer = fetchBuffer(subMesh.vertexCount * 2 * 4, GPUBufferUsage.INDEX | GPUBufferUsage.STORAGE);
				for(let computePassEncoder of ComputePass(commandEncoder)){
					if(subMesh.attributes.index){
						const indexData = bufferCache(subMesh.attributes.index, GPUBufferUsage.STORAGE);
						pipeline02.setPipeline(computePassEncoder);
						pipeline02.setBindGroup(computePassEncoder, 0, [
							{binding:0, resource:{buffer:indexData}},
							{binding:1, resource:{buffer}},
						]);
					}else{
						pipeline01.setPipeline(computePassEncoder);
						pipeline01.setBindGroup(computePassEncoder, 0, [
							{binding:1, resource:{buffer}},
						]);
					}
					computePassEncoder.dispatchWorkgroups(subMesh.vertexCount / 3);
				}
				//commandEncoder.copyBufferToBuffer(buffer2, 0, buffer3, 0, subMesh.vertexCount * 2 * 4);
				subMesh.setBuffers(renderPassEncoder, this.vertexBuffers);
				renderPassEncoder.setIndexBuffer(buffer, 'uint32');
				renderPassEncoder.drawIndexed(subMesh.vertexCount * 2, drawUnitList.length, 0, 0, 0);
			}
		}
	}
}

module.exports = WireframeMaterial;
