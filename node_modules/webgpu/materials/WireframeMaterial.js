'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const {vertex_3d} = require('./@shader_codes');

const pipelineDesc = {
	groups: [[
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{}},
		{binding:1, visibility:GPUShaderStage.FRAGMENT, sampler:{}}
	], [
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{hasDynamicOffset: true}}
	], [
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{hasDynamicOffset: true}}
	]],
	vertex: {
		buffers: [{
			name: 'position',
			arrayStride: 3 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:0, offset: 0, format:'float32x3'}]
		}, {
			name: 'normal',
			arrayStride: 3 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:1, offset: 0, format:'float32x3'}]
		}, {
			name: 'uv',
			arrayStride: 2 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:2, offset: 0, format:'float32x2'}]
		}, {
			name: 'boneIndex',
			arrayStride: 1 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:3, offset: 0, format:'uint32'}]
		}],
		entryPoint: 'main',
		code: vertex_3d
	},
	fragment: {
		targets:[{
			format: 'bgra8unorm',
			blend: {
				color:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'},
				alpha:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'}
			}
		}],
		entryPoint: 'main',
		code: `
			struct Input {
				@location(0) uv: vec2<f32>,
				@location(1) @interpolate(flat) instanceIndex: u32,
				@location(2) normal: vec3<f32>,
			};

			@fragment
			fn main(input: Input) -> @location(0) vec4<f32> {
				return vec4<f32>(1.0, 0.0, 1.0, 1.0);
			}
		`
	},
	depthStencil: {
		format: 'depth24plus-stencil8',
		depthWriteEnabled: true,
		depthCompare: 'less-equal',
	},
	primitive: {
		topology: 'line-list',
	}
};

class WireframeMaterial extends Material.Subclass(
	{pipeline: pipelineDesc},
	{transform:1, bone:2}
){
	static onDrawSubMesh(instanceCount, subMesh){
		subMesh.setBuffers(this.vertexBuffers, 'indexWireframe');
		subMesh.draw(instanceCount, 0, 'indexWireframe');
	}
}

module.exports = WireframeMaterial;
