'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');

const transformSlot = require('./slots/transformSlot');
const boneSlot = require('./slots/boneSlot');

class WireframeMaterial extends Material.Subclass(
	() => Vulkan.pipelineDict.pipelineWireframe,
	() => [transformSlot(1), boneSlot(2)]
){
	static doDraw(instanceCount){
		const {renderPassEncoder, currentMesh} = Vulkan;
		renderPassEncoder.drawIndexed(currentMesh.wireframeIndexCount, instanceCount);
	}
	static setIndexBuffer(){
		const {renderPassEncoder, currentMesh:mesh} = Vulkan;
		if(!mesh._wireframeIndexBuffer){
			const rawData = mesh.indexData;
			const indexCount = rawData ? rawData.length : mesh.vertexCount;
			const indexData = new Uint16Array(indexCount << 1);
			if(rawData){
				for(let i=0; i<indexCount; i+=3){
					indexData.set([rawData[i], rawData[i+1], rawData[i+1], rawData[i+2], rawData[i+2], rawData[i]], i << 1);
				}
			}else{
				for(let i=0; i<indexCount; i+=3){
					indexData.set([i, i+1, i+1, i+2, i+2, i], i << 1);
				}
			}
			mesh.wireframeIndexCount = indexData.length;
			mesh._wireframeIndexBuffer = Vulkan.createBufferMapped(GPUBufferUsage.INDEX, indexData);
		}
		renderPassEncoder.setIndexBuffer(mesh._wireframeIndexBuffer, 'uint16');
	}
}

module.exports = WireframeMaterial;
