'use strict';

const TextureMaterial = require('./TextureMaterial');
const {fetchAnimationTexture} = require('../Vulkan/resource');
const pipeline = {
	...TextureMaterial.pipelineDesc,
	groups: TextureMaterial.pipelineDesc.groups.slice(0, 2),
	fragment: {
		...TextureMaterial.pipelineDesc.fragment,
		entryPoint:'mainColor'
	},
	primitive: {
		topology: 'line-list',
	}
};

class WireframeMaterial extends TextureMaterial.Subclass(pipeline){
	static onDraw(drawUnitList, mesh, renderPassEncoder){
		const {textureView} = fetchAnimationTexture(drawUnitList[0].entity.skeleton.mesh);
		this.setResources(renderPassEncoder, {
			'worldMatrixList': {buffer:drawUnitList},
			'animationTexture':textureView,
			'animationTextureInfo':{buffer:drawUnitList.map(v => v.entity.skeleton)}
		});
		for(let i=0; i<mesh.subMeshList.length; ++i){
			const subMesh = mesh.subMeshList[i];
			const {position, normal, uv, boneIndex} = subMesh.buffers;
			this.setResources(renderPassEncoder, {position, normal, uv, boneIndex});
			subMesh.draw(renderPassEncoder, drawUnitList.length, 0, 'indexWireframe');
		}
	}
}

module.exports = WireframeMaterial;
