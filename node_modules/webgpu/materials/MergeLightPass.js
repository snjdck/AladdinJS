'use strict';

const Pipeline = require('./Pipeline');

const pipeline = new Pipeline({
	groups: [[
		{name:'baseTexture', binding:0, visibility:GPUShaderStage.FRAGMENT, texture:{}},
		{name:'lightTexture', binding:1, visibility:GPUShaderStage.FRAGMENT, texture:{}},
	]],
	vertex: {
		entryPoint: 'main',
		code: `
			@vertex
			fn main(@builtin(vertex_index) vertex_index: u32) -> @builtin(position) vec4<f32> {
				let vertex = vec2<f32>(vec2(vertex_index >> 1, vertex_index & 1));
				return vec4<f32>(vertex * 2 - 1, 0, 1);
			}
		`
	},
	fragment: {
		targets:[{
			format: 'bgra8unorm',
			blend: {
				color:{srcFactor: 'one', dstFactor: 'one', operation: 'add'},
				alpha:{srcFactor: 'one', dstFactor: 'one', operation: 'add'},
			}
		}],
		entryPoint: 'main',
		code: `
			@group(0) @binding(0) var texture_color: texture_2d<f32>;
			@group(0) @binding(1) var texture_light: texture_2d<f32>;

			@fragment
			fn main(@builtin(position) frag_coord: vec4<f32>) -> @location(0) vec4<f32> {
				let coords = vec2<u32>(frag_coord.xy);
				let baseColor = textureLoad(texture_color, coords, 0);
				let lightColor = textureLoad(texture_light, coords, 0);
				//return vec4<f32>(baseColor.rgb, baseColor.a);
				return vec4<f32>(/*baseColor.rgb */ lightColor.rgb, baseColor.a);
			}
		`
	},
	primitive: {
		// (0, 1, 2), (2, 1, 3), (2, 3, 4), (4, 3, 5)
		// 0-2-4
		// |/|/|
		// 1-3-5
		topology: 'triangle-strip',
	}
});

exports.pipeline = pipeline;
