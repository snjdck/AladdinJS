'use strict';

const Pipeline = require('./Pipeline');

const pipeline = new Pipeline({
	groups: [[
		{binding:0, visibility:GPUShaderStage.FRAGMENT, texture:{sampleType:'float'}},//base color
		{binding:1, visibility:GPUShaderStage.FRAGMENT, texture:{sampleType:'float'}},//light
		{binding:3, visibility:GPUShaderStage.FRAGMENT, sampler:{type:'filtering'}, default:{}},
	]],
	vertex: {
		buffers: [{
			arrayStride: 2 << 2,
			stepMode: 'instance',
			attributes: [
				{shaderLocation: 0, offset: 0, format: 'float32x2'},
			]
		}],
		entryPoint: 'main',
		code: `
			struct Input {
				@builtin(vertex_index) vertex_index: u32,
				@location(0) uv_scale: vec2<f32>,
			}

			struct Output {
				@builtin(position) position: vec4<f32>,
				@location(0) uv: vec2<f32>,
				//@location(1) xy: vec2<f32>,
			}

			@vertex
			fn main(input: Input) -> Output {
				var vertex: vec2<f32>;
				vertex.x = f32(input.vertex_index >> 1);
				vertex.y = f32(input.vertex_index & 1);

				var position = vertex * 2 - 1;
				position.y = -position.y;

				var output: Output;
				output.position = vec4<f32>(position, 0, 1);
				output.uv = vertex * input.uv_scale;
				//output.xy = position;
				return output;
			}
		`
	},
	fragment: {
		targets:[{
			format: 'bgra8unorm',
			blend: {
				color:{srcFactor: 'one', dstFactor: 'one', operation: 'add'},
				alpha:{srcFactor: 'one', dstFactor: 'one', operation: 'add'},
			}
		}],
		entryPoint: 'main',
		code: `
			@group(0) @binding(0) var texture_color: texture_2d<f32>;
			@group(0) @binding(1) var texture_light: texture_2d<f32>;

			@group(0) @binding(3) var sampler_filtering: sampler;

			@fragment
			fn main(
				@location(0) uv: vec2<f32>,
			) -> @location(0) vec4<f32> {
				let baseColor = textureSample(texture_color, sampler_filtering, uv);
				let lightColor = textureSample(texture_light, sampler_filtering, uv);
				return vec4<f32>(baseColor.rgb * lightColor.rgb, baseColor.a);
			}
		`
	},
	primitive: {
		// (0, 1, 2), (2, 1, 3), (2, 3, 4), (4, 3, 5)
		// 0-2-4
		// |/|/|
		// 1-3-5
		topology: 'triangle-strip',
	}
});

exports.pipeline = pipeline;
