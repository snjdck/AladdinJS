'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const {attributes, blend} = require('./helper');

const {groupDrawCallback} = require('../helper/groupDraw');
const transformSlot = require('./slots/transformSlot');
const boneSlot = require('./slots/boneSlot');

const pipelineDesc = {
	layout: ['0', '2_dynamic', '2_dynamic', '3'],
	vertex: {
		module: 'vertex_3d',
		buffers: [{
			arrayStride: 9 << 2,
			stepMode: 'vertex',
			attributes: attributes('float32x3', 'float32x3', 'float32x2', 'uint32')
		}]
	},
	fragment: {
		module: 'fragment_3d',
		targets:[{
			format: 'bgra8unorm',
			blend: blend('transparent')
		}]
	},
	depthStencil: {
		format: 'depth24plus-stencil8',
		depthWriteEnabled: true,
		depthCompare: 'less-equal',
	}
};

class TextureMaterial extends Material.Subclass(
	pipelineDesc,
	() => [transformSlot(1), boneSlot(2)]
){
	static onDraw(entityList, bindGroupInfoList){
		const {renderPassEncoder, currentMesh} = Vulkan;
		//for(const subMesh of currentMesh.subMeshList){
		for(let i=0, n=currentMesh.subMeshList.length; i<n; ++i){
			const subMesh = currentMesh.subMeshList[i];
			if(!subMesh.texture)continue;
			let texture = Vulkan.fetchTexture(subMesh.texture);
			if(!texture)continue;
			renderPassEncoder.setBindGroup(3, Vulkan.createBindGroup(
				'3', [
				texture.createView(),
			]));
			super.onDraw(entityList, bindGroupInfoList, i, entityList);
		}
	}
	static doDraw(instanceCount, instanceOffset, subMeshIndex, entityList){
		const {renderPassEncoder, currentMesh} = Vulkan;
		const {vertexCount, vertexOffset} = currentMesh.subMeshList[subMeshIndex];
		groupDrawCallback(entityList, instanceOffset, instanceCount, ({subMeshFilter}) => subMeshFilter & (1 << subMeshIndex), (offset, count) => {
			renderPassEncoder.draw(vertexCount, count, vertexOffset, offset);
		});
	}
	constructor(){
		super();
	}
}

module.exports = TextureMaterial;
