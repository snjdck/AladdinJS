'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');

const {delayNew} = require('utils/cache');
const transformSlot = require('./slots/transformSlot');
const boneSlot = require('./slots/boneSlot');

class TextureMaterial extends Material
{
	static get pipeline(){
		return Vulkan.pipelineDict.pipeline;
	}
	static bindGroupSlots = delayNew(() => [transformSlot(), boneSlot()]);
	static bindIndexList = [1,2];
	static onDraw(entityList, bindGroupInfoList){
		const {renderPassEncoder, device, currentMesh} = Vulkan;
		for(const subMesh of currentMesh.subMeshList){
			if(!subMesh.texture)continue;
			let texture = Vulkan.fetchTexture(subMesh.texture);
			if(!texture)continue;
			renderPassEncoder.setBindGroup(3, device.createBindGroup({
				layout: Vulkan.bindGroupLayoutDict.bindGroupLayout3,
				entries: [{
					binding: 0,
					resource: texture.createView()
				}]
			}));
			super.onDraw(entityList, bindGroupInfoList, subMesh);
		}
	}
	static doDraw(instanceCount, subMesh){
		const {vertexCount, vertexOffset} = subMesh;
		const {renderPassEncoder} = Vulkan;
		renderPassEncoder.draw(vertexCount, instanceCount, vertexOffset);
	}
	constructor(){
		super();
	}
}

module.exports = TextureMaterial;
