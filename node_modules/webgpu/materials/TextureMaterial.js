'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');

class TextureMaterial extends Material
{
	//static maxCountPerBatch = 10;
	static get pipeline(){
		return Vulkan.pipelineDict.pipeline;
	}
	static onDraw(infoList){
		const {transformUniformCache, boneDataCache} = Vulkan.transformUniformMgr;
		const {renderPassEncoder, device, currentMesh} = Vulkan;
		const {maxCountPerBatch} = this;
		for(const subMesh of currentMesh.subMeshList){
			if(!subMesh.texture)continue;
			const {vertexCount, vertexOffset} = subMesh;
			let texture = Vulkan.fetchTexture(subMesh.texture);
			if(!texture)continue;
			renderPassEncoder.setBindGroup(3, device.createBindGroup({
				layout: Vulkan.bindGroupLayoutDict.bindGroupLayout3,
				entries: [{
					binding: 0,
					resource: texture.createView()
				}]
			}));
			for(const [index, offset, count] of infoList){
				renderPassEncoder.setBindGroup(1, transformUniformCache(index));
				renderPassEncoder.setBindGroup(2, boneDataCache(index));
				renderPassEncoder.draw(vertexCount, count, vertexOffset, offset);
			}
		}
	}
	constructor(){
		super();
	}
}

module.exports = TextureMaterial;
