'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const {vertex_3d, fragment_3d} = require('./@shader_codes');

const groupDraw = require('../helper/groupDraw');

const pipelineDesc = {
	groups: [[
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{}},
		{binding:1, visibility:GPUShaderStage.FRAGMENT, sampler:{}, default:{magFilter:'linear', minFilter:'linear', addressModeU:'repeat', addressModeV:'repeat', addressModeW:'repeat'}}
	], [
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{hasDynamicOffset: true}}
	], [
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{hasDynamicOffset: true}}
	], [
		{binding:0, visibility:GPUShaderStage.FRAGMENT, texture:{}}
	]],
	vertex: {
		buffers: [{
			name: 'position',
			arrayStride: 3 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:0, offset: 0, format:'float32x3'}]
		}, {
			name: 'normal',
			arrayStride: 3 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:1, offset: 0, format:'float32x3'}]
		}, {
			name: 'uv',
			arrayStride: 2 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:2, offset: 0, format:'float32x2'}]
		}, {
			name: 'boneIndex',
			arrayStride: 1 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:3, offset: 0, format:'uint32'}]
		}],
		entryPoint: 'main',
		code: vertex_3d
	},
	fragment: {
		targets:[{
			format: 'bgra8unorm',
			blend: {
				color:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'},
				alpha:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'}
			}
		}],
		entryPoint: 'main',
		code: fragment_3d
	},
	depthStencil: {
		format: 'depth24plus-stencil8',
		depthWriteEnabled: true,
		depthCompare: 'less-equal',
	}
};

class TextureMaterial extends Material.Subclass(
	{pipeline: pipelineDesc},
	{transform:1, bone:2}
){
	static usageList = [];
	static *calcDrawIterator(entityList, mesh){
		const subMeshCount = mesh.subMeshList.length;
		let offset = 0;
		for(let value of super.calcDrawIterator(entityList)){
			for(let i=0; i<subMeshCount; ++i){
				this.usageList[i] = calcMaterialUsage(entityList, offset, value, 1 << i);
			}
			offset += value;
			yield value;
		}
	}

	static onDrawSubMesh(instanceCount, subMesh, i){
		if(!subMesh.texture)return;
		const texture = Vulkan.loadTexture(subMesh.texture, false);
		if(!texture)return;
		const usage = this.usageList[i];
		if(usage == 0)return;
		Vulkan.renderPassEncoder.setBindGroup(3, this.createBindGroup(3, [{binding:0, resource:texture.createView()}]));
		subMesh.setBuffers(this.vertexBuffers);
		for(const [offset, count] of groupDraw(i => usage & 1 << i, instanceCount)){
			subMesh.draw(count, offset);
		}
	}

	constructor(subMeshFilter=0xFFFFFFFF){
		super();
		this.subMeshFilter = subMeshFilter;
	}
}

function calcMaterialUsage(entityList, offset, count, mask){
	let value = 0;
	for(let i=0; i<count; ++i){
		if(entityList[offset+i].material.subMeshFilter & mask){
			value |= 1 << i;
		}
	}
	return value;
}

module.exports = TextureMaterial;
