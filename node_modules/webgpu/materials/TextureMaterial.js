'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const groupDraw = require('../helper/groupDraw');
/*

unorm = unsigned normalized
snorm = signed normalized
uint = unsigned int
sint = signed int
float = floating point
const formatSize = {
	'uint8x2': 2, 'unorm8x2': 2, 'uint16x2': 4, 'unorm16x2': 4,
	'uint8x4': 4, 'unorm8x4': 4, 'uint16x4': 8, 'unorm16x4': 8,
	'sint8x2': 2, 'snorm8x2': 2, 'sint16x2': 4, 'snorm16x2': 4,
	'sint8x4': 4, 'snorm8x4': 4, 'sint16x4': 8, 'snorm16x4': 8,
	
	'uint32': 4, 'uint32x2': 8, 'uint32x3': 12, 'uint32x4': 16,
	'sint32': 4, 'sint32x2': 8, 'sint32x3': 12, 'sint32x4': 16,
	
	'float32': 4, 'float32x2': 8, 'float32x3': 12, 'float32x4': 16,

	'float16x2': 4, 'float16x4': 8,
};
enum GPUBlendFactor {
	'zero', 'one',
	'src', 'one-minus-src', 'src-alpha', 'one-minus-src-alpha',
	'dst', 'one-minus-dst', 'dst-alpha', 'one-minus-dst-alpha',
	'constant', 'one-minus-constant',
	'src-alpha-saturated'
};
enum GPUBlendOperation {
	'add', 'subtract', 'reverse-subtract', 'min', 'max'
};
*/
const maxCountPerDraw = 4;
const maxCountPerDrawStatic = 100;
const maxBoneCount = 128;

const pipeline = {
	groups: [[
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{}},
		{binding:1, visibility:GPUShaderStage.FRAGMENT, sampler:{}, default:{magFilter:'linear', minFilter:'linear', addressModeU:'repeat', addressModeV:'repeat', addressModeW:'repeat'}}
	], [
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{}, temp:{array: new Float32Array(12 * maxCountPerDrawStatic), stride: 12, mapFn: v => v.entity.worldTransform.rawData}},
		{binding:1, visibility:GPUShaderStage.VERTEX, buffer:{}, temp:{array: new Float32Array(8 * maxBoneCount * maxCountPerDraw), stride: 8 * maxBoneCount, mapFn: ({entity}) => entity.copyBoneStateToTempBuffer().subarray(0, entity.skeleton.boneCount << 3)}}
	], [
		{binding:0, visibility:GPUShaderStage.FRAGMENT, texture:{}}
	]],
	vertex: {
		buffers: [{
			name: 'position',
			arrayStride: 4 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:0, offset: 0, format:'float32x3'}]
		}, {
			name: 'normal',
			arrayStride: 4 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:1, offset: 0, format:'float32x3'}]
		}, {
			name: 'uv',
			arrayStride: 2 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:2, offset: 0, format:'float32x2'}]
		}, {
			name: 'boneIndex',
			arrayStride: 1 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:3, offset: 0, format:'uint32'}]
		}],
		entryPoint: 'mainDynamic',
		code: `
			fn cast2mat(quaternion: vec4<f32>) -> mat3x3<f32> {
				let t0: vec3<f32> = quaternion.xyz * quaternion.yzx;	//xy,yz,zx
				let t1: vec3<f32> = quaternion.xyz * quaternion.www;	//xw,yw,zw
				let t2: vec4<f32> = quaternion * quaternion;			//xx,yy,zz,ww

				let a: vec3<f32> = t2.xyz + t2.www - t2.yzx - t2.zxy;
				let b: vec3<f32> = (t0     - t1.zxy) * 2.0;
				let c: vec3<f32> = (t0.zxy + t1.yzx) * 2.0;

				return mat3x3<f32>(
					a.x, b.x, c.x,
					c.y, a.y, b.y,
					b.z, c.z, a.z
				);
			}

			fn positionWorldToScreen(worldPosition: vec3<f32>) -> vec4<f32> {
				let cameraPosition: vec3<f32> = vec4<f32>(worldPosition, 1) * mvp.cameraMatrix;
				let screenPosition: vec4<f32> = vec4<f32>(cameraPosition, 1) * mvp.screenMatrix;
				return screenPosition;
			}
			
			struct MVP {
				screenMatrix: mat4x4<f32>,
				cameraMatrix: mat3x4<f32>,
			}

			@group(0) @binding(0) var<uniform> mvp: MVP;
			@group(1) @binding(0) var<uniform> worldMatrixList: array<mat3x4<f32>, ${maxCountPerDrawStatic}>;
			@group(1) @binding(1) var<uniform> boneStateList: array<vec4<f32>, ${2 * maxBoneCount * maxCountPerDraw}>;

			struct OutputForward {
				@builtin(position) position: vec4<f32>,
				@location(0) uv: vec2<f32>,
				//@location(1) @interpolate(flat) instanceIndex: u32,
				//@location(2) normal: vec3<f32>,
			}

			@vertex
			fn mainDynamic(
				@builtin(instance_index) instanceIndex: u32,
				@location(0) position: vec3<f32>,
				@location(1) normal: vec3<f32>,
				@location(2) uv: vec2<f32>,
				@location(3) boneIndex: u32,
			) -> OutputForward {
				let index: u32 = boneIndex << 1;//every object use 256 registers, every bone use two registers
				let boneMatrix: mat3x3<f32> = cast2mat(boneStateList[instanceIndex * ${maxBoneCount * 2} + index]);
				var worldPosition: vec3<f32> = (position * boneMatrix + boneStateList[index+1].xyz) * 1.0;//boneWeight
				var worldNormal: vec3<f32> = (normal * boneMatrix) * 1.0;

				let mat = worldMatrixList[instanceIndex];

				worldPosition = vec4<f32>(worldPosition, 1.0) * mat;
				worldNormal = worldNormal * mat3x3(mat[0].xyz, mat[1].xyz, mat[2].xyz);

				var output: OutputForward;
				output.position = positionWorldToScreen(worldPosition);
				output.uv = uv;
				return output;
			}

			@vertex
			fn mainStatic(
				@builtin(instance_index) instanceIndex: u32,
				@location(0) position: vec3<f32>,
			) -> @builtin(position) vec4<f32> {
				let mat = worldMatrixList[instanceIndex];
				return positionWorldToScreen(vec4<f32>(position, 1) * mat);
			}

			@vertex
			fn mainBillboard(
				@builtin(instance_index) instanceIndex: u32,
				@builtin(vertex_index) vertexIndex: u32,
			) -> OutputForward {
				let vertex = vec2<f32>(vec2(vertexIndex >> 1, vertexIndex & 1));
				let xyDiff = (vertex * 2 - 1) * boneStateList[0].xy;
				
				let worldMatrix = worldMatrixList[instanceIndex];
				let worldPosition = vec4<f32>(worldMatrix[0].w, worldMatrix[1].w, worldMatrix[2].w, 1);
				var cameraPosition = worldPosition * mvp.cameraMatrix;

				cameraPosition.x = cameraPosition.x + xyDiff.x;
				cameraPosition.y = cameraPosition.y + xyDiff.y;

				let screenPosition: vec4<f32> = vec4<f32>(cameraPosition, 1) * mvp.screenMatrix;

				var output: OutputForward;
				output.position = screenPosition;
				output.uv = vertex;
				return output;
			}

			@vertex
			fn mainDepth(
				@builtin(instance_index) instanceIndex: u32,
				@location(0) position: vec3<f32>,
				@location(3) boneIndex: u32,
			) -> @builtin(position) vec4<f32> {
				let index: u32 = boneIndex << 1;
				let boneMatrix: mat3x3<f32> = cast2mat(boneStateList[instanceIndex * ${maxBoneCount * 2} + index]);
				let worldPosition: vec3<f32> = position * boneMatrix + boneStateList[index+1].xyz;
				return positionWorldToScreen(vec4<f32>(worldPosition, 1) * worldMatrixList[instanceIndex]);
			}
		`
	},
	fragment: {
		targets:[{
			writeMask: GPUColorWrite.ALL,
			format: 'bgra8unorm',
			blend: {
				color:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'},
				alpha:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'}
			}
		}],
		entryPoint: 'main',
		code: `
			@group(0) @binding(1) var g_sampler: sampler;
			@group(2) @binding(0) var g_texture: texture_2d<f32>;

			@fragment
			fn main(@location(0) uv: vec2<f32>) -> @location(0) vec4<f32> {
				return textureSample(g_texture, g_sampler, uv);
			}

			@fragment
			fn mainColor() -> @location(0) vec4<f32> {
				return vec4<f32>(1, 0, 0, 1);
			}
		`
	},
	depthStencil: {
		format: 'depth24plus-stencil8',
		depthWriteEnabled: true,
		depthCompare: 'less-equal',//always, never, equal, not-equal, less, less-equal, greater, greater-equal
		stencilFront: {
			compare: 'always',
			depthFailOp: 'keep',//keep, zero, replace, invert, increment-clamp, decrement-clamp, increment-wrap, decrement-wrap
			failOp: 'keep',
			passOp: 'keep',
		},
		stencilBack: {
			compare: 'always',
			depthFailOp: 'keep',
			failOp: 'keep',
			passOp: 'keep',
		},
		stencilReadMask: 0xFFFFFFFF,
		stencilWriteMask: 0xFFFFFFFF,
		depthBias: 0,
		depthBiasSlopeScale: 0,
		depthBiasClamp: 0,
	},
	primitive: {
		cullMode: 'none',//none, back, front
		frontFace: 'ccw',//cw, ccw
		topology: 'triangle-list',//point-list, line-list, line-strip, triangle-list, triangle-strip
		stripIndexFormat: undefined,//uint16, uint32
		unclippedDepth: false
	}
};

class TextureMaterial extends Material.Subclass(pipeline, [Material.Utils.groupMesh]){
	static maxCountPerDraw = maxCountPerDraw;
	static onDraw(drawUnitList, {subMeshList}, renderPassEncoder){
		this.setBindGroup(renderPassEncoder, 1, [
			{binding:0, resource:{buffer:drawUnitList}},
			{binding:1, resource:{buffer:drawUnitList}},
		]);
		for(let i=0, n=subMeshList.length; i<n; ++i){
			const subMesh = subMeshList[i];
			const texture = this.onFetchTexture(subMesh.texture, drawUnitList[0].material);
			if(!texture)continue;
			this.setBindGroup(renderPassEncoder, 2, [{binding:0, resource:texture.createView()}]);
			subMesh.setBuffers(renderPassEncoder, this.vertexBuffers);
			const subMeshFilter = 1 << i;
			for(let [offset, count] of groupDraw(v => drawUnitList[v].material.subMeshFilter & subMeshFilter, drawUnitList.length)){
				subMesh.draw(renderPassEncoder, count, offset);
			}
		}
	}

	static onFetchTexture(texture){
		return Vulkan.loadTexture(texture, false);
	}

	constructor(subMeshFilter=0xFFFFFFFF){
		super();
		this.subMeshFilter = subMeshFilter;
	}
}

module.exports = TextureMaterial;
