'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');

const {groupDrawCallback} = require('../helper/groupDraw');
const transformSlot = require('./slots/transformSlot');
const boneSlot = require('./slots/boneSlot');

class TextureMaterial extends Material.Subclass(
	() => Vulkan.pipelineDict.pipeline,
	() => [transformSlot(1), boneSlot(2)]
){
	static onDraw(entityList, bindGroupInfoList){
		const {renderPassEncoder, device, currentMesh} = Vulkan;
		//for(const subMesh of currentMesh.subMeshList){
		for(let i=0, n=currentMesh.subMeshList.length; i<n; ++i){
			const subMesh = currentMesh.subMeshList[i];
			if(!subMesh.texture)continue;
			let texture = Vulkan.fetchTexture(subMesh.texture);
			if(!texture)continue;
			renderPassEncoder.setBindGroup(3, device.createBindGroup({
				layout: Vulkan.bindGroupLayoutDict.bindGroupLayout3,
				entries: [{
					binding: 0,
					resource: texture.createView()
				}]
			}));
			super.onDraw(entityList, bindGroupInfoList, i, entityList);
		}
	}
	static doDraw(instanceCount, instanceOffset, subMeshIndex, entityList){
		const {renderPassEncoder, currentMesh} = Vulkan;
		const {vertexCount, vertexOffset} = currentMesh.subMeshList[subMeshIndex];
		groupDrawCallback(entityList, instanceOffset, instanceCount, ({subMeshFilter}) => subMeshFilter & (1 << subMeshIndex), (offset, count) => {
			renderPassEncoder.draw(vertexCount, count, vertexOffset, offset);
		});
	}
	constructor(){
		super();
	}
}

module.exports = TextureMaterial;
