'use strict';

const Material = require('./Material');
const Pipeline = require('./Pipeline');
const {worldMatrixList} = require('./helper/DefaultGroupEntries');

const maxCountPerDraw = 100;

const pipeline = new Pipeline({
	groups: [
		[{name:'vpMatrix', type:'MVP', buffer:{}}, {name:'g_sampler', sampler:{}, default:{magFilter:'linear', minFilter:'linear', addressModeU:'repeat', addressModeV:'repeat', addressModeW:'repeat'}}],
		[worldMatrixList()],
		[{name:'baseTexture', texture:{}}, {name:'pointSize', type:'array<vec4<f32>, 1>', buffer:{}}]
	],
	vertex:{code:`
		#include<transform>
		struct OutputForward {
			@builtin(position) position: vec4<f32>,
			@location(0) uv: vec2<f32>,
		}
		@vertex OutputForward {
			let vertex = vec2<f32>(vec2(vertexIndex >> 1, vertexIndex & 1));
			let xyDiff = (vertex * 2 - 1) * pointSize[0].xy;
			
			let worldMatrix = worldMatrixList[instanceIndex];
			let worldPosition = vec4<f32>(worldMatrix[0].w, worldMatrix[1].w, worldMatrix[2].w, 1);
			var cameraPosition = worldPosition * vpMatrix.cameraMatrix;

			cameraPosition.x = cameraPosition.x + xyDiff.x;
			cameraPosition.y = cameraPosition.y + xyDiff.y;

			let screenPosition: vec4<f32> = vec4<f32>(cameraPosition, 1) * vpMatrix.screenMatrix;

			return OutputForward(screenPosition, vertex);
		}
	`
	},
	fragment:{
		targets:[{blend: 'one add one-minus-src;src-alpha add one-minus-src-alpha'}],
		code:`@fragment{return textureSample(baseTexture, g_sampler, uv);}`
	},
	depthStencil: {depthWriteEnabled: false},
	primitive: {topology: 'triangle-strip'}
});

class BillboardMaterial extends Material.Subclass(pipeline){
	static maxCountPerDraw = maxCountPerDraw;
	static onDraw(drawUnitList, renderPassEncoder){
		for(let [texture, itemList] of Map.groupBy(drawUnitList, fn)){
			this.setResources(renderPassEncoder, {
				'baseTexture': texture.createView(),
				'pointSize': {buffer:pointSize},
			});
			for(let v of Material.Utils.cut(maxCountPerDraw, itemList)){
				this.setResources(renderPassEncoder, {'worldMatrixList': {buffer:v}});
				renderPassEncoder.draw(4, v.length);
			}
		}
	}
	constructor(texture, width, height){
		super();
		this.texture = texture;
	}
}

const fn = v => v.material.texture;
const pointSize = new Float32Array([16, 32]);

module.exports = BillboardMaterial;
