'use strict';

const Material = require('./Material');
const TextureMaterial = require('./TextureMaterial');

const maxCountPerDraw = 100;

const pipeline = {
	...TextureMaterial.pipelineDesc,
	vertex: {
		...TextureMaterial.pipelineDesc.vertex,
		entryPoint: 'mainBillboard',
	},
	fragment: {
		...TextureMaterial.pipelineDesc.fragment,
		targets:[{
			format: 'bgra8unorm',
			blend: {
				color:{srcFactor: 'one', dstFactor: 'one-minus-src', operation: 'add'},
				alpha:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'}
			}
		}],
	},
	depthStencil: {
		...TextureMaterial.pipelineDesc.depthStencil,
		depthWriteEnabled: false,
	},
	primitive: {
		topology: 'triangle-strip',
	}
};

class BillboardMaterial extends Material.Subclass(pipeline, [Material.Utils.groupTexture]){
	static maxCountPerDraw = maxCountPerDraw;
	static onDraw(drawUnitList, texture, renderPassEncoder){
		this.setResources(renderPassEncoder, {
			'worldMatrixList': {buffer:drawUnitList},
			'boneStateList': {buffer:pointSize, size:pointBufferSize},
			'baseTexture': texture.createView()
		});
		renderPassEncoder.draw(4, drawUnitList.length);
	}
	constructor(texture, width, height){
		super();
		this.texture = texture;
	}
}

const pointBufferSize = TextureMaterial.pipelineDesc.groups[1][1].temp.array.byteLength;
const pointSize = new Float32Array([16, 32]);

module.exports = BillboardMaterial;
