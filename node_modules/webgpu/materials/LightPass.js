'use strict';

const Pipeline = require('./Pipeline');

const pipeline = new Pipeline({
	groups: [[
		{binding:0, visibility:GPUShaderStage.FRAGMENT, texture:{sampleType:'depth'}},//depth, sint, uint, unfilterable-float
		{binding:1, visibility:GPUShaderStage.FRAGMENT, texture:{sampleType:'unfilterable-float'}},//depth, sint, uint, unfilterable-float
		//{binding:2, visibility:GPUShaderStage.FRAGMENT, texture:{sampleType:'float'}},//depth, sint, uint, unfilterable-float
		{binding:3, visibility:GPUShaderStage.FRAGMENT, texture:{sampleType:'depth'}},
		{binding:4, visibility:GPUShaderStage.FRAGMENT, buffer:{}},
		{binding:5, visibility:GPUShaderStage.FRAGMENT, sampler:{type:'filtering'}, default:{}},
		{binding:6, visibility:GPUShaderStage.FRAGMENT, sampler:{type:'non-filtering'}, default:{}},
		{binding:7, visibility:GPUShaderStage.FRAGMENT, sampler:{type:'comparison'}, default:{compare:'less-equal'}},//greater, less-equal
	]],
	vertex: {
		buffers: [{
			arrayStride: 2 << 2,
			stepMode: 'instance',
			attributes: [
				{shaderLocation: 0, offset: 0, format: 'float32x2'},
			]
		}],
		entryPoint: 'main',
		code: `
			struct Input {
				@builtin(vertex_index) vertex_index: u32,
				@location(0) uv_scale: vec2<f32>,
			}

			struct Output {
				@builtin(position) position: vec4<f32>,
				@location(0) uv: vec2<f32>,
				@location(1) xy: vec2<f32>,
			}

			@vertex
			fn main(input: Input) -> Output {
				var vertex: vec2<f32>;
				vertex.x = f32(input.vertex_index >> 1);
				vertex.y = f32(input.vertex_index & 1);

				var position = vertex * 2 - 1;
				position.y = -position.y;

				var output: Output;
				output.position = vec4<f32>(position, 0, 1);
				output.uv = vertex * input.uv_scale;
				output.xy = position;
				return output;
			}
		`
	},
	fragment: {
		targets:[{
			format: 'bgra8unorm',
			blend: {
				color:{srcFactor: 'one', dstFactor: 'one', operation: 'add'},
				alpha:{srcFactor: 'one', dstFactor: 'one', operation: 'add'},
			}
		}],
		entryPoint: 'main',
		code: `
			fn calcNormal(v: vec2<f32>) -> vec3<f32> {
				let t = v * v;
				return vec3(v, sqrt(1 - t.x - t.y));
			}

			struct MVP {
				screenMatrix: mat4x4<f32>,
				@size(64) cameraMatrix: mat3x4<f32>,
			}
			@group(0) @binding(0) var texture_position: texture_depth_2d;
			@group(0) @binding(1) var texture_normal: texture_2d<f32>;
			//@group(0) @binding(2) var texture_color: texture_2d<f32>;
			@group(0) @binding(3) var texture_depth: texture_depth_2d;
			@group(0) @binding(4) var<uniform> light: array<MVP, 2>;

			@group(0) @binding(5) var sampler_filtering: sampler;
			@group(0) @binding(6) var sampler_non_filtering: sampler;
			@group(0) @binding(7) var sampler_depth: sampler_comparison;

			@fragment
			fn main(
				@location(0) uv: vec2<f32>,
				@location(1) position: vec2<f32>,
			) -> @location(0) vec4<f32> {
				var dir = vec3<f32>(1,0,1);
				dir = normalize(dir);
				let myDepth = textureSample(texture_position, sampler_non_filtering, uv);
				let tt = vec4<f32>(position, myDepth, 1) * light[1].screenMatrix;
				let worldPosition = vec4<f32>(tt.xyz / tt.w, 1) * light[1].cameraMatrix;
				
				let cameraPosition: vec3<f32> = vec4<f32>(worldPosition, 1) * light[0].cameraMatrix;
				let screenPosition: vec4<f32> = vec4<f32>(cameraPosition, 1) * light[0].screenMatrix;
				let depth_uv = (vec2(screenPosition.x, -screenPosition.y) / screenPosition.w + 1) * 0.5;

				//depth_ref <= the sampled depth
				let depth_value = textureSampleCompare(texture_depth, sampler_depth, depth_uv, screenPosition.z / screenPosition.w - 0.001);

				let normal = calcNormal(textureSample(texture_normal, sampler_non_filtering, uv).xy);
				let factor = dot(normal, dir);
				//let baseColor = textureSample(texture_color, sampler_filtering, uv);

				//return vec4<f32>(/*baseColor.rgb + */vec3(factor * depth_value), 1);
				return vec4<f32>(vec3<f32>(0.5) * factor * depth_value, 1);
			}
		`
	},
	primitive: {
		// (0, 1, 2), (2, 1, 3), (2, 3, 4), (4, 3, 5)
		// 0-2-4
		// |/|/|
		// 1-3-5
		topology: 'triangle-strip',
	}
});

exports.pipeline = pipeline;
