'use strict';

const Pipeline = require('./Pipeline');

const pipeline = new Pipeline({
	groups: [[
		{binding:0, visibility:GPUShaderStage.FRAGMENT, sampler:{type:'non-filtering'}, default:{}},
		{binding:1, visibility:GPUShaderStage.FRAGMENT, texture:{sampleType:'unfilterable-float'}},//depth, sint, uint, unfilterable-float
	]],
	vertex: {
		buffers: [{
			arrayStride: 2 << 2,
			stepMode: 'instance',
			attributes: [
				{shaderLocation: 0, offset: 0, format: 'float32x2'},
			]
		}],
		entryPoint: 'main',
		code: `
			struct Input {
				@builtin(vertex_index) vertex_index: u32,
				@location(0) uv_scale: vec2<f32>,
			}

			struct Output {
				@builtin(position) position: vec4<f32>,
				@location(0) uv: vec2<f32>,
			}

			@vertex
			fn main(input: Input) -> Output {
				var vertex: vec2<f32>;
				vertex.x = f32(input.vertex_index >> 1);
				vertex.y = f32(input.vertex_index & 1);
				var position = vertex * 2 - 1;

				var output: Output;
				output.position = vec4<f32>(position.x, -position.y, 0, 1);
				output.uv = vertex * input.uv_scale;
				return output;
			}
		`
	},
	fragment: {
		targets:[{
			format: 'bgra8unorm',
			blend: {
				color:{srcFactor: 'one', dstFactor: 'one-minus-src', operation: 'add'},
				alpha:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'}
			}
		}],
		entryPoint: 'main',
		code: `
			@group(0) @binding(0) var mySampler: sampler;
			@group(0) @binding(1) var myTexture: texture_2d<f32>;

			@fragment
			fn main(@location(0) uv: vec2<f32>) -> @location(0) vec4<f32> {
				return textureSample(myTexture, mySampler, uv);
			}
		`
	},
	primitive: {
		// (0, 1, 2), (2, 1, 3), (2, 3, 4), (4, 3, 5)
		// 0-2-4
		// |/|/|
		// 1-3-5
		topology: 'triangle-strip',
	}
});

exports.pipeline = pipeline;
