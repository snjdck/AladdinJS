'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const UniformBufferSlotCache = require('../helper/UniformBufferSlotCache');

const {delayNew} = require('utils/cache');
const transformSlot = require('./slots/transformSlot');
const boneSlot = require('./slots/boneSlot');

class ColorMaterial extends Material
{
	static get pipeline(){
		return Vulkan.pipelineDict.pipelineColor;
	}
	static bindGroupSlots = delayNew(() => [transformSlot(), boneSlot(), colorSlot()]);
	static bindIndexList = [1,2,3];
	static doDraw(instanceCount){
		const {renderPassEncoder, currentMesh} = Vulkan;
		renderPassEncoder.draw(currentMesh.vertexCount, instanceCount);
	}
	
	constructor(color){
		super();
		this.color = color;
	}
}

const colorSlot = delayNew(() => {
	let slot = new UniformBufferSlotCache(
		Vulkan.bindGroupLayoutDict.bindGroupLayout4,
		256,
		({material}) => new Float32Array(material.color)
	);
	Vulkan.events.addEventListener('update', () => slot.clear());
	return slot;
});

module.exports = ColorMaterial;
