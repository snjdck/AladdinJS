'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const {attributes, blend} = require('./helper');

const transformSlot = require('./slots/transformSlot');
const boneSlot = require('./slots/boneSlot');
const colorSlot = require('./slots/colorSlot');

const pipelineDesc = {
	layout: ['0', '2_dynamic', '2_dynamic', '4'],
	vertex: {
		module: 'vertex_3d',
		buffers: [{
			arrayStride: 9 << 2,
			stepMode: 'vertex',
			attributes: attributes('float32x3', 'float32x3', 'float32x2', 'uint32')
		}]
	},
	fragment: {
		module: 'fragment_3d_color',
		targets:[{
			format: 'bgra8unorm',
			blend: blend('transparent')
		}]
	},
	depthStencil: {
		format: 'depth24plus-stencil8',
		depthWriteEnabled: true,
		depthCompare: 'less-equal',
	}
};

class ColorMaterial extends Material.Subclass(
	pipelineDesc,
	() => [transformSlot(1), boneSlot(2), colorSlot(3)]
){
	static doDraw(instanceCount){
		const {renderPassEncoder, currentMesh} = Vulkan;
		renderPassEncoder.draw(currentMesh.vertexCount, instanceCount);
	}
	
	constructor(color){
		super();
		this.color = color;
	}
}

module.exports = ColorMaterial;
