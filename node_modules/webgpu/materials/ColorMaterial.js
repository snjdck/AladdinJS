'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const SlotCache = require('../helper/SlotCache');

const {delayNew} = require('utils/cache');
const transformSlot = require('./slots/transformSlot');
const boneSlot = require('./slots/boneSlot');

class ColorMaterial extends Material
{
	static get pipeline(){
		return Vulkan.pipelineDict.pipelineColor;
	}
	static bindGroupSlots = delayNew(() => [transformSlot(), boneSlot(), colorSlot()]);
	static onDraw(entityList, infoList, boneInfoList, colorInfoList){
		const {renderPassEncoder, currentMesh} = Vulkan;
		renderPassEncoder.setBindGroup(1, transformSlot().getBindGroup(infoList[0][0]), [infoList[0][1] << 8]);
		renderPassEncoder.setBindGroup(2, boneSlot().getBindGroup(boneInfoList[0][0]), [boneInfoList[0][1] << 12]);
		renderPassEncoder.setBindGroup(3, colorSlot().getBindGroup(colorInfoList[0][0]), [colorInfoList[0][1] << 8]);
		renderPassEncoder.draw(currentMesh.vertexCount, boneInfoList[0][2], 0, 0);
		return;
		for(const [index, offset, count] of infoList){
			renderPassEncoder.setBindGroup(3, colorSlot().getBindGroup(index), [0]);
			renderPassEncoder.setBindGroup(1, transformSlot().getBindGroup(index), [0]);
			renderPassEncoder.setBindGroup(2, boneSlot().getBindGroup(index), [0]);
			if(Vulkan.currentCamera.cullEnabled){
				for(const subMesh of currentMesh.subMeshList){
					const {vertexCount, vertexOffset} = subMesh;
					renderPassEncoder.draw(vertexCount, count, vertexOffset, offset);
				}
			}else{
				renderPassEncoder.draw(currentMesh.vertexCount, count, 0, offset);
			}
		}
	}

	static get bindGroupSlots(){
		return [colorSlot()];
	}
	
	constructor(color){
		super();
		this.color = color;
	}
}

const colorSlot = delayNew(() => {
	let slot = new SlotCache(
		Vulkan.bindGroupLayoutDict.bindGroupLayout4,
		10,//10 * 4 * 4,
		256,
		instance => new Float32Array(instance.getMaterial(ColorMaterial).color)
	);
	Vulkan.events.addEventListener('update', () => slot.clear());
	return slot;
});

module.exports = ColorMaterial;
