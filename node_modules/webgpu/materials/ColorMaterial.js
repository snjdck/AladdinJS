'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const TextureMaterial = require('./TextureMaterial');

const pipeline = {
	...TextureMaterial.pipelineDict.pipeline,
	groups: [TextureMaterial.pipelineDict.pipeline.groups[0], [
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{}},
		{binding:1, visibility:GPUShaderStage.VERTEX, buffer:{}},
		{binding:2, visibility:GPUShaderStage.FRAGMENT, buffer:{}}
	]],
	fragment: {
		...TextureMaterial.pipelineDict.pipeline.fragment,
		code: `
			struct COLOR_BLOCK {
				colorList: array<vec4<f32>, 1>,
			};

			@binding(2) @group(1) var<uniform> colorBlock: COLOR_BLOCK;

			struct Input {
				@location(0) uv: vec2<f32>,
				@location(1) @interpolate(flat) instanceIndex: u32,
				@location(2) normal: vec3<f32>,
			};

			struct Output {
				@location(0) color: vec4<f32>,
			};

			@fragment
			fn main(input: Input) -> Output {
				var base: f32 = 0.0;
				var factor: f32 = dot(normalize(vec3<f32>(1.0, 0.0, 1.0)), normalize(input.normal));
				factor = base + (1.0 - base) * max(factor, 0.0);
				var baseColor: vec4<f32> = colorBlock.colorList[input.instanceIndex << 4u];
				var output: Output;
				output.color = vec4<f32>(baseColor.rgb * factor, baseColor.a);
				return output;
			}
		`
	},
};

class ColorMaterial extends Material.Subclass({pipeline}){
	constructor(color){
		super();
		this.color = Float32Array.from(color);
	}

	onDraw({entity}){
		const materialType = this.constructor;
		materialType.setBindGroup(1, [
			{binding:0, resource:{buffer:entity.worldTransform.rawData}},
			{binding:1, resource:{buffer:entity.copyBoneStateToTempBuffer(), size:256 << 4, dataSize:entity.skeleton.boneCount << 3}},
			{binding:2, resource:{buffer:this.color}}
		]);
		for(let subMesh of entity.mesh.subMeshList){
			subMesh.setBuffers(materialType.vertexBuffers);
			subMesh.draw();
		}
	}
}

module.exports = ColorMaterial;
