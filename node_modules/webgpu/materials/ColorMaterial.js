'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const {vertex_3d} = require('./@shader_codes');

const pipelineDesc = {
	layoutDefine: [[
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{}},
		{binding:1, visibility:GPUShaderStage.FRAGMENT, sampler:{}}
	], [
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{hasDynamicOffset: true}}
	], [
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{hasDynamicOffset: true}}
	], [
		{binding:0, visibility:GPUShaderStage.FRAGMENT, buffer:{hasDynamicOffset: true}}
	]],
	vertex: {
		buffers: [{
			name: 'position',
			arrayStride: 3 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:0, offset: 0, format:'float32x3'}]
		}, {
			name: 'normal',
			arrayStride: 3 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:1, offset: 0, format:'float32x3'}]
		}, {
			name: 'uv',
			arrayStride: 2 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:2, offset: 0, format:'float32x2'}]
		}, {
			name: 'boneIndex',
			arrayStride: 1 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:3, offset: 0, format:'uint32'}]
		}],
		entryPoint: 'main',
		code: vertex_3d,
	},
	fragment: {
		targets:[{
			format: 'bgra8unorm',
			blend: {
				color:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'},
				alpha:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'}
			}
		}],
		entryPoint: 'main',
		code: `
			struct COLOR_BLOCK {
				colorList: array<vec4<f32>, 1024>,
			};

			@binding(0) @group(3) var<uniform> colorBlock: COLOR_BLOCK;

			struct Input {
				@location(0) uv: vec2<f32>,
				@location(1) @interpolate(flat) instanceIndex: u32,
				@location(2) normal: vec3<f32>,
			};

			struct Output {
				@location(0) color: vec4<f32>,
			};

			@fragment
			fn main(input: Input) -> Output {
				var base: f32 = 0.0;
				var factor: f32 = dot(normalize(vec3<f32>(1.0, 0.0, 1.0)), normalize(input.normal));
				factor = base + (1.0 - base) * max(factor, 0.0);
				var baseColor: vec4<f32> = colorBlock.colorList[input.instanceIndex << 4u];
				var output: Output;
				output.color = vec4<f32>(baseColor.rgb * factor, baseColor.a);
				return output;
			}
		`
	},
	depthStencil: {
		format: 'depth24plus-stencil8',
		depthWriteEnabled: true,
		depthCompare: 'less-equal',
	}
};

class ColorMaterial extends Material.Subclass(
	pipelineDesc,
	{transform:1,bone:2,color:3}
){
	constructor(color){
		super();
		this.color = color;
	}
}

module.exports = ColorMaterial;
