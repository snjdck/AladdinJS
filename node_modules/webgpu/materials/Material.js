'use strict';

const Vulkan = require('../Vulkan');
const {activeBindGroup} = require('../helper/Slot');

/*
function drawBatched(instanceCountPerDraw, instanceList, updateFn){
	const totalInstanceCount = instanceList.length;
	if(totalInstanceCount <= 0)return;
	let instanceIndex = 0;
	const result = [];
	while(instanceIndex < totalInstanceCount){
		const instanceCount = Math.min(instanceCountPerDraw, totalInstanceCount - instanceIndex);
		result.push(updateFn.call(this, instanceList, instanceIndex, instanceCount));
		instanceIndex += instanceCount;
	}
	return result;
}
//*/

class Material {
	static order = 0;
	static maxCountPerBatch = 1;
	static useMeshFlag = true;

	static Subclass(pipelineDict, bindGroupSlots={}){
		const Sub = class extends this {};
		const pipelineDesc = pipelineDict.pipeline;
		Sub.vertexBuffers = pipelineDesc.vertex.buffers?.map(v => v.name);
		for(let name in pipelineDict){
			Vulkan.bindRenderPipeline(Sub, pipelineDict[name], name);
		}
		Vulkan.bindMaterialSlots(Sub, bindGroupSlots);
		Sub.createBindGroup = (index, resources) => Vulkan.createBindGroupNew(pipelineDesc.groups[index], resources);
		return Sub;
	}
	
	get group(){
		return 0;
	}

	static *calcDrawIterator(entityList){
		yield * activeBindGroup(this.slotList, entityList);
	}

	static draw(entityList, mesh){
		//if(this.pipelineAutoSetFlag || pipelineSetFlag){
		this.onSetPipelineAndBuffer(mesh);
		for(const instanceCount of this.calcDrawIterator(entityList, mesh)){
			this.onDraw(instanceCount, mesh);
		}
	}

	static onSetPipelineAndBuffer(mesh){
		Vulkan.renderPassEncoder.setPipeline(this.pipeline);
	}

	static onDraw(instanceCount, mesh){
		if(this.useMeshFlag !== true){
			Vulkan.renderPassEncoder.draw(this.useMeshFlag, instanceCount);
			return;
		}
		const {subMeshList} = mesh;
		for(let i=0, n=subMeshList.length; i<n; ++i){
			this.onDrawSubMesh(instanceCount, subMeshList[i], i);
		}
	}

	static onDrawSubMesh(instanceCount, subMesh){
		subMesh.setBuffers(this.vertexBuffers);
		subMesh.draw(instanceCount);
	}

	static setBindGroup(index, ...resourceList){
		Vulkan.renderPassEncoder.setBindGroup(index, this.createBindGroup(index, resourceList));
	}
}

module.exports = Material;
