'use strict';

const Vulkan = require('../Vulkan');
const {calcBindGroupInfoList, activeBindGroup} = require('../helper/Slot');

/*
function drawBatched(instanceCountPerDraw, instanceList, updateFn){
	const totalInstanceCount = instanceList.length;
	if(totalInstanceCount <= 0)return;
	let instanceIndex = 0;
	const result = [];
	while(instanceIndex < totalInstanceCount){
		const instanceCount = Math.min(instanceCountPerDraw, totalInstanceCount - instanceIndex);
		result.push(updateFn.call(this, instanceList, instanceIndex, instanceCount));
		instanceIndex += instanceCount;
	}
	return result;
}
//*/

class Material {
	static order = 0;
	static maxCountPerBatch = 1;
	static useMeshFlag = true;

	static Subclass(pipelineDesc, bindGroupSlots={}){
		const Sub = class extends this {};
		Sub.vertexBuffers = pipelineDesc.vertex.buffers?.map(v => v.name);
		Vulkan.bindRenderPipeline(Sub, pipelineDesc);
		Vulkan.bindMaterialSlots(Sub, bindGroupSlots);
		return Sub;
	}
	
	get group(){
		return 0;
	}

	static *calcDrawIterator(entityList){
		const {slotList} = this;
		const bindGroupInfo = calcBindGroupInfoList(slotList, entityList);
		yield*activeBindGroup(slotList, bindGroupInfo);
	}

	static draw(entityList, mesh){
		//if(this.pipelineAutoSetFlag || pipelineSetFlag){
		this.onSetPipelineAndBuffer(mesh);
		for(const instanceCount of this.calcDrawIterator(entityList, mesh)){
			this.onDraw(instanceCount, mesh);
		}
	}

	static onSetPipelineAndBuffer(mesh){
		Vulkan.renderPassEncoder.setPipeline(this.pipeline);
	}
}

module.exports = Material;
