'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const clone = require('utils/object/clone');

const batchDrawListFactory = require('../helper/batchDrawListFactory');
const batchDrawList = batchDrawListFactory(v => v.texture.getRawAsset());

const Slot2D = require('./slots/Slot2D');

const pipelineDesc = {
	layout: ['0', '3'],
	vertex: {
		module: 'vertex_2d',
		buffers: [{
			arrayStride: 24 << 2,
			stepMode: 'instance',
			attributes: ['float32x4', 'float32x4', 'float32x4', 'float32x4', 'float32x4', 'float32x4']
		}]
	},
	fragment: {
		module: 'fragment_2d',
		targets:[{
			format: 'bgra8unorm',
			writeMask: 0xF,
			blend: ['transparent']
		}]
	}
};

class Material2D extends Material.Subclass(
	pipelineDesc,
	[Slot2D(0)]
){
	static useMeshFlag = false;
	static onSetPipelineAndBuffer(useDepthStencilFlag){
		const pipeline = useDepthStencilFlag ? this.pipelineWithDepthStencil : this.pipeline;
		Vulkan.renderPassEncoder.setPipeline(pipeline);
	}
	static *calcDrawIterator(entityList){
		const {renderPassEncoder} = Vulkan;
		for(const [texture, subEntityList] of batchDrawList(entityList)){
			renderPassEncoder.setBindGroup(1, Vulkan.createBindGroup('3', texture));
			yield * super.calcDrawIterator(subEntityList);
		}
	}
	static onDraw(instanceCount){
		//total 9 rect, exery rect has 2 triangle, every triangle has 3 index.
		Vulkan.renderPassEncoder.draw(54, instanceCount);
	}
	static New = (v => () => v)(new this());
}

Vulkan.bindRenderPipeline(Material2D, Object.assign(clone(pipelineDesc), {depthStencil: {format: 'depth24plus-stencil8'}}), 'pipelineWithDepthStencil');

module.exports = Material2D;
