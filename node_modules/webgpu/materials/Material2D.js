'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const clone = require('utils/object/clone');

const batchDrawListFactory = require('../helper/batchDrawListFactory');
const batchDrawList = batchDrawListFactory(v => v.texture.getRawAsset());

const pipelineDesc = {
	layout: ['0', '3'],
	vertex: {
		entryPoint: 'main',
		module: 'vertex_2d',
		buffers: [{
			arrayStride: 24 << 2,
			stepMode: 'instance',
			attributes: [
				{shaderLocation: 0, offset: 0, format: 'float32x4'},
				{shaderLocation: 1, offset: 16, format: 'float32x4'},
				{shaderLocation: 2, offset: 32, format: 'float32x4'},
				{shaderLocation: 3, offset: 48, format: 'float32x4'},
				{shaderLocation: 4, offset: 64, format: 'float32x4'},
				{shaderLocation: 5, offset: 80, format: 'float32x4'}
			]
		}]
	},
	fragment: {
		entryPoint: 'main',
		module: 'fragment_2d',
		targets:[{
			format: 'bgra8unorm',
			writeMask: 0xF,
			blend: {
				color:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'},
				alpha:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'}
			}
		}]
	}
};

class Material2D extends Material.Subclass(
	pipelineDesc,
	{'2d':0}
){
	static useMeshFlag = 54;//total 9 rect, exery rect has 2 triangle, every triangle has 3 index.
	static onSetPipelineAndBuffer(useDepthStencilFlag){
		const pipeline = useDepthStencilFlag ? this.pipelineWithDepthStencil : this.pipeline;
		Vulkan.renderPassEncoder.setPipeline(pipeline);
	}
	static *calcDrawIterator(entityList){
		for(const [texture, subEntityList] of batchDrawList(entityList)){
			this.setBindGroup(1, texture);
			yield * super.calcDrawIterator(subEntityList);
		}
	}
	static New = (v => () => v)(new this());
}

Vulkan.bindRenderPipeline(Material2D, Object.assign(clone(pipelineDesc), {depthStencil: {
	format: 'depth24plus-stencil8',
	depthWriteEnabled: false,
	depthCompare: 'less-equal',
}}), 'pipelineWithDepthStencil');

module.exports = Material2D;
