'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const TextureMaterial = require('./TextureMaterial');
const groupDraw = require('../helper/groupDraw');
const Camera3D = require('../cameras/Camera3D');
const Quaternion = require('../math/Quaternion');
const Lens = require('../cameras/Lens');
const Pipeline = require('./Pipeline');

const pipelineQuad = new Pipeline({
	groups: [TextureMaterial.pipelineDesc.groups[0], [
		{binding:0, visibility:GPUShaderStage.FRAGMENT, texture:{sampleType:'float'}},//depth, sint, uint, unfilterable-float
	]],
	vertex: {
		buffers: [{
			arrayStride: 2 << 2,
			stepMode: 'instance',
			attributes: [
				{shaderLocation: 0, offset: 0, format: 'float32x2'},
			]
		}],
		entryPoint: 'main',
		code: `
			struct Output {
				@builtin(position) position: vec4<f32>,
				@location(0) uv: vec2<f32>,
			}

			@vertex
			fn main(
				@builtin(vertex_index) vertex_index: u32,
				@location(0) uv_scale: vec2<f32>,
			) -> Output {
				var vertex: vec2<f32>;
				vertex.x = f32(vertex_index >> 1);
				vertex.y = f32(vertex_index & 1);

				var position = vertex * 2 - 1;
				position.y = -position.y;

				var output: Output;
				output.position = vec4<f32>(position, 0, 1);
				output.uv = vertex * uv_scale;
				return output;
			}
		`
	},
	fragment: {
		targets:[{
			format: 'bgra8unorm',
			blend: {
				color:{srcFactor: 'one', dstFactor: 'zero', operation: 'add'},
				alpha:{srcFactor: 'one', dstFactor: 'zero', operation: 'add'},
			}
		}],
		entryPoint: 'main',
		code: `
			@group(1) @binding(0) var texture_color: texture_2d<f32>;
			@group(0) @binding(1) var sampler_filtering: sampler;

			@fragment
			fn main(
				@location(0) uv: vec2<f32>,
			) -> @location(0) vec4<f32> {
				let baseColor = textureSample(texture_color, sampler_filtering, uv);
				return baseColor;
			}
		`
	},
	depthStencil: {
		format: 'depth24plus-stencil8',
		depthWriteEnabled: false,
		depthCompare: 'always',//always, never, equal, not-equal, less, less-equal, greater, greater-equal
		stencilFront: {
			compare: 'not-equal',
		},
		stencilBack: {
			compare: 'not-equal',
		},
	},
	primitive: {
		// (0, 1, 2), (2, 1, 3), (2, 3, 4), (4, 3, 5)
		// 0-2-4
		// |/|/|
		// 1-3-5
		topology: 'triangle-strip',
	}
});

const pipeline = {
	groups: [TextureMaterial.pipelineDesc.groups[0], TextureMaterial.pipelineDesc.groups[1].slice(0,1)],
	vertex: {
		buffers: [{
			name: 'position',
			arrayStride: 4 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:0, offset: 0, format:'float32x3'}]
		}],
		entryPoint: 'mainStatic',
		code:TextureMaterial.pipelineDesc.vertex.code,
	},
	fragment: {
		targets:[{
			writeMask: 0,
			format: 'bgra8unorm',
			blend: {color:{}, alpha:{}}
		}],
		entryPoint: 'main',
		code: `@fragment fn main(){}`
	},
	depthStencil: {
		format: 'depth24plus-stencil8',
		depthWriteEnabled: true,
		depthCompare: 'less-equal',//always, never, equal, not-equal, less, less-equal, greater, greater-equal
		stencilFront: {
			compare: 'always',
			depthFailOp: 'keep',//keep, zero, replace, invert, increment-clamp, decrement-clamp, increment-wrap, decrement-wrap
			failOp: 'keep',
			passOp: 'increment-clamp',
		},
		stencilBack: {
			compare: 'always',
			depthFailOp: 'keep',
			failOp: 'keep',
			passOp: 'increment-clamp',
		},
	},
	primitive: {
		topology: 'triangle-strip'
	}
};

class MirrorMaterial extends Material.Subclass(pipeline, [Material.Utils.groupMesh]){
	static maxCountPerDraw = 1;
	static onDraw(drawUnitList, {subMeshList}, renderPassEncoder){
		this.setBindGroup(renderPassEncoder, 1, [{binding:0, resource:{buffer:drawUnitList}}]);
		for(let i=0, n=subMeshList.length; i<n; ++i){
			const subMesh = subMeshList[i];
			let texture = drawUnitList[0].material.texture;
			subMesh.setBuffers(renderPassEncoder, this.vertexBuffers);
			renderPassEncoder.draw(4);
		}
		pipelineQuad.setPipeline(renderPassEncoder);
		pipelineQuad.setBindGroup(renderPassEncoder, 1, [{binding:0, resource:drawUnitList[0].material.texture}]);
		pipelineQuad.setVertexBuffer(renderPassEncoder, 0, uv_scale);
		renderPassEncoder.draw(4);
	}

	constructor(texture){
		super();
		this.texture = texture.createView();
		let camera = new Camera3D(new Lens.Perspective(Math.PI / 6, 900 / 1200, -1500, 5000, -2000));
		camera.rotation = new Quaternion().fromEulerAngles(120 * Math.PI / 180, 0, -135 * Math.PI / 180);
		camera.lens.rawData[0] *= -1;
		this.camera = camera;
	}
}

const uv_scale = new Float32Array(2);
uv_scale[0] = 1200 / 2048;
uv_scale[1] = 900 / 1024;

module.exports = MirrorMaterial;
