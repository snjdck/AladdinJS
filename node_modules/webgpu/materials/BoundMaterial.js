'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const TextureMaterial = require('./TextureMaterial');
const {createCube} = require('../helper/geom');

const maxCountPerDraw = 100;

const pipeline = {
	groups: [
		TextureMaterial.pipelineDesc.groups[0],
		TextureMaterial.pipelineDesc.groups[1].slice(0,1)
	],
	vertex:{
		...TextureMaterial.pipelineDesc.vertex,
		buffers: [TextureMaterial.pipelineDesc.vertex.buffers[0]],
		entryPoint: 'mainStatic',
	},
	fragment:{
		...TextureMaterial.pipelineDesc.fragment,
		entryPoint: 'mainColor',
	},
	depthStencil: TextureMaterial.pipelineDesc.depthStencil,
	primitive: {topology: 'line-list'}
};

class BoundMaterial extends Material.Subclass(pipeline, []){
	static maxCountPerDraw = 1;
	static onDraw([drawUnit], renderPassEncoder){
		this.setBindGroup(renderPassEncoder, 1, [
			{binding:0, resource:{buffer:[drawUnit]}}
		]);
		
		const subMesh = drawUnit.material.cube.subMeshList[0];
		subMesh.setBuffers(renderPassEncoder, this.vertexBuffers);
		subMesh.draw(renderPassEncoder, 1, 0, 'indexWireframe');
	}
	constructor(bound){
		super();
		this.bound = bound;
		let cube = createCube(bound);
		Vulkan.addMeshBufferGetter(cube);
		this.cube = cube;
	}
}

module.exports = BoundMaterial;
