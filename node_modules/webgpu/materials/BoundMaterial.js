'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');

const pipelineDesc = {
	groups: [[
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{}},
		{binding:1, visibility:GPUShaderStage.FRAGMENT, sampler:{}, default:{magFilter:'linear', minFilter:'linear', addressModeU:'repeat', addressModeV:'repeat', addressModeW:'repeat'}}
	], [
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{hasDynamicOffset: true}}
	]],
	vertex:{
		entryPoint: 'main',
		code: `
			var<private> indexList : array<vec4<u32>, 6> = array<vec4<u32>, 6>(
				vec4<u32>(0u, 1u, 1u, 3u),
				vec4<u32>(3u, 2u, 2u, 0u),
				vec4<u32>(4u, 5u, 5u, 7u),
				vec4<u32>(7u, 6u, 6u, 4u),
				vec4<u32>(0u, 4u, 1u, 5u),
				vec4<u32>(3u, 7u, 2u, 6u)
			);

			struct MVP {
				screenMatrix: mat4x4<f32>,
				cameraMatrix: mat3x4<f32>,
				viewportXYWH: vec4<f32>,
			};

			struct MVP_BLOCK {
				cameraList: array<MVP, 100>,
			};

			struct BOUND_BLOCK {
				boundList: array<vec4<f32>, 1024>,
			};

			@binding(0) @group(0) var<uniform> mvp: MVP_BLOCK;
			@binding(0) @group(1) var<uniform> boundBlock: BOUND_BLOCK;

			struct Input {
				@builtin(vertex_index) vertexIndex: u32,
				@builtin(instance_index) instanceIndex: u32,
			};

			@vertex
			fn main(input: Input) -> @builtin(position) vec4<f32> {
				var vertexID : u32 = indexList[input.vertexIndex >> 2u][input.vertexIndex & 3u];
				var xyz : vec3<u32> = vec3<u32>(vertexID & 1u, (vertexID >> 1u) & 1u, vertexID >> 2u);

				var index: u32 = input.instanceIndex << 4u;
				var cameraIndex: u32 = u32(boundBlock.boundList[index].w);

				var vertex: vec3<f32>;
				for(var i:i32=0; i<3; i=i+1){
					vertex[i] = boundBlock.boundList[index | xyz[i]][i];
				}

				var cameraPosition: vec3<f32> = vec4<f32>(vertex, 1.0) * mvp.cameraList[cameraIndex].cameraMatrix;
				var screenPosition: vec4<f32> = vec4<f32>(cameraPosition, 1.0) * mvp.cameraList[cameraIndex].screenMatrix;
				
				var viewportXYWH: vec4<f32> = mvp.cameraList[cameraIndex].viewportXYWH;
				var t: vec2<f32> = fma(screenPosition.xy, viewportXYWH.zw, viewportXYWH.xy);
				screenPosition.x = t.x;
				screenPosition.y = t.y;

				return screenPosition;
			}
		`
	},
	fragment:{
		targets:[{
			format: 'bgra8unorm',
			blend: {
				color:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'},
				alpha:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'}
			}
		}],
		entryPoint: 'main',
		code: `
			@fragment
			fn main() -> @location(0) vec4<f32> {
				return vec4<f32>(1.0, 0.0, 1.0, 1.0);
			}
		`
	},
	depthStencil: {
		format: 'depth24plus-stencil8',
		depthWriteEnabled: true,
		depthCompare: 'less-equal',
	},
	primitive: {
		topology: 'line-list',
	}
};

class BoundMaterial extends Material.Subclass(
	{pipeline: pipelineDesc},
	{bound:1}
){
	static useMeshFlag = 24;
	constructor(bound){
		super();
		this.bound = bound;
	}
}

module.exports = BoundMaterial;
