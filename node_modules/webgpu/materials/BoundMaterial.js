'use strict';

const Vulkan = require('../Vulkan');
const Material = require('./Material');
const TextureMaterial = require('./TextureMaterial');
const {createCube} = require('../helper/geom');

const maxCountPerDraw = 100;

const pipeline = TextureMaterial.pipeline.clone({
	groups: v => [v[0], v[1].slice(0,1)],
	buffers: v => v.slice(0,1),
	vertex:{entryPoint: 'mainStatic'},
	fragment:{entryPoint: 'mainColor'},
	primitive: {topology: 'line-list'}
});

class BoundMaterial extends Material.Subclass(pipeline, []){
	static maxCountPerDraw = 1;
	static onDraw(drawUnitList, renderPassEncoder){
		this.setResources(renderPassEncoder, {
			'worldMatrixList': {buffer:drawUnitList},
		});
		const subMesh = drawUnitList[0].material.cube.subMeshList[0];
		const {position} = subMesh.buffers;
		this.setResources(renderPassEncoder, {position});
		subMesh.draw(renderPassEncoder, 1, 0, 'indexWireframe');
	}
	constructor(bound){
		super();
		this.bound = bound;
		let cube = createCube(bound);
		Vulkan.addMeshBufferGetter(cube);
		this.cube = cube;
	}
}

module.exports = BoundMaterial;
