'use strict';

const Material = require('./Material');
const {genBoundBuffer, boundByteSize, boundVertexCount} = require('./computePasses/BoundPass');
const maxCountPerDraw = 100;

const pipeline = {
	groups: [[
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{}},
		{binding:1, visibility:GPUShaderStage.FRAGMENT, sampler:{}, default:{magFilter:'linear', minFilter:'linear', addressModeU:'repeat', addressModeV:'repeat', addressModeW:'repeat'}}
	], [
		{binding:0, visibility:GPUShaderStage.VERTEX, buffer:{}, temp:{array: new Float32Array(12 * maxCountPerDraw), stride: 12, mapFn: v => v.entity.worldTransform.rawData}},
	]],
	vertex:{
		buffers: [{
			name: 'position',
			arrayStride: 4 << 2,
			stepMode: 'vertex',
			attributes: [{shaderLocation:0, offset: 0, format:'float32x3'}]
		}],
		entryPoint: 'main',
		code: `
			struct MVP {
				screenMatrix: mat4x4<f32>,
				cameraMatrix: mat3x4<f32>,
			};

			struct TRANSFORM_BLOCK {
				matrixList: array<mat3x4<f32>, ${maxCountPerDraw}>,
			};

			@group(0) @binding(0) var<uniform> mvp: MVP;
			@group(1) @binding(0) var<uniform> worldMatrixBlock: TRANSFORM_BLOCK;

			struct Input {
				@builtin(instance_index) instanceIndex: u32,
				@location(0) position: vec3<f32>,
			};

			@vertex
			fn main(input: Input) -> @builtin(position) vec4<f32> {
				let vertex: vec3<f32> = input.position;
				
				let worldPosition: vec3<f32> = vec4<f32>(vertex, 1.0) * worldMatrixBlock.matrixList[input.instanceIndex];
				let cameraPosition: vec3<f32> = vec4<f32>(worldPosition, 1.0) * mvp.cameraMatrix;
				let screenPosition: vec4<f32> = vec4<f32>(cameraPosition, 1.0) * mvp.screenMatrix;

				return screenPosition;
			}
		`
	},
	fragment:{
		targets:[{
			format: 'bgra8unorm',
			blend: {
				color:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'},
				alpha:{srcFactor: 'src-alpha', dstFactor: 'one-minus-src-alpha', operation: 'add'}
			}
		}],
		entryPoint: 'main',
		code: `
			@fragment
			fn main() -> @location(0) vec4<f32> {
				return vec4<f32>(1.0, 0.0, 0, 1);
			}
		`
	},
	depthStencil: {
		format: 'depth24plus-stencil8',
		depthWriteEnabled: true,
		depthCompare: 'less-equal',
	},
	primitive: {
		topology: 'line-list',
	}
};

class BoundMaterial extends Material.Subclass(pipeline, []){
	static maxCountPerDraw = maxCountPerDraw;
	static onDraw(drawUnitList, renderPassEncoder){
		const boundMap = Map.groupBy(drawUnitList, v => v.material.bound);
		const boundList = Array.from(boundMap.keys());
		const buffer = genBoundBuffer(boundList);
		for(let i=0; i<boundList.length; ++i){
			let entityList = boundMap.get(boundList[i]);
			this.setBindGroup(renderPassEncoder, 1, [
				{binding:0, resource:{buffer:entityList}}
			]);
			renderPassEncoder.setVertexBuffer(0, buffer, i * boundByteSize, boundByteSize);
			renderPassEncoder.draw(boundVertexCount, entityList.length);
		}
	}
	constructor(bound){
		super();
		this.bound = bound;
	}
}

module.exports = BoundMaterial;
