'use strict';

/*
unorm = unsigned normalized
snorm = signed normalized
uint = unsigned int
sint = signed int
float = floating point
*/
const formatSize = {
	'uint8x2': 2, 'unorm8x2': 2, 'uint16x2': 4, 'unorm16x2': 4,
	'uint8x4': 4, 'unorm8x4': 4, 'uint16x4': 8, 'unorm16x4': 8,
	'sint8x2': 2, 'snorm8x2': 2, 'sint16x2': 4, 'snorm16x2': 4,
	'sint8x4': 4, 'snorm8x4': 4, 'sint16x4': 8, 'snorm16x4': 8,
	
	'uint32': 4, 'uint32x2': 8, 'uint32x3': 12, 'uint32x4': 16,
	'sint32': 4, 'sint32x2': 8, 'sint32x3': 12, 'sint32x4': 16,
	
	'float32': 4, 'float32x2': 8, 'float32x3': 12, 'float32x4': 16,

	'float16x2': 4, 'float16x4': 8,
};

function attributes(...args){
	const result = [];
	let offset = 0;
	let format;
	for(let i=0, n=args.length; i<n; ++i){
		const attr = args[i];
		if(!attr)continue;
		if(Array.isArray(attr)){
			offset = attr[0];
			format = attr[1];
		}else{
			format = attr;
		}
		result.push({offset, format, shaderLocation: i});
		offset += formatSize[format];
	}
	return result;
}

/*
enum GPUBlendFactor {
	'zero', 'one',
	'src-color', 'one-minus-src-color', 'src-alpha', 'one-minus-src-alpha',
	'dst-color', 'one-minus-dst-color', 'dst-alpha', 'one-minus-dst-alpha',
	'blend-color', 'one-minus-blend-color',
	'src-alpha-saturated'
};
enum GPUBlendOperation {
	'add', 'subtract', 'reverse-subtract', 'min', 'max'
};
*/

const blend = function(){
	function cast(value){
		return Array.isArray(value) ? {
			srcFactor: value[0] || 'one',
			dstFactor: value[1] || 'zero',
			operation: value[2] || 'add'
		} : blendComponent[value];
	}
	const blendComponent = {
		opaque: cast(['one', 'zero']),
		transparent: cast(['src-alpha', 'one-minus-src-alpha']),
	};
	return function(color, alpha){
		color = cast(color);
		alpha = alpha ? cast(alpha) : color;
		return {color, alpha};
	};
}();

exports.attributes = attributes;
exports.blend = blend;
