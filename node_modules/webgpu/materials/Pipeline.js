'use strict';

const Vulkan = require('../Vulkan');
const {createGetter, createMapGetter} = require('utils/cache');
const {calcBindGroupLayoutSign, calcPipelineLayoutSign, calcSamplerSign, calcShaderSign, calcPipelineSign} = require('webonly/utils_gpu');
const {fetchBuffer} = require('../Vulkan/resource');

const samplerCache = createGetter(desc => Vulkan.device.createSampler(desc), calcSamplerSign);
const shaderCache = createGetter(code => Vulkan.device.createShaderModule({code}));
const bindGroupLayoutCache = createGetter(entries => Vulkan.device.createBindGroupLayout({entries}), calcBindGroupLayoutSign);
const pipelineLayoutCache = createGetter(layouts => Vulkan.device.createPipelineLayout({bindGroupLayouts: layouts.map(bindGroupLayoutCache)}), calcPipelineLayoutSign);
const pipelineCache = createGetter(createPipeline, calcPipelineSign);
function createPipeline(desc){
	const {vertex, fragment, compute} = desc;
	if(!desc.layout){
		desc.layout = pipelineLayoutCache(desc.groups);
	}
	if(vertex && !vertex.module)vertex.module = shaderCache(calcShaderSign(vertex.code));
	if(fragment && !fragment.module)fragment.module = shaderCache(calcShaderSign(fragment.code));
	if(compute && !compute.module)compute.module = shaderCache(calcShaderSign(compute.code));
	return compute ? Vulkan.device.createComputePipeline(desc) : Vulkan.device.createRenderPipeline(desc);
}
const mapCacheBindGroupLayout = createMapGetter(bindGroupLayoutCache);
const mapCacheSampler = createMapGetter(samplerCache);
const mapCachePipeline = createMapGetter(pipelineCache);
const createBindGroup = function(){
	function fn(v){return v.binding == this;}
	return (desc, entries) => {
		for(let entry of entries){
			const item = desc.find(fn, entry.binding);
			if(item.buffer){
				if(entry.resource.buffer instanceof GPUBuffer)continue;
				let bufferData = entry.resource.buffer;
				let bufferDataSize;
				if(Array.isArray(bufferData)){
					const value = bufferData;
					const {array, stride, mapFn} = item.temp;
					bufferData = array;
					bufferDataSize = 0;
					//if(mapFn){
						for(let i=0, n=value.length; i<n; ++i){
							array.set(mapFn(value[i]), bufferDataSize);
							bufferDataSize += stride;
						}
					/*}else{
						for(let i=0, n=value.length; i<n; ++i){
							array.set(value[i], bufferDataSize);
							bufferDataSize += stride[i];
						}
					}*/
				}
				const bufferSize = Math.max(64, entry.resource.size ?? bufferData.byteLength);//less than 64 will warn
				const buffer = fetchBuffer(bufferSize, GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST);
				Vulkan.device.queue.writeBuffer(buffer, 0, bufferData, 0, bufferDataSize);
				entry.resource.buffer = buffer;
				if(entry.resource.size === undefined)entry.resource.size = bufferSize;
			}/*else if(item.sampler){
				//if(entry.resource instanceof GPUSampler)continue;
				entry.resource = samplerCache(entry.resource);
			}*/
		}
		if(entries.length < desc.length){
			for(let entry of desc){
				if(entries.some(fn, entry.binding))continue;
				if(entry.sampler){
					entries.push({binding:entry.binding, resource:mapCacheSampler(entry.default)});
				}
			}
		}
		return Vulkan.device.createBindGroup({layout:mapCacheBindGroupLayout(desc), entries});
	};
}();


class Pipeline {
	constructor(desc){
		this.desc = desc;
	}

	setPipeline(renderPassEncoder){
		renderPassEncoder.setPipeline(mapCachePipeline(this.desc));
	}

	setBindGroup(renderPassEncoder, index, entries){
		renderPassEncoder.setBindGroup(index, createBindGroup(this.desc.groups[index], entries));
	}

	setVertexBuffer(renderPassEncoder, index, value){
		if(Array.isArray(value)){
			const {arrayStride, temp:{array, stride, mapFn}} = this.desc.vertex.buffers[index];
			for(let i=0, n=value.length; i<n; ++i)array.set(mapFn(value[i]), i * stride);
			const size = arrayStride * value.length;
			const buffer = fetchBuffer(size, GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST);
			Vulkan.device.queue.writeBuffer(buffer, 0, array, 0, stride * value.length);
			renderPassEncoder.setVertexBuffer(index, buffer, 0, size);
		}else{
			const buffer = fetchBuffer(value.byteLength, GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST);//buffer may larger than request size
			Vulkan.device.queue.writeBuffer(buffer, 0, value);
			renderPassEncoder.setVertexBuffer(index, buffer, 0, value.byteLength);
		}
	}
}

module.exports = Pipeline;
