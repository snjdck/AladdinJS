'use strict';

const TextureMaterial = require('./TextureMaterial');
const {fetchAnimationTexture} = require('../Vulkan/resource');
const pipeline = {
	groups: TextureMaterial.pipelineDesc.groups.slice(0, 2),
	vertex: {
		buffers: [
			TextureMaterial.pipelineDesc.vertex.buffers[0],
			TextureMaterial.pipelineDesc.vertex.buffers[3],
		],
		entryPoint: 'mainDepth',
		code: TextureMaterial.pipelineDesc.vertex.code
	},
	depthStencil: {
		format: 'depth32float',//depth32float
		depthWriteEnabled: true,
		depthCompare: 'less-equal',
	}
};

class DepthMaterial extends TextureMaterial.Subclass(pipeline){
	static onDraw(drawUnitList, mesh, renderPassEncoder){
		const {textureView} = fetchAnimationTexture(drawUnitList[0].entity.skeleton.mesh);
		this.setResources(renderPassEncoder, {
			'worldMatrixList': {buffer:drawUnitList},
			'boneStateList': {buffer:drawUnitList},
			'animationTexture':textureView,
			'animationTextureInfo':{buffer:drawUnitList.map(v => v.entity.skeleton)}
		});
		for(let i=0; i<mesh.subMeshList.length; ++i){
			const subMesh = mesh.subMeshList[i];
			subMesh.setBuffers(renderPassEncoder, this.vertexBuffers);
			subMesh.draw(renderPassEncoder, drawUnitList.length);
		}
	}
}

const CubeDepthMaterial = DepthMaterial.Subclass({
	...pipeline,
	vertex: {
		...pipeline.vertex,
		entryPoint: 'mainCubeDepth',
	}
});

exports.DepthMaterial = DepthMaterial;
exports.CubeDepthMaterial = CubeDepthMaterial;
