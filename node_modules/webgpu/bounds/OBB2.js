
const Vector3D = require('webgpu/math/Vector3D');

class OBB2
{
	constructor(){
		this.center = new Vector3D();
		this.halfWidth = 0;
		this.halfHeight = 0;

		this._rotation = 0;
		this.xAxis = new Vector3D(1, 0);
		this.yAxis = new Vector3D(0, -1);
	}
	
	get rotation(){
		return this._rotation;
	}

	set rotation(value){
		this._rotation = value;
		let cos = Math.cos(value);
		let sin = Math.sin(value);
		this.xAxis.setTo(cos, sin, 0);
		this.yAxis.setTo(sin, -cos, 0);
	}
	
	getProjLen(axis){
		const {halfWidth, halfHeight, xAxis, yAxis} = this;
		return halfWidth * absDot(xAxis, axis) + halfHeight * absDot(yAxis, axis);
	}
	
	getProjLenX(){
		const {halfWidth, halfHeight, xAxis, yAxis} = this;
		return halfWidth * Math.abs(xAxis.x) + halfHeight * Math.abs(yAxis.x);
	}
	
	getProjLenY(){
		const {halfWidth, halfHeight, xAxis, yAxis} = this;
		return halfWidth * Math.abs(xAxis.y) + halfHeight * Math.abs(yAxis.y);
	}
}

const absDot = (a, b) => Math.abs(a.x * b.x + a.y * b.y);

OBB2.prototype.hitTestAABB = function(){
	OBB2.CONTAINS = 1;
	OBB2.AWAY = 2;
	OBB2.INTERECT = 3;
	const ab = new Vector3D();
	return function(other){
		const {halfWidth, halfHeight, xAxis, yAxis} = this;
		other.center.subtract(this.center, ab)
		let dx = absDot(ab, xAxis) - halfWidth;
		let dy = absDot(ab, yAxis) - halfHeight;
		let projWidth = other.getProjLen(xAxis);
		let projHeight = other.getProjLen(yAxis);
		if(-dx >= projWidth && -dy >= projHeight){
			return OBB2.CONTAINS;
		}
		if(dx >= projWidth || dy >= projHeight){
			return OBB2.AWAY;
		}
		if(Math.abs(ab.x) >= other.halfWidth + getProjLenX()){
			return OBB2.AWAY;
		}
		if(Math.abs(ab.y) >= other.halfHeight + getProjLenY()){
			return OBB2.AWAY;
		}
		return OBB2.INTERECT;
	}
}();


module.exports = OBB2;
