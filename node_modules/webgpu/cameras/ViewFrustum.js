'use strict';

class ViewFrustum
{
	constructor(){
		this.transform = new Array(16);
		this.planeList = [new Array(4), new Array(4), new Array(4), new Array(4), new Array(4), new Array(4)];
	}

	update(camera){
		const {transform, planeList} = this;
		const [a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23] = camera.worldTransformInvert.rawData;
		const [b00, b01, b02, b03, b10, b11, b12, b13, b20, b21, b22, b23, b30, b31, b32, b33] = camera.lens.rawData;

		transform[ 0] = a00 * b00;
		transform[ 1] = a01 * b00;
		transform[ 2] = a02 * b00;
		transform[ 3] = a03 * b00;

		transform[ 4] = a10 * b11;
		transform[ 5] = a11 * b11;
		transform[ 6] = a12 * b11;
		transform[ 7] = a13 * b11;

		transform[ 8] = a20 * b22;
		transform[ 9] = a21 * b22;
		transform[10] = a22 * b22;
		transform[11] = a23 * b22 + b23;

		transform[12] = a20 * b32;
		transform[13] = a21 * b32;
		transform[14] = a22 * b32;
		transform[15] = a23 * b32 + b33;

		for(let i=0; i<4; ++i){
			const x = transform[i];
			const y = transform[i+4];
			const z = transform[i+8];
			const w = transform[i+12];
			planeList[0][i] = w + x;
			planeList[1][i] = w - x;
			planeList[2][i] = w + y;
			planeList[3][i] = w - y;
			planeList[4][i] = z;
			planeList[5][i] = w - z;
		}
	}

	canCull(aabb){
		const {minX, minY, minZ, maxX, maxY, maxZ} = aabb;
		for(const [a, b, c, d] of this.planeList){
			if(
				a * (a > 0 ? maxX : minX) + 
				b * (b > 0 ? maxY : minY) + 
				c * (c > 0 ? maxZ : minZ) + 
				d < 0
			)return true;
		}
		return false;
	}
}

module.exports = ViewFrustum;