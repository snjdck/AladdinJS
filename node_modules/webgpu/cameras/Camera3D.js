'use strict';

const traverseTree = require('utils/traverseTree');
const Vulkan = require('../Vulkan');
const Mat3x4 = require('../Mat3x4');
const DrawUnitBucket = require('../DrawUnitBucket');
const DisplayObject3D = require('../DisplayObject3D');

class Camera3D extends DisplayObject3D
{
	constructor(lens){
		super();
		this.worldTransformInvert = new Mat3x4();
		this.cullEnabled = false;
		this.lens = lens;
		this.layerFlagFilter = 0xFFFFFFFF;
	}

	draw(root){
		const {lens, worldTransformInvert} = this;

		//Vulkan.currentCamera = this;
		traverseTree.call(this, root, this.onCollect);

		const {uniformBuffer, mvpBindGroup} = Vulkan.camera3DGPUResourceMgr.getOut();
		Vulkan.copyDataToBuffer(uniformBuffer, lens);
		Vulkan.copyDataToBuffer(uniformBuffer, worldTransformInvert.rawData, lens.byteLength);
		Vulkan.renderPassEncoder.setBindGroup(0, mvpBindGroup);

		drawUnitBucket.draw().clear();
	}

	onCollect(element){
		if(!element.visible)return true;
		if(!(this.layerFlagFilter & element.layerFlag))return true;
		if(!(this.cullEnabled && this.canCull(element))){
			drawUnitBucket.add(element);
		}
	}

	canCull(element){
		return false;
	}
}

const drawUnitBucket = new DrawUnitBucket();

module.exports = Camera3D;
