'use strict';

const Vulkan = require('../Vulkan');
const BitmapQueue = require('opengl/renderers/BitmapQueue');
const traverseTree = require('utils/traverseTree');

class Render2D
{
	constructor(){
		this.handlerDict = {};
		this.bitmapQueue = new BitmapQueue(v => v.texture.getRawAsset());
		this.mvpBindGroup = createMvpBindGroup();
	}

	calcKey(type, mode){
		return type + '@' + mode;
	}

	register(type, handler, mode=''){
		this.handlerDict[this.calcKey(type, mode)] = handler;
	}

	tryAdd(target, mode=''){
		const type = target.type;
		const handler = this.handlerDict[this.calcKey(type, mode)];
		if(!handler)return;
		handler.call(target, mode, type);
	}

	add(target){
		this.bitmapQueue.add(target);
	}

	collect(root, includeRoot=true){
		traverseTree.call(this, root, onCollect, includeRoot);
	}

	prepareToDraw(){
		const {renderPassEncoder, pipeline_2d} = Vulkan;
		renderPassEncoder.setPipeline(pipeline_2d);
		renderPassEncoder.setBindGroup(0, this.mvpBindGroup);
	}

	draw(){
		this.bitmapQueue.draw(onBatchDraw2D, this).clear();
	}
}

function createMvpBindGroup(){
	const {canvas} = Vulkan;

	const uniformBuffer = Vulkan.createBufferMapped(GPUBufferUsage.UNIFORM, new Float32Array([2 / canvas.width, -2 / canvas.height]));

	return Vulkan.createBindGroup(
		Vulkan.layout_0, [
		{buffer: uniformBuffer},
		Vulkan.sampler_linear_clamp
	]);
}

function onBatchDraw2D(instanceList){
	Vulkan.renderPassEncoder.setBindGroup(1, Vulkan.createBindGroup(Vulkan.layout_3, [instanceList[0].texture.getRawAsset()]));
	Vulkan.vertexBufferMgr.draw(instanceList);
}

function onCollect(item){
	if(!item.visible)return true;
	const {filter} = item;
	if(filter){
		this.add(filter);
		return true;
	}
	this.tryAdd(item);
}

module.exports = Render2D;
