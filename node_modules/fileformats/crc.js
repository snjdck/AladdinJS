'use strict';

function* calcTable(xor){
	for(let i=0; i<256; ++i){
		let v = i;
		for(let j=0; j<8; ++j){
			v = v & 1 ? v >>> 1 ^ xor : v >>> 1;
		}
		yield v;
	}
}

function calcReduceFn(xor){
	const table = Array.from(calcTable(xor));
	return (c, v) => c >>> 8 ^ table[(c ^ v) & 0xFF];
}

const crc32 = function(){
	const reduceFn = calcReduceFn(0xEDB88320);
	return (value, seed) => ~value.reduce(reduceFn, ~seed);
}();

const crc16 = function(){
	const reduceFn = calcReduceFn(0xA001);
	return (value, seed) => value.reduce(reduceFn, ~seed & 0xFFFF);
}();

const crc8 = function(){
	const reduceFn = calcReduceFn(0x8C);
	return (value, seed) => value.reduce(reduceFn, ~seed & 0xFF);
}();

exports.crc32 = crc32;
exports.crc16 = crc16;
exports.crc8  = crc8;
