"use strict"

const assert = require("assert");

function decode(source){
	let result = [];

	let line = [];
	let field = "";
	let isReadingString = false;

	for(let i=0, n=source.length; i<n; ++i){
		let char = source.charAt(i);
		if(isReadingString){
			if(char != '"'){
				field += char;
			}else if(i < n-1 && source.charAt(i+1) == '"'){
				field += char;
				++i;
			}else{
				isReadingString = false;
			}
		}else if(char == ',' || char == '\r'){
			line.push(field);
			field = "";
		}else if(char == '\n'){
			result.push(line);
			line = [];
		}else if(char == '"'){
			isReadingString = true;
		}else{
			field += char;
		}
	}

	return result;
}

function _parseV(item, keyList){
	let result = {};
	for(let [i, v] of item.entries()){
		if(!v)continue;
		result[keyList[i]] = v;
	}
	return result;
}

function parseV(itemList, toDict=true){
	let keyList = itemList.shift();
	let result = itemList.map(item => _parseV(item, keyList));
	return toDict ? castListToDict(result, keyList[0]) : result;
}

function _parseH(index, itemList){
	if(index==0)return;
	let result = {};
	for(let item of itemList){
		let v = item[index];
		if(!v)continue;
		result[item[0]] = v;
	}
	return result;
}

function parseH(itemList, toDict=true){
	let result = itemList[0].map((_, i) => _parseH(i, itemList));
	result.shift();
	return toDict ? castListToDict(result, itemList[0][0]) : result;
}

function castListToDict(itemList, key){
	let result = {};
	for(let item of itemList){
		assert(!(item[key] in result));
		result[item[key]] = item;
	}
	return result;
}

module.exports = {
	decode,
	parseH,
	parseV,
	castListToDict
};