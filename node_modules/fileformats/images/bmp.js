"use strict";

const assert = require("assert");

function deocde(ba){
	let right2left = false;
	let bottom2top = false;

	let position = 10;

	let dataOffset = ba.readUInt32LE(position);
	position += 4;

	assert.equal(ba.readUInt32LE(position), 40);
	position += 4;

	let width = ba.readInt32LE(position);
	position += 4;
	let height = ba.readInt32LE(position);
	position += 4;

	if(height < 0){
		height = -height;
	}else{
		bottom2top = true;
	}

	position += 2;
	let bitPerPixel = ba.readUInt16LE(position);//1,4,8,16,24,32
	position += 2;
	let compression = ba.readUInt32LE(position);// 0(不压缩),1(BI_RLE8压缩类型)或2(BI_RLE4压缩类型)之一
	position += 4;
	let imageSize = ba.readUInt32LE(position);
	position += 4;
	
	position = 54;//调色板,如果有
	assert(bitPerPixel >= 24 && compression == 0);

	position = dataOffset;

	let pixelCount = width * height;
	let buffer = [];
	for(let i=0; i<pixelCount; ++i){
		let px = i % width;
		let py = Math.floor(i / width);
		if(right2left){
			px = width - 1 - px;
		}
		if(bottom2top){
			py = height - 1 - py;
		}
		let b = ba.readUInt8(position++);
		let g = ba.readUInt8(position++);
		let r = ba.readUInt8(position++);
		buffer.push(r, g, b);
		if(bitPerPixel == 32){
			buffer.push(ba.readUInt8(position++));
		}
	}
	let data = new Uint8Array(buffer);
	return {width, height, bitPerPixel, data};
}

module.exports = deocde;