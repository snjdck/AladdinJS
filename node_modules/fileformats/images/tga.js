"use strict";

const assert = require("assert");
/*
private function readType10(bitPerPixel:uint):void
		{
			var pixelCount:uint = bmd.width * bmd.height;
			var index:int = 0;
			
			var head:uint;
			var count:uint;
			var color:uint;
			
			while(index < pixelCount){
				head = ba.readUnsignedByte();
				if((head & 0x80) > 0){
					count = (head & 0x7F) + 1;
					color = readColor(bitPerPixel);
					while(count-- > 0){
						setPixelAtIndex(index++, color);
					}
				}else{
					count = head + 1;
					while(count-- > 0){
						setPixelAtIndex(index++, readColor(bitPerPixel));
					}
				}
			}
		}
*/
function deocde(ba){
	let position = 0;
	var imageInfoSize = ba.readUInt8(position);
	position += 1;
	var hasColorTable = ba.readUInt8(position) > 0;
	position += 1;
	var imageType = ba.readUInt8(position);
	position += 1;
	
	if(hasColorTable){
		var colorTableOffset = ba.readUInt16LE(position);
		var colorTableLength = ba.readUInt16LE(position + 2);
		var colorType = ba.readUInt8(position+4);//16,24,32
	}
	position += 5;
	
	var px = ba.readUInt16LE(position);position += 2;
	var py = ba.readUInt16LE(position);position += 2;
	var width = ba.readUInt16LE(position);position += 2;
	var height = ba.readUInt16LE(position);position += 2;
	
	var bitPerPixel = ba.readUInt8(position);//8, 16, 24, 32
	position += 1;
	var flags = ba.readUInt8(position);
	position += 1;
	/*--head end--*/
	
	var right2left = ((flags >> 4) & 1) == 1;
	var bottom2top = ((flags >> 5) & 1) == 0;
	
	position += imageInfoSize;

	assert(imageType == 2);

	let pixelCount = width * height;
	let buffer = [];
	for(let i=0; i<pixelCount; ++i){
		let px = i % width;
		let py = Math.floor(i / width);
		if(right2left){
			px = width - 1 - px;
		}
		if(bottom2top){
			py = height - 1 - py;
		}
		let b = ba.readUInt8(position++);
		let g = ba.readUInt8(position++);
		let r = ba.readUInt8(position++);
		buffer.push(r, g, b);
		if(bitPerPixel == 32){
			buffer.push(ba.readUInt8(position++));
		}
	}
	let data = new Uint8Array(buffer);
	return {width, height, bitPerPixel, data};
}

module.exports = deocde;