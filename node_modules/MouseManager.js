class MouseManager
{
	constructor(view3d){
		this.view3d = view3d;
		this.requestPick = false;
		this.init();
	}

	init(){
		const {canvas} = this.view3d;
		canvas.addEventListener("mousemove", this.onMouseMove.bind(this));
		canvas.addEventListener("mousedown", this.onMouseDown.bind(this));
		canvas.addEventListener("mouseup"  , this.onMouseUp.bind(this));
	}

	update(){
		const {canvas} = this.view3d;
		//console.log(canvas.getBoundingClientRect())
	}

	onMouseMove(evt){
		const {scene2d, scene3d} = this.view3d;
		scene2d.mouseX = evt.x;
		scene2d.mouseY = evt.y;
		//console.log(this, evt.x, evt.y);
	}

	onMouseDown(evt){
		console.log("down", evt.x, evt.y);
		this.requestPick = true;
		this.mouseX = evt.x;
		this.mouseY = evt.y;
	}

	onMouseUp(evt){
		console.log("up", evt.x, evt.y);
	}

	pickBegin(){
		this.nextIndex = 0;
		this.objectDict = [];
	}

	pickRegister(target){
		this.nextIndex++;
		this.objectDict[this.nextIndex] = target;
		return this.nextIndex;
	}
}

module.exports = MouseManager;