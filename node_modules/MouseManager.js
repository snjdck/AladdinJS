class MouseManager
{
	constructor(view3d){
		this.view3d = view3d;
		this.gl = view3d.gl;
		this.requestPick = false;
		this.objectList = [];
		this.init();
	}

	init(){
		const {canvas, gl} = this.view3d;
		canvas.addEventListener("mousemove", this.onMouseMove.bind(this));
		canvas.addEventListener("mousedown", this.onMouseDown.bind(this));
		canvas.addEventListener("mouseup"  , this.onMouseUp.bind(this));

		this.pickColorBuffer = gl.createRenderbuffer();
		this.pickDepthBuffer = gl.createRenderbuffer();
		gl.bindRenderbuffer(gl.RENDERBUFFER, this.pickColorBuffer);
		gl.renderbufferStorage(gl.RENDERBUFFER, gl.RGBA8, canvas.width, canvas.height);
		gl.bindRenderbuffer(gl.RENDERBUFFER, this.pickDepthBuffer);
		gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, canvas.width, canvas.height);
		gl.bindRenderbuffer(gl.RENDERBUFFER, null);

		this.frameBuffer = gl.createFramebuffer();
		gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
		gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, this.pickColorBuffer);
		gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.pickDepthBuffer);
		gl.bindFramebuffer(gl.FRAMEBUFFER, null);

		let buffer = new ArrayBuffer(4);
		this._pickData = new Uint8Array(buffer);
		this._pickValue = new Uint32Array(buffer);
	}

	update(){
		if(!this.requestPick){
			return;
		}
		this.requestPick = false;
		const {view3d, gl, mouseX, mouseY} = this;

		gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
		
		gl.clearColor(0, 0, 0, 0);
		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
		
		this._pickBegin();
		view3d.drawScene("pick");
		gl.readPixels(mouseX, view3d.height - mouseY, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, this._pickData);
		
		gl.bindFramebuffer(gl.FRAMEBUFFER, null);

		let mouseTarget = this.objectList[this._pickValue[0]];
		//console.log(mouseTarget, "click");
	}

	onMouseMove(evt){
		this.requestPick = true;
		this.mouseEvent = evt;
		this.mouseX = evt.x;
		this.mouseY = evt.y;
	}

	onMouseDown(evt){
		this.requestPick = true;
		this.mouseEvent = evt;
		this.mouseX = evt.x;
		this.mouseY = evt.y;
	}

	onMouseUp(evt){
		this.requestPick = true;
		this.mouseEvent = evt;
		this.mouseX = evt.x;
		this.mouseY = evt.y;
	}

	_pickBegin(){
		this.objectList.length = this.objectIndex = 0;
	}

	pickRegister(target){
		let index = ++this.objectIndex;
		this.objectList[index] = target;
		return index;
	}
}

module.exports = MouseManager;