"use strict";

const RenderTarget = require("./RenderTarget");

class MouseManager
{
	constructor(view3d){
		this.view3d = view3d;
		this.gl = view3d.gl;
		this.requestPick = false;
		this.objectList = [null];
		this.init();
	}

	init(){
		const {canvas, gl} = this.view3d;

		let mouseEventHandler = this.onMouseEvent.bind(this);
		for(let evtType of ["mousedown", "mouseup", "mousemove"]){
			canvas.addEventListener(evtType, mouseEventHandler);
		}

		this.renderTarget = new RenderTarget(canvas.width, canvas.height);

		let buffer = new ArrayBuffer(4);
		this._pickData = new Uint8Array(buffer);
		this._pickValue = new Uint32Array(buffer);
	}

	update(){
		if(!this.requestPick){
			return;
		}
		this.requestPick = false;
		const {view3d, gl, mouseX, mouseY} = this;

		this.renderTarget.active(gl);
		
		gl.clearColor(0, 0, 0, 0);
		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
		
		this._pickBegin();
		view3d.drawScene("pick");
		gl.readPixels(mouseX, view3d.height - mouseY, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, this._pickData);
		
		gl.bindFramebuffer(gl.FRAMEBUFFER, null);

		let mouseTarget = this.objectList[this._pickValue[0]];
		if(this.mouseEvent.type == "mouseup")
			console.log(mouseTarget, "click");
	}

	onMouseEvent(evt){
		this.requestPick = true;
		this.mouseEvent = evt;
		this.mouseX = evt.x;
		this.mouseY = evt.y;
	}

	_pickBegin(){
		this.objectList.length = 1;
	}

	pickRegister(target){
		let index = this.objectList.length;
		this.objectList[index] = target;
		return index;
	}
}

module.exports = MouseManager;