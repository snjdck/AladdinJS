"use strict";

const Transform = require("./Transform");
const Matrix2D = require("Matrix2D");

const RADIAN = Math.PI / 180;

class Transform2D extends Transform{
	constructor(){
		super(Matrix2D);
		this._x = 0.0;
		this._y = 0.0;
		this._scaleX = 1.0;
		this._scaleY = 1.0;
		this._rotation = 0.0;
	}

	isVisible(){
		return this._scaleX != 0 && this._scaleY != 0;
	}

	get transform(){
		if(this._isLocalMatrixDirty){
			Matrix2D.compose(this._localMatrix,
				this._scaleX, this._scaleY,
				this._rotation * RADIAN,
				this._x, this._y
			);
			this._isLocalMatrixDirty = false;
		}
		return this._localMatrix;
	}

	get x(){return this._x;}
	get y(){return this._y;}
	get scaleX(){return this._scaleX;}
	get scaleY(){return this._scaleY;}
	get rotation(){return this._rotation;}
	
	set x(value){
		if(this._x == value)
			return;
		this._x = value;
		this.onTransformChanged();
	}
	
	set y(value){
		if(this._y == value)
			return;
		this._y = value;
		this.onTransformChanged();
	}
	
	set scaleX(value){
		if(this._scaleX == value)
			return;
		this._scaleX = value;
		this.onTransformChanged();
	}
	
	set scaleY(value){
		if(this._scaleY == value)
			return;
		this._scaleY = value;
		this.onTransformChanged();
	}
	
	set scale(value){
		if(this._scaleX == value && this._scaleY == value)
			return;
		this._scaleX = this._scaleY = value;
		this.onTransformChanged();
	}
	
	set rotation(value){
		if(this._rotation == value)
			return;
		this._rotation = value;
		this.onTransformChanged();
	}
}

module.exports = Transform2D;