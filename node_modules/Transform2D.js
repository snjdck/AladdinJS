const EventEmitter = require("events");
const Matrix2D = require("Matrix2D");

const RADIAN = Math.PI / 180;

class Transform2D extends EventEmitter
{
	constructor(){
		super();
		this._x = 0.0;
		this._y = 0.0;
		this._scaleX = 1.0;
		this._scaleY = 1.0;
		this._rotation = 0.0;
		this._isWorldMatrixDirty = false;
		this._isLocalMatrixDirty = false;
		this._isWorldMatrixInvertDirty = false;
		this._isLocalMatrixInvertDirty = false;
		this._worldMatrix = new Matrix2D();
		this._localMatrix = new Matrix2D();
		this._worldMatrixInvert = new Matrix2D();
		this._localMatrixInvert = new Matrix2D();
	}

	onLocalMatrixDirty(){}
	onWorldMatrixDirty(){}

	getParent(){
		return this._parent;
	}

	getChildren(){
		return this._children;
	}

	isVisible(){
		return this._scaleX != 0 && this._scaleY != 0;
	}

	get worldTransform(){
		if(this._isWorldMatrixDirty){
			var parent = this.getParent();
			if(parent != null){
				Matrix2D.concat(this.transform, parent.worldTransform, this._worldMatrix);
			}else{
				this._worldMatrix.copyFrom(this.transform);
			}
			this._isWorldMatrixDirty = false;
		}
		return this._worldMatrix;
	}

	get transform(){
		if(this._isLocalMatrixDirty){
			Matrix2D.compose(this._localMatrix,
				this._scaleX, this._scaleY,
				this._rotation * RADIAN,
				this._x, this._y
			);
			this._isLocalMatrixDirty = false;
		}
		return this._localMatrix;
	}

	get worldTransformInvert(){
		if(this._isWorldMatrixInvertDirty){
			Matrix2D.invert(this.worldTransform, this._worldMatrixInvert);
			this._isWorldMatrixInvertDirty = false;
		}
		return this.worldMatrixInvert;
	}

	get transformInvert(){
		if(this._isLocalMatrixInvertDirty){
			Matrix2D.invert(this.transform, this._localMatrixInvert);
			this._isLocalMatrixInvertDirty = false;
		}
		return _localMatrixInvert;
	}

	markLocalMatrixDirty(){
		if(this._isLocalMatrixDirty)
			return;
		this._isLocalMatrixDirty = true;
		this._isLocalMatrixInvertDirty = true;
		this.onLocalMatrixDirty();
	}

	markWorldMatrixDirty(){
		if(this._isWorldMatrixDirty)
			return;
		this._isWorldMatrixDirty = true;
		this._isWorldMatrixInvertDirty = true;
		this.onWorldMatrixDirty();
		var children = this.getChildren();
		if(null == children){
			return;
		}
		for(var child of children){
			child.markWorldMatrixDirty();
		}
	}

	onTransformChanged(){
		this.markLocalMatrixDirty();
		this.markWorldMatrixDirty();
	}

	get x(){return this._x;}
	get y(){return this._y;}
	get scaleX(){return this._scaleX;}
	get scaleY(){return this._scaleY;}
	get rotation(){return this._rotation;}
	
	set x(value){
		if(this._x == value)
			return;
		this._x = value;
		this.onTransformChanged();
	}
	
	set y(value){
		if(this._y == value)
			return;
		this._y = value;
		this.onTransformChanged();
	}
	
	set scaleX(value){
		if(this._scaleX == value)
			return;
		this._scaleX = value;
		this.onTransformChanged();
	}
	
	set scaleY(value){
		if(this._scaleY == value)
			return;
		this._scaleY = value;
		this.onTransformChanged();
	}
	
	set scale(value){
		if(this._scaleX == value && this._scaleY == value)
			return;
		this._scaleX = this._scaleY = value;
		this.onTransformChanged();
	}
	
	set rotation(value){
		if(this._rotation == value)
			return;
		this._rotation = value;
		this.onTransformChanged();
	}
	
	isDescendant(target)
	{
		while(target != null){
			if(target == this)
				return true;
			target = target.getParent();
		}
		return false;
	}
	
	isAncestor(target)
	{
		if(target == null)
			return false;
		var node = this;
		do{
			if(node == target)
				return true;
			node = node.getParent();
		}while(node != null);
		return false;
	}
	
	calculateRelativeTransform(target, result)
	{
		if(target == null){
			result.copyFrom(this.worldTransform);
			return;
		}
		if(target == this){
			result.identity();
			return;
		}
		if(target == this.getParent()){
			result.copyFrom(this.transform);
			return;
		}
		if(target.getParent() == this){
			result.copyFrom(target.transformInvert);
			return;
		}
		if(this.isDescendant(target)){
			target.calculateRelativeTransform(this, result);
			result.invert();
			return;
		}
		if(this.isAncestor(target)){
			result.identity();
			var node = this;
			while(node != target){
				result.concat(node.transform);
				node = node.getParent();
			}
			return;
		}
		Matrix2D.concat(this.worldTransform, target.worldTransformInvert, result);
	}
}

module.exports = Transform2D;