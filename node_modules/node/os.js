'use strict';

/*
console.log(['platform', 'deviceMemory', 'hardwareConcurrency', 'language', 'userAgent'].map(k => navigator[k]));
console.log(['arch', 'platform', 'release', 'version', 'type'].map(k => require('os')[k]()));

require('os').platform();//compile time constant value
require('os').type() => ['Windows_NT', 'Darwin', 'Linux'];//call system uname
require('os').release().split('.', 1)[0]
*/

webView.getSettings().setJavaScriptEnabled(true);
webView.getSettings().setAllowFileAccess(true);//loadUrl can load file://
webView.getSettings().setAllowFileAccessFromFileURLs(true);//js can load file://
webView.getSettings().setAllowUniversalAccessFromFileURLs(true);//allow cross domain load
webView.loadUrl("file:///android_asset/index.html");

webview.evaluateJavascript('javascript:functionName(arg1, arg2)', null);
webview.evaluateJavascript('javascript:functionName(arg1, arg2)', value -> Log.i(value));
webview.evaluateJavascript('javascript:functionName(arg1, arg2)', new ValueCallback<String>(){
	@Override
	public void onReceiveValue(String value){
	}
});

webview.addJavascriptInterface(new JSInterface(this, webview), JSInterface.JS_INTERFACE_NAME);
public class JSInterface
{
	public static final String JS_INTERFACE_NAME = "JSInterface";
	private Context mContext;
	private WebView webView;

	public JSInterface(Context context, WebView webView){
		this.mContext = context;
		this.webView = webView;
	}

	@JavascriptInterface
	public void hello(String content) {
		Log.i("bqt", "JS 调用原生时是否发生在主线程：" + (Looper.myLooper() == Looper.getMainLooper()));//false
		new Handler(Looper.getMainLooper()).post(() -> //WebView等UI操作必须在主线程中进行
		Toast.makeText(mContext, "原生的hello方法被调用了：" + content, Toast.LENGTH_SHORT).show());

		SystemClock.sleep(3000);//模拟耗时操作

		String call = "javascript:javacalljs(" + System.currentTimeMillis() + ")";//格式很重要，大部分错误都是由于格式问题导致的
		new Handler(Looper.getMainLooper()).post(() -> webView.loadUrl(call));//WebView等UI操作必须在主线程中进行
	}

	@JavascriptInterface
	public void hello2(String content) {
		new Handler(Looper.getMainLooper()).post(() -> Toast.makeText(mContext, content, Toast.LENGTH_SHORT).show());

		SystemClock.sleep(3000);//模拟耗时操作

		String call = "javascript:javacalljs2(" + System.currentTimeMillis() + ")";//JS此方法的返回值会通过onReceiveValue回调到原生
		new Handler(Looper.getMainLooper()).post(() -> webView.evaluateJavascript(call, value -> {
			Log.i("bqt", "ValueCallback 是否发生在主线程：" + (Looper.myLooper() == Looper.getMainLooper()));//true
			Toast.makeText(mContext, "【onReceiveValue】" + value, Toast.LENGTH_SHORT).show();
		}));
	}
}


const callNative = function(callbackHook){
	const nextID = (i => () => i = i + 1 & 0xFFFF)(-1);
	const callbackMap = Object.create(null);
	window[callbackHook] = function(callbackID, success, data){
		const callback = callbackMap[callbackID];
		if(!callback)return;
		delete callbackMap[callbackID];
		callback(success, data);
	}
	return function(method, data, callback){
		const payload = {method, data};
		if(callback){
			const callbackID = nextID();
			callbackMap[callbackID] = callback;
			payload.callbackID = callbackID;
		}
		return this[method](JSON.stringify(payload));
	}
}
