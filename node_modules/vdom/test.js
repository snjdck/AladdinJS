
class TT extends Component{
	constructor(){
		super()
		this.count = 100;
	}
	componentDidMount(){
		setInterval(() =>{
			console.log('ddddd0000');
			this.count++;
		}, 1000)
		console.log('componentDidMount')
	}
	componentWillUnmount(){
		console.log('componentWillUnmount')
	}
	render(){
		console.log('render', this.count);
		return Element.New('div', null, ['---', this.count.toString()])
	}
}

let tree = Element.New('div', {id:'virtual-container'}, [
	Element.New('p', null, ['virtual dom']),
	Element.New('div', null, ['before update']),
	Element.New('ul', null, [
		Element.New('li', {class: 'item'}, ['item 1']),
		Element.New('li', {class: 'item'}, ['item 2']),
		Element.New('li', {class: 'item'}, ['item 3']),
	]),
	Element.New('div', null, ['foot']),
	Element.New(props => Element.New('div', null, ['000'])),
	Element.New(function(){return Element.New('div', null, ['111'])}),
	Element.New(TT),
])



let newTree = Element.New('div', {id:'virtual-container'}, [
	Element.New('h3', {onClick:evt => console.log('click')}, ['virtual dom']),
	Element.New('div', null, ['after update']),
	Element.New('ul', {class:'marginLeft10'}, [
		Element.New('li', {class: 'item'}, ['item 1']),
		//Element.New('li', {class: 'item'}, ['item 2']),
		Element.New('li', {class: 'item'}, ['item 3']),
		Element.New('li', {class: 'item'}, ['item 4','item 5']),
		Element.New('li', {class: 'item'}, ['item 5']),
		Element.New('li', {class: 'item'}, [Element.New('p', null, ['==='])]),
	]),
	'fuck',
	Element.New(TT),
	Element.New(TT),
	Element.New(TT),
	Element.New(TT),
	//Element.New('p', null, ['new div']),
	//Element.New(props => Element.New('div', props, ['??']), {id:'aaa'}),
])

//1,4,5,9,10,0,0
renderDOM(document.getElementById("virtualDom"), tree);
/*
//console.log(collectChildren(tree))
console.log(diff(tree, newTree))

let root = tree.render();
document.getElementById("virtualDom").appendChild(root);
setInterval(() => {
	dfsWalk(root, diff(tree, newTree))
	tree = newTree;
}, 500)
//*/