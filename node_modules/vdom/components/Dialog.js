'use strict';

require('./Dialog.css');

const {createElement} = require('../createElement');

class Dialog extends React.Component
{
	constructor(props){
		super(props);
		this.dialogRef = React.createRef();
	}

	showModal(callback){
		const dialog = this.dialogRef.current;
		if(dialog.open)return;
		const {maskClosable, resetOnClose} = this.props;
		function onClose(){
			dialog.removeEventListener('click', onClick);
			const form = dialog.firstElementChild;
			const result = new FormData(form);
			if(resetOnClose)form.reset();
			callback(dialog.returnValue, result);
		}
		function onClick(evt){
			if(evt.target != dialog)return;
			dialog.close('');
		}

		dialog.addEventListener('close', onClose, {once:true});
		if(maskClosable){
			dialog.addEventListener('click', onClick);
		}
		dialog.showModal();
	}

	componentDidUpdate(){
		const {isOpen, onClose} = this.props;
		if(!isOpen)return;
		this.showModal(onClose);
	}
}

Dialog.prototype.render = createElement(function(tag, end){
	const {title, children, style, buttonList} = this.props;
	tag('dialog', {style, ref:this.dialogRef})
		tag('form', {method:'dialog'})
			tag('header'), tag`${title}`, end('header')
			tag('main', {children}, true)
			tag('footer')
				for(let {title, ...props} of buttonList){
					tag('button', {...props, type:'submit'}), tag`${title}`, end('button')
				}
			end('footer')
		end('form')
	end('dialog')
});

module.exports = Dialog;
