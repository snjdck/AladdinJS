'use strict';

require('./TabPanel.css');

const {createElement} = require('../createElement');

const TabPanel = createElement(function(tag, end, {children, activeKey, onChange}){
	tag('div', {className:'tab-panel'})
		tag('div')
			React.Children.map(children, ({key, props:{title}}) => {
				const isActive = activeKey == key;
				const className = isActive ? 'active' : null;
				const onClick = isActive ? null : () => onChange(key);
				tag('span', {key, className, onClick}), tag`${title}`, end('span')
			});
		end('div')
		tag('div')
			React.Children.map(children, (child, i) => {
				const {key} = child;
				const className = activeKey == key ? 'active' : undefined;
				tag(React.cloneElement(child, {key, className, title:null}));
			});
		end('div')
	end('div')
});
/*
const initTabPanel = function(){
	function onClick({target}){
		if(target.classList.contains('active')){
			return;
		}
		const tabList = target.parentNode.children;
		for(let i=tabList.length-1; i>=0; --i){
			const tab = tabList[i];
			const panel = tab.parentNode.nextElementSibling.children[i];
			const activeFlag = target == tab;
			tab.classList.toggle('active', activeFlag);
			panel.classList.toggle('active', activeFlag);
			if(activeFlag){
				panel.dispatchEvent(new Event('active'));
			}
		}
	}
	return function(panel){
		const tabList = panel.firstElementChild.children;
		for(let tab of tabList){
			tab.addEventListener('click', onClick);
		}
	}
}();
//*/
module.exports = TabPanel;
