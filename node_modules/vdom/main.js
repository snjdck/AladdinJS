

const isFunction = v => typeof v == 'function';
const isString = v => typeof v == 'string';
const tagSymbol = Symbol();

function calcFinalValue(v){
	while(isFunction(v)){
		v = v();
	}
	return v;
}

const ctx = new Proxy({}, {
	has(target, key){
		//console.log('has', key)
		if(key in global)return false;
		return true;
	},
	get(target, key){
		if(key == Symbol.unscopables){
			return {fn: true};
		}
		return (...attr) => (...args) => {
			let prop = attr[0];
			if(args.length == 0 && attr.length > 0){
				if(attr.length > 1 || isFunction(prop) || isString(prop) || prop[tagSymbol]){
					args = attr;
					prop = undefined;
				}
			}
			const result = {type: key, children: args.map(calcFinalValue), prop};
			result[tagSymbol] = true;
			return result;
		};
	}
});

function build(text){
	const fn = Function(`with(this){return ${text.trim()}}`);
	return () => calcFinalValue(fn.call(ctx));
}

let fn = build(`
html(
	head,
	body(
		div,
		div(p),
		div({id:'my div'}),
		div('hello'),
		div(span()()),
		fuck_you
	),
)
`)
console.log(JSON.stringify(fn(), null, 2))

const tag = (type, prop) => (...args) => ({type, prop, children: args.map(calcFinalValue)});

let result = tag('html')(
	tag('head'),
	tag('body')(
		tag('div'),
		tag('div')(tag('p')),
		tag('div', {id:'my div'}),
		tag('div')('hello'),
		tag('div')(tag('span')),
		tag('fuck_you')
	),
)

console.log(JSON.stringify(result, null, 2))

function t([type]){
	const fn = prop => (...args) => ({type, prop, children: args.map(calcFinalValue)});
	return Object.defineProperty(fn(), 'prop', {value:fn});
}

console.log(JSON.stringify(
	t `html` (
		t `head`,
		t `body` (`???`),
		t `div` .prop({id:555}),
		t `div` .prop({id:666}) (
			t `span`,
		),
	)
, null, 2))