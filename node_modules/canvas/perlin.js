
const p = [151,160,137,91,90,15,
	131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
	77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
	135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
	5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
	129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
	251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
	49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
	138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
];
p.push(...p);

const fade = t => t * t * t * (t * (t * 6 - 15) + 10);//6t^5 - 15t^4 + 10t^3
const lerp = (a, b, x) => a + (b - a) * x;
const scale = n => 0.5 * (1 + n);//[-1, 1] -> [0, 1]

function grad(h, x, y=0, z=0){
	const u = h & 8 ? y : x;
	const v = (h & 13) != 12 ? (h & 12 ? z : y) : x;
	return (h & 1 ? -u : u) + (h & 2 ? -v : v);
}

function octave(octaves, persistence, ...xyz){
	let total = 0;
	let frequency = 1;
	let amplitude = 1;
	let maxValue = 0;
	for(let i=0; i<octaves; ++i){
		total += perlin(...xyz.map(v => v * frequency)) * amplitude;
		maxValue += amplitude;
		amplitude *= persistence;
		frequency *= 2;
	}
	return total / maxValue;
}

const perlin = function(){
	const toInt = v => v & 0xFF;
	const toFloat = v => v - Math.floor(v);
	const reduceUVW = (r, f) => r.slice(r.length >> 1).map((v, i) => lerp(r[i], v, f));
	const reduceHash = (r, N) => r.flatMap(v => [p[v+N], p[v+N+1]]);
	return function(...args){
		const xyz = args.map(toFloat);
		const uvw = xyz.map(fade);
		const h = 1 << (args.length - 1);
		return scale(uvw.reduce(
			reduceUVW,
			args.map(toInt).reduce(reduceHash, [0]).map(
				(v, i) => grad(v, ...xyz.map(
					(n, j) => (i & h >> j) ? (n - 1) : n
				))
			)
		)[0]);
	};
}();
/*
function noise1d(x){
	const X = x & 0xFF;

	x -= Math.floor(x);

	const u = fade(x);

	const AAA = p[X  ];
	const BAA = p[X+1];

	return scale(
		lerp(grad(AAA, x, 0, 0), grad(BAA, x - 1, 0, 0), u)
	);
}

function noise2d(x, y){
	const X = x & 0xFF;
	const Y = y & 0xFF;

	x -= Math.floor(x);
	y -= Math.floor(y);

	const u = fade(x);
	const v = fade(y);

	const A = p[X  ] + Y;
	const B = p[X+1] + Y;

	const AAA = p[A  ];
	const BAA = p[B  ];
	const ABA = p[A+1];
	const BBA = p[B+1];

	return scale(lerp(
		lerp(grad(AAA, x, y  , 0), grad(BAA, x - 1, y  , 0), u),
		lerp(grad(ABA, x, y-1, 0), grad(BBA, x - 1, y-1, 0), u),
		v
	));
}

function noise3d(x, y, z){
	const X = x & 0xFF;
	const Y = y & 0xFF;
	const Z = z & 0xFF;

	x -= Math.floor(x);
	y -= Math.floor(y);
	z -= Math.floor(z);

	const u = fade(x);
	const v = fade(y);
	const w = fade(z);

	const A = p[X  ] + Y;
	const B = p[X+1] + Y;

	const AA = p[A  ] + Z;
	const BA = p[B  ] + Z;
	const AB = p[A+1] + Z;
	const BB = p[B+1] + Z;

	const AAA = p[AA];
	const BAA = p[BA];
	const ABA = p[AB];
	const BBA = p[BB];
	const AAB = p[AA+1];
	const BAB = p[BA+1];
	const ABB = p[AB+1];
	const BBB = p[BB+1];

	return scale(lerp(
		lerp(
			lerp(grad(AAA, x, y  , z  ), grad(BAA, x - 1, y  , z  ), u),
			lerp(grad(ABA, x, y-1, z  ), grad(BBA, x - 1, y-1, z  ), u),
			v
		),
		lerp(
			lerp(grad(AAB, x, y  , z-1), grad(BAB, x - 1, y  , z-1), u),
			lerp(grad(ABB, x, y-1, z-1), grad(BBB, x - 1, y-1, z-1), u),
			v
		),
		w
	));
}

exports.noise1d = noise1d;
exports.noise2d = noise2d;
exports.noise3d = noise3d;
*/
exports.octave = octave;
exports.perlin = perlin;