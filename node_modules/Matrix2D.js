class Matrix2D
{
	static compose(matrix, scaleX, scaleY, rotation=0, tx=0, ty=0)
	{
		matrix.tx = tx;
		matrix.ty = ty;
		
		if(0 == rotation)
		{
			matrix.a = scaleX;
			matrix.d = scaleY;
			matrix.b = matrix.c = 0;
			return;
		}
		
		var cos = Math.cos(rotation);
		var sin = Math.sin(rotation);
		
		matrix.a = scaleX * cos;
		matrix.c = scaleY * -sin;
		matrix.b = scaleX * sin;
		matrix.d = scaleY * cos;
	}

	static concat(left, right, output)
	{
		var a1    = left.a;
		var b1    = left.b;
		var c1    = left.c;
		var d1    = left.d;
		var tx1   = left.tx;
		var ty1   = left.ty;
		
		var a2    = right.a;
		var b2    = right.b;
		var c2    = right.c;
		var d2    = right.d;
		var tx2   = right.tx;
		var ty2   = right.ty;
		
		output.a	= a1 * a2 + b1 * c2;
		output.b	= a1 * b2 + b1 * d2;
		
		output.c	= c1 * a2 + d1 * c2;
		output.d	= c1 * b2 + d1 * d2;
		
		output.tx	= tx1 * a2 + ty1 * c2 + tx2;
		output.ty	= tx1 * b2 + ty1 * d2 + ty2;
	}

	static invert(matrix, output)
	{
		var a    = matrix.a;
		var b    = matrix.b;
		var c    = matrix.c;
		var d    = matrix.d;
		var tx   = matrix.tx;
		var ty   = matrix.ty;
		
		var factor = a * d - b * c;
		
		if(0 == factor){
			output.a = output.d = 1;
			output.b = output.c = output.tx = output.ty = 0;
			return;
		}
		
		if(0 == c && 0 == b){//rotation == 0
			output.b = output.c = 0;
			output.a = 1 / a;
			output.d = 1 / d;
			output.tx = output.a * -tx;
			output.ty = output.d * -ty;
			return;
		}
		
		factor = 1 / factor;
		
		output.a = d * factor;
		output.d = a * factor;
		output.b = b * -factor;
		output.c = c * -factor;
		output.tx = -(tx * output.a  + ty * output.c);
		output.ty = -(tx * output.b  + ty * output.d);
	}

	constructor(){
		this.identity();
	}

	identity(){
		this.a = this.d = 1.0;
		this.c = this.b = 0.0;
		this.tx = this.ty = 0.0;
	}

	concat(other){
		Matrix2D.concat(this, other, this);
	}

	invert(){
		Matrix2D.invert(this, this);
	}

	rotate(angle){
		var sin = Math.sin(angle);
		var cos = Math.cos(angle);
		
		var a   = this.a;
		var b   = this.b;
		var c   = this.c;
		var d   = this.d;
		var tx  = this.tx;
		var ty  = this.ty;
		
		this.a  = a  * cos - b  * sin;
		this.c  = c  * cos - d  * sin;
		this.tx = tx * cos - ty * sin;
		
		this.b  = a  * sin + b  * cos;
		this.d  = c  * sin + d  * cos;
		this.ty = tx * sin + ty * cos;
	}

	scale(sx, sy){
		this.a  *= sx;
		this.c  *= sx;
		this.tx *= sx;
		
		this.b  *= sy;
		this.d  *= sy;
		this.ty *= sy;
	}

	translate(dx, dy){
		this.tx += dx;
		this.ty += dy;
	}

	transformCoords(x, y, output){
		output.x = (this.a * x) + (this.c * y) + this.tx;
		output.y = (this.b * x) + (this.d * y) + this.ty;
	}

	transformCoordsDelta(x, y, output){
		output.x = (this.a * x) + (this.c * y);
		output.y = (this.b * x) + (this.d * y);
	}

	transformCoordsInv(x, y, output){
		var a    = this.a;
		var b    = this.b;
		var c    = this.c;
		var d    = this.d;
		var tx   = this.tx;
		var ty   = this.ty;
		
		var factor = a * d - b * c;
		
		if(0 == factor){
			output.x = x;
			output.y = y;
			return;
		}
		
		if(0 == c && 0 == b){//rotation == 0
			output.x = (x - tx) / a;
			output.y = (y - ty) / d;
			return;
		}
		
		var dx = x - tx;
		var dy = y - ty;
		
		factor = 1 / factor;
		
		output.x = factor * (d * dx - c * dy);
		output.y = factor * (a * dy - b * dx);
	}

	transformCoordsDeltaInv(x, y, output){
		var a    = this.a;
		var b    = this.b;
		var c    = this.c;
		var d    = this.d;
		var tx   = this.tx;
		var ty   = this.ty;
		
		var factor = a * d - b * c;
		
		if(0 == factor){
			output.x = x;
			output.y = y;
			return;
		}
		
		if(0 == c && 0 == b){//rotation == 0
			output.x = x / a;
			output.y = y / d;
			return;
		}
		
		factor = 1 / factor;
		
		output.x = factor * (d * x - c * y);
		output.y = factor * (a * y - b * x);
	}

	copyFrom(other){
		this.a = other.a;
		this.b = other.b;
		this.c = other.c;
		this.d = other.d;
		this.tx = other.tx;
		this.ty = other.ty;
	}

	setTo(a, b, c, d, tx, ty){
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}

	clone(){
		var matrix = new Matrix2D();
		matrix.copyFrom(this);
		return matrix;
	}

	copyToArray(dest, offset){
		dest[offset  ] = this.a;
		dest[offset+1] = this.c;
		dest[offset+2] = this.tx;
		dest[offset+4] = this.b;
		dest[offset+5] = this.d;
		dest[offset+6] = this.ty;
	}
}

module.exports = Matrix2D;