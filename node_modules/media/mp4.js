'use strict';

const fs = require('fs');

const data

const methodDict = {
	ftyp(data, offset, end){
		const majorBrand = data.toString('utf8', offset, offset + 4);
		const minorVersion = data.readUInt32BE(offset + 4);
		console.log(majorBrand, minorVersion, data.toString('utf8', offset+8, offset + 16))
	},
	moov(data, offset, end){
		console.group();
		this(data, offset, end);
		console.groupEnd();
	},
	mvhd(data, offset, end){
		const version = data.readUInt8(offset);
		const createTime = data.readUInt32BE(offset + 4);
		const modifyTime = data.readUInt32BE(offset + 8);
		const timeScale = data.readUInt32BE(offset + 12);
		const duration = data.readUInt32BE(offset + 16);
		const rate = data.readUInt32BE(offset + 20) / 0x10000;
		const volume = data.readUInt16BE(offset + 24) / 0x100;

		console.log(duration / timeScale)
	},
	trak(data, offset, end){
		console.group();
		this(data, offset, end);
		console.groupEnd();
	},
	tkhd(){

	},
	edts(){

	},
	mdia(data, offset, end){
		console.group();
		this(data, offset, end);
		console.groupEnd();
	},
	mdhd(){

	},
	hdlr(data, offset, end){
		const handlerType = data.toString('utf8', offset + 8, offset + 12);
		console.log(handlerType)
	},
	minf(data, offset, end){
		console.group();
		this(data, offset, end);
		console.groupEnd();
	},
	vmhd(){

	},
	dinf(data, offset, end){
		console.group();
		this(data, offset, end);
		console.groupEnd();
	},
	dref(data, offset, end){

	},
	stbl(data, offset, end){
		console.group();
		this(data, offset, end);
		console.groupEnd();
	},
	stsd(data, offset, end){

	},
	stts(){

	},
	stss(){},
	sdtp(){},
	stsc(){},
	stsz(){},
	stco(){},
	ctts(){},
	smhd(){

	},
	udta(data, offset, end){
	},
	uuid(data, offset, end){

	},
	free(data, offset, end){

	},
	mdat(data, offset, end){

	}
}

function main(data, begin=0, end=data.length){
	for(let i=begin; i<end;){
		let size = data.readUInt32BE(i);
		const type = data.toString('utf8', i + 4, i + 8);
		let offset = 8;
		if(size == 1){
			size = data.readUInt32BE(i + 12);
			offset = 16;
		}
		console.log(type, size);
		methodDict[type].call(main, data, i + offset, i + size);
		i += size;
	}
}

main(data);