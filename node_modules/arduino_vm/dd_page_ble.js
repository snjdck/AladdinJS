
function invoke(name, args){
	return new Promise(resolve => {
		dd[name](Object.assign({success:resolve}, args));
	})
}

const uuid = key => `0000${key}-0000-1000-8000-00805f9b34fb`;
let deviceId;

Page({
	onLoad(query){
		console.info(`Page onLoad with query: ${JSON.stringify(query)}`);
		this.webViewContext = dd.createWebViewContext('web-view');
	},
	onUnload(){
		//if(!this.data.deviceId)return;
		//dd.disconnectBLEDevice({deviceId:this.data.deviceId});
	},
	async onMessage({detail}){
		if(detail.fn == 'send'){
			await invoke('writeBLECharacteristicValue', {
				deviceId,
				serviceId: uuid('f100'),
				characteristicId: uuid('f101'),
				value: detail.value
			});
			this.webViewContext.postMessage({fn:'reply'});
			return;
		}
		if(detail.fn == 'reset'){
			await invoke('writeBLECharacteristicValue', {
				deviceId,
				serviceId: uuid('f200'),
				characteristicId: uuid('f202'),
				value: '01'
			});
			await invoke('writeBLECharacteristicValue', {
				deviceId,
				serviceId: uuid('f200'),
				characteristicId: uuid('f202'),
				value: '00'
			});
			this.webViewContext.postMessage({fn:'reply'});
			return;
		}
		await invoke('startBluetoothDevicesDiscovery', {allowDuplicatesKey: true});
		let device;
		dd.onBluetoothDeviceFound(async(evt)=>{
			if(device)return;
			for(let item of evt.devices){
				if(item.localName.indexOf('WeeeMake_LE_') != 0)continue;
				if(item.localName == 'WeeeMake_LE_B92ECF'){
					dd.stopBluetoothDevicesDiscovery();
					dd.offBluetoothDeviceFound();
					device = item;
					break;
				}
			}
			if(!device)return;
			deviceId = device.deviceId;
			await invoke('connectBLEDevice', {deviceId});

			dd.onBLECharacteristicValueChange(evt => {
				this.webViewContext.postMessage({fn:'data',value:evt.value});
			})
			await invoke('notifyBLECharacteristicValueChange', {
				deviceId,
				serviceId: uuid('f100'),
				characteristicId: uuid('f102'),
				state: true
			});
		});
	},
});
