'use strict';

const {execFileSync} = require('child_process');
const {extname, join} = require('path');
const os = require('os');
const {readFileSync, writeFileSync, mkdtempSync} = require('fs');
const {walkDir, clearFolderSync} = require('node/fs');

/*
const fileSet = new Set();
walkDir('arduino_build/libraries', path => {
	if(extname(path) == '.o'){
		fileSet.add(path)
	}
});
execFileSync(avr_gcc_ar, ['rcs', 'output.a', ...fileSet]);
*/

function compile(code, avr_root, includes=[], libs=[]){
	const avr_gcc = 	avr_root + `avr-gcc.exe`;
	const avr_gpp = 	avr_root + `avr-g++.exe`;
	const avr_objcopy = avr_root + `avr-objcopy.exe`;

	const directory = mkdtempSync(join(os.tmpdir(), 'ArduinoTemp-'));

	const sketch_cpp = 	join(directory, 'sketch.cpp');
	const sketch_o = 	join(directory, 'sketch.cpp.o');
	const sketch_elf = 	join(directory, 'sketch.elf');
	const sketch_hex = 	join(directory, 'sketch.hex');

	try{
		writeFileSync(sketch_cpp, code);
		execFileSync(avr_gpp, ['-c', '-g', '-Os', '-std=gnu++11', '-fpermissive', '-fno-exceptions', '-ffunction-sections', '-fdata-sections', '-fno-threadsafe-statics', '-MMD', '-flto',
			'-mmcu=atmega328p',
			'-D', 'F_CPU=16000000L',
			'-D', 'ARDUINO=10810',
			'-D', 'ARDUINO_AVR_UNO',
			'-D', 'ARDUINO_ARCH_AVR',
			...includes.map(v => `-I${v}`),
			'-o', sketch_o,
			sketch_cpp
		]);
		execFileSync(avr_gcc, ['-Os', '-g', '-flto', '-fuse-linker-plugin', '-Wl,--gc-sections', '-mmcu=atmega328p', '-lm',
			'-o', sketch_elf, sketch_o, ...libs,
		]);
		execFileSync(avr_objcopy, ['-O', 'ihex', '-R', '.eeprom', sketch_elf, sketch_hex]);
		return readFileSync(sketch_hex);
	}finally{
		clearFolderSync(directory, true);
	}
}

module.exports = compile;
