
'use strict';

const {join, basename, relative} = require('path');
const {execFileSync} = require('child_process');
const {mkdirSync} = require('fs');
const {walkDir} = require('node/fs');

const root = 'Arduino';

const avr_gcc = 	join(root, 'hardware/tools/avr/bin/avr-gcc');
const avr_gpp = 	join(root, 'hardware/tools/avr/bin/avr-g++');
const avr_gcc_ar  = join(root, 'hardware/tools/avr/bin/avr-gcc-ar');

const coreLib = [];
walkDir(join(root, 'hardware/arduino/avr/cores/arduino'), v => {
	if(!v.endsWith('.h')){
		coreLib.push(relative(root, v));
	}
});

const weeemakeLib = ['hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp'];
walkDir(join(root, 'libraries/Weeemake/src'), v => {
	if(v.endsWith('.cpp')){
		weeemakeLib.push(relative(root, v));
	}
});
walkDir(join(root, 'libraries/robot_test/src'), v => {
	if(v.endsWith('.cpp')){
		weeemakeLib.push(relative(root, v));
	}
});

const includeList = [
	'-Ihardware/arduino/avr/cores/arduino',
	'-Ihardware/arduino/avr/variants/standard',
	'-Ilibraries/Weeemake/src',
	'-Ilibraries/robot_test/src',
	'-Ihardware/arduino/avr/libraries/SoftwareSerial/src',
];

function compile(cmd, output, fileList, args){
	for(let name of fileList){
		execFileSync(cmd, ['-c','-flto',
			...args,
			'-D','ARDUINO_ARCH_AVR',
			'-D','ARDUINO=10810',
			'-D','F_CPU=16000000L',
			'-o', join(output, `${basename(name)}.o`),
			name
		], {cwd:root});
	}
}

function build(mcu){
	const output = join(process.cwd(), mcu);
	mkdirSync(output);
	includeList[1] = '-Ihardware/arduino/avr/variants/' + (mcu == 'atmega328p' ? 'standard' : 'mega');
	const define = '-D ARDUINO_AVR_' + (mcu == 'atmega328p' ? 'UNO' : 'MEGA2560');
	compile(avr_gpp, output, weeemakeLib, [`-mmcu=${mcu}`,define,'-std=gnu++11','-Os','-w','-ffunction-sections','-fdata-sections','-Wno-error=narrowing','-fpermissive','-fno-exceptions','-fno-threadsafe-statics',...includeList]);
	compile(avr_gpp, output, coreLib.filter(v => v.endsWith('.cpp')), [`-mmcu=${mcu}`,define,'-std=gnu++11','-Os','-w','-ffunction-sections','-fdata-sections','-Wno-error=narrowing','-fpermissive','-fno-exceptions','-fno-threadsafe-statics',...includeList.slice(0, 2)]);
	compile(avr_gcc, output, coreLib.filter(v => v.endsWith('.c')), [`-mmcu=${mcu}`,define,'-std=gnu11','-Os','-w','-ffunction-sections','-fdata-sections','-fno-fat-lto-objects',...includeList.slice(0, 2)]);
	compile(avr_gcc, output, coreLib.filter(v => v.endsWith('.S')), [`-mmcu=${mcu}`,define,'-x','assembler-with-cpp',...includeList.slice(0, 2)]);
	execFileSync(avr_gcc_ar, ['rcs', `../${mcu}.a`, ...weeemakeLib.concat(coreLib).map(v => `${basename(v)}.o`)], {cwd:output});
}

build('atmega328p');
build('atmega2560');
