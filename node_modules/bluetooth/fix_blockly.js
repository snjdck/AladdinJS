'use strict';

Blockly.FieldNumber.prototype.showEditor_ = function() {
	this.workspace_ = this.sourceBlock_.workspace;
	Blockly.FieldNumber.activeField_ = this;
	this.showInlineEditor_(true);
	//this.htmlInput_.setAttribute('type', 'number');
	this.htmlInput_.setAttribute('readonly', 'true');
	this.showNumPad_();
}

Blockly.FieldNumber.DROPDOWN_WIDTH = 168;

/**
 * Buttons for the num-pad, in order from the top left.
 * Values are strings of the number or symbol will be added to the field text
 * when the button is pressed.
 * @type {Array.<string>}
 * @const
 */
// Calculator order
Blockly.FieldNumber.NUMPAD_BUTTONS = ['7', '8', '9', '4', '5', '6', '1', '2', '3', '.', '0', '-', ' '];

/**
 * Src for the delete icon to be shown on the num-pad.
 * @type {string}
 * @const
 */
Blockly.FieldNumber.NUMPAD_DELETE_ICON = 'data:image/svg+xml;utf8,' +
  '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40">' +
  '<path d="M28.89,11.45H16.79a2.86,2.86,0,0,0-2,.84L9.09,1' +
  '8a2.85,2.85,0,0,0,0,4l5.69,5.69a2.86,2.86,0,0,0,2,.84h12' +
  '.1a2.86,2.86,0,0,0,2.86-2.86V14.31A2.86,2.86,0,0,0,28.89' +
  ',11.45ZM27.15,22.73a1,1,0,0,1,0,1.41,1,1,0,0,1-.71.3,1,1' +
  ',0,0,1-.71-0.3L23,21.41l-2.73,2.73a1,1,0,0,1-1.41,0,1,1,' +
  '0,0,1,0-1.41L21.59,20l-2.73-2.73a1,1,0,0,1,0-1.41,1,1,0,' +
  '0,1,1.41,0L23,18.59l2.73-2.73a1,1,0,1,1,1.42,1.41L24.42,20Z" fill="white"/></svg>';

Blockly.FieldNumber.prototype.showNumPad_ = function() {
	// If there is an existing drop-down someone else owns, hide it immediately
	// and clear it.
	Blockly.DropDownDiv.hideWithoutAnimation();
	Blockly.DropDownDiv.clearContent();

	var contentDiv = Blockly.DropDownDiv.getContentDiv();

	this.addButtons_(contentDiv);

	// Set colour and size of drop-down
	Blockly.DropDownDiv.setColour(this.sourceBlock_.getColour(), this.sourceBlock_.getColourTertiary());
	contentDiv.style.width = Blockly.FieldNumber.DROPDOWN_WIDTH + 'px';

	Blockly.DropDownDiv.showPositionedByBlock(this, this.sourceBlock_, this.onHide_.bind(this));
};

Blockly.FieldNumber.prototype.onHide_ = function(){
	this.setValue(this.htmlInput_.value);
};

/**
 * Add number, punctuation, and erase buttons to the numeric keypad's content
 * div.
 * @param {Element} contentDiv The div for the numeric keypad.
 * @private
 */
Blockly.FieldNumber.prototype.addButtons_ = function(contentDiv) {
	this.decimalAllowed_ = true;
	this.negativeAllowed_ = true;
	var buttonColour = this.sourceBlock_.getColour();
	var buttonBorderColour = this.sourceBlock_.getColourTertiary();

	// Add numeric keypad buttons
	var buttons = Blockly.FieldNumber.NUMPAD_BUTTONS;
	for (var i = 0, buttonText; buttonText = buttons[i]; i++) {
	var button = document.createElement('button');
	button.setAttribute('class', 'blocklyNumPadButton');
	button.setAttribute('style',
		'background:' + buttonColour + ';' +
		'border: 1px solid ' + buttonBorderColour + ';');
	button.title = buttonText;
	button.innerHTML = buttonText;
	Blockly.bindEvent_(button, 'mousedown', this,
		Blockly.FieldNumber.numPadButtonTouch);
	if (buttonText == '.' && !this.decimalAllowed_) {
	  // Don't show the decimal point for inputs that must be round numbers
	  button.setAttribute('style', 'visibility: hidden');
	} else if (buttonText == '-' && !this.negativeAllowed_) {
	  continue;
	} else if (buttonText == ' ' && !this.negativeAllowed_) {
	  continue;
	} else if (buttonText == ' ' && this.negativeAllowed_) {
	  button.setAttribute('style', 'visibility: hidden');
	}
	contentDiv.appendChild(button);
	}
	// Add erase button to the end
	var eraseButton = document.createElement('button');
	eraseButton.setAttribute('class', 'blocklyNumPadButton');
	eraseButton.setAttribute('style',
	  'background:' + buttonColour + ';' +
	  'border: 1px solid ' + buttonBorderColour + ';');
	eraseButton.title = 'Delete';

	var eraseImage = document.createElement('img');
	eraseImage.src = Blockly.FieldNumber.NUMPAD_DELETE_ICON;
	eraseButton.appendChild(eraseImage);

	Blockly.bindEvent_(eraseButton, 'mousedown', this,
	  Blockly.FieldNumber.numPadEraseButtonTouch);
	contentDiv.appendChild(eraseButton);
};

/**
 * Call for when a num-pad number or punctuation button is touched.
 * Determine what the user is inputting and update the text field appropriately.
 * @param {Event} e DOM event triggering the touch.
 */
Blockly.FieldNumber.numPadButtonTouch = function(e) {
	// String of the button (e.g., '7')
	var spliceValue = e.target.innerHTML;

	// Old value of the text field
	var oldValue = this.htmlInput_.value;
	// Determine the selected portion of the text field
	var selectionStart = this.htmlInput_.selectionStart;
	var selectionEnd = this.htmlInput_.selectionEnd;

	// Splice in the new value
	var newValue = oldValue.slice(0, selectionStart) + spliceValue +
	  oldValue.slice(selectionEnd);

	// Set new value and advance the cursor
	Blockly.FieldNumber.updateDisplay_.call(this, newValue, selectionStart + spliceValue.length);

	// This is just a click.
	Blockly.Touch.clearTouchIdentifier();

	// Prevent default to not lose input focus
	e.preventDefault();
};

/**
 * Call for when the num-pad erase button is touched.
 * Determine what the user is asking to erase, and erase it.
 * @param {Event} e DOM event triggering the touch.
 */
Blockly.FieldNumber.numPadEraseButtonTouch = function(e) {
	// Old value of the text field
	var oldValue = this.htmlInput_.value;
	// Determine what is selected to erase (if anything)
	var selectionStart = this.htmlInput_.selectionStart;
	var selectionEnd = this.htmlInput_.selectionEnd;

	// If selection is zero-length, shift start to the left 1 character
	if (selectionStart == selectionEnd) {
	selectionStart = Math.max(0, selectionStart - 1);
	}

	// Cut out selected range
	var newValue = oldValue.slice(0, selectionStart) +
	  oldValue.slice(selectionEnd);

	Blockly.FieldNumber.updateDisplay_.call(this, newValue, selectionStart);

	// This is just a click.
	Blockly.Touch.clearTouchIdentifier();

	// Prevent default to not lose input focus which resets cursors in Chrome
	e.preventDefault();
};

/**
 * Update the displayed value and resize/scroll the text field as needed.
 * @param {string} newValue The new text to display.
 * @param {string} newSelection The new index to put the cursor
 * @private.
 */
Blockly.FieldNumber.updateDisplay_ = function(newValue, newSelection) {
	var htmlInput = this.htmlInput_;
	// Updates the display. The actual setValue occurs when editing ends.
	htmlInput.value = newValue;
	// Resize and scroll the text field appropriately
	Blockly.FieldNumber.superClass_.resizeEditor_.call(
	  Blockly.FieldNumber.activeField_);
	htmlInput.setSelectionRange(newSelection, newSelection);
	htmlInput.scrollLeft = htmlInput.scrollWidth;
	//Blockly.FieldNumber.activeField_.validate_();
};
