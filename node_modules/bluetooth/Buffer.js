'use strict';

if(typeof Buffer == 'undefined'){
	function Buffer(){}
	Buffer.from = list => Uint8Array.from(list);
	Buffer.allocUnsafe = n => new Uint8Array(n);
	Buffer.alloc = n => new Uint8Array(n);
	Buffer.concat = list => {
		let buffer = new Uint8Array(list.reduce((a, b) => a + b.length, 0));
		let offset = 0;
		for(let v of list){
			buffer.set(v, offset);
			offset += v.length;
		}
		return buffer;
	};
	Uint8Array.prototype.writeUInt16LE = function(v, offset=0){
		this[offset] = v & 0xFF;
		this[offset+1] = v >> 8 & 0xFF;
		return offset + 2;
	}
	Uint8Array.prototype.readUInt32LE = function(offset=0){
		return this[offset] | this[offset+1] << 8 | this[offset+2] << 16 | this[offset+3] << 24;
	}
	Uint8Array.prototype.readUInt16BE = function(offset=0){
		return this[offset] << 8 | this[offset+1];
	}
	Uint8Array.prototype.readInt8 = function(offset=0){
		const value = this[offset];
		return value & 0x80 ? value - 0x100 : value;
	}
	window.Buffer = Buffer;
}