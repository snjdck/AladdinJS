'use strict';

if(typeof Buffer == 'undefined'){
	function Buffer(){}
	Buffer.from = list => Uint8Array.from(list);
	Buffer.allocUnsafe = n => new Uint8Array(n);
	Buffer.alloc = n => new Uint8Array(n);
	Buffer.concat = list => {
		let buffer = new Uint8Array(list.reduce((a, b) => a + b.length, 0));
		let offset = 0;
		for(let v of list){
			buffer.set(v, offset);
			offset += v.length;
		}
		return buffer;
	};
	const readUIntLE = function(offset, n){
		let result = 0;
		for(let i=0; i<n; ++i){
			result |= this[offset+i] << (i << 3);
		}
		return result;
	}
	const readUIntBE = function(offset, n){
		let result = 0;
		for(let i=0; i<n; ++i){
			result = result << 8 | this[offset+i];
		}
		return result;
	}
	const readIntLE = function(offset, n){
		return readUIntLE.call(this, offset, n-1) | this.readInt8(offset+n-1) << (n - 1 << 3);
	}
	const readIntBE = function(offset, n){
		return this.readInt8(offset) << (n - 1 << 3) | readUIntBE.call(this, offset+1, n-1);
	}
	Uint8Array.prototype.writeUInt16LE = function(v, offset=0){
		this[offset] = v & 0xFF;
		this[offset+1] = v >> 8 & 0xFF;
		return offset + 2;
	}
	Uint8Array.prototype.readUInt32BE = function(offset=0){return readUIntBE.call(this, offset, 4);}
	Uint8Array.prototype.readUInt32LE = function(offset=0){return readUIntLE.call(this, offset, 4);}
	Uint8Array.prototype.readUInt16BE = function(offset=0){return readUIntBE.call(this, offset, 2);}
	Uint8Array.prototype.readUInt16LE = function(offset=0){return readUIntLE.call(this, offset, 2);}
	Uint8Array.prototype.readUInt8 = function(offset=0){return this[offset];}
	Uint8Array.prototype.readInt32BE = function(offset=0){return readIntBE.call(this, offset, 4);}
	Uint8Array.prototype.readInt32LE = function(offset=0){return readIntLE.call(this, offset, 4);}
	Uint8Array.prototype.readInt16BE = function(offset=0){return readIntBE.call(this, offset, 2);}
	Uint8Array.prototype.readInt16LE = function(offset=0){return readIntLE.call(this, offset, 2);}
	Uint8Array.prototype.readInt8 = function(offset=0){
		const value = this[offset];
		return value & 0x80 ? value - 0x100 : value;
	}
	Uint8Array.prototype.readFloatLE = function(offset=0){
		return new DataView(this.buffer, offset, 4).getFloat32(0, true);
	}
	window.Buffer = Buffer;
}