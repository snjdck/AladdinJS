
const ChromeSerial = require('webonly/chrome/ChromeSerial');
const {TaskQueue} = require('utils/task');
const {waitWhen} = require('utils/events');
const {composeFactory} = require('net/packet');
const zlib = require('zlib');
const crypto = require('crypto');

const codeText = require('./ESP32_bin');

class Serial extends ChromeSerial
{
	constructor(){
		super();
		this.sendQueue = TaskQueue();
		this.on('closed', () => this.emit('packet'));
	}

	async reset(){
		await this.setControlSignals({rts:true});
		await this.setControlSignals({rts:false});
	}

	delay(milliseconds){
		return new Promise(resolve => setTimeout(resolve, milliseconds));
	}
}

Serial.prototype.sync = function(){
	const cmd = Array.from({length:36}).fill(0x55);
	cmd.splice(0, 4, 7, 7, 0x12, 0x20);
	return async function(){
		await this.setControlSignals({dtr:false, rts:true});
		await this.delay(50);
		await this.setControlSignals({dtr:true, rts:false});
		await this.delay(50);
		await this.setControlSignals({dtr:false});
		for(let i=0; i<10; ++i){
			try{
				await this.send_cmd(8, cmd, false, 100);
				await this.delay(100);
				return;
			}catch{
				continue;
			}
		}
		throw new Error('timeout');
	}
}();
/*
Serial.prototype.change_bitrate = function(){
	function buildPacket(newBitrate, oldBitrate){
		let b = Buffer.alloc(8);
		b.writeUInt32LE(newBitrate, 0);
		b.writeUInt32LE(oldBitrate, 4);
		return b;
	}
	return async function(bitrate){
		await this.send_cmd(0xF, buildPacket(bitrate, this.bitrate));
		await this.delay(1000)
		//await this.update(bitrate);
		//return
		await this.disconnect();
		await this.delay(50);
		await this.connect(this.port, bitrate);
	}
}();
*/
Serial.prototype.write_stub = function(){
	const codeData = Buffer.from('CMD8Pw==', 'base64');
	const ESP_RAM_BLOCK = 0x1800;
	function memBegin(size, blockCount, offset){
		let b = Buffer.alloc(16);
		b.writeUInt32LE(size, 0);
		b.writeUInt32LE(blockCount, 4);
		b.writeUInt32LE(ESP_RAM_BLOCK, 8);
		b.writeUInt32LE(offset, 12);
		return b;
	}
	function memEnd(entrypoint){
		let b = Buffer.alloc(8);
		b.writeUInt32LE(entrypoint, 4);
		return b;
	}
	function memBlock(data, index){
		let b = Buffer.alloc(16);
		b.writeUInt32LE(data.length, 0);
		b.writeUInt32LE(index, 4);
		return Buffer.concat([b, data]);
	}
	async function send_code(code, offset){
		const blockCount = Math.ceil(code.length / ESP_RAM_BLOCK);
		await this.send_cmd(5, memBegin(code.length, blockCount, offset));
		for(let i=0; i<blockCount; ++i){
			const packet = code.slice(ESP_RAM_BLOCK * i, ESP_RAM_BLOCK * (i + 1));
			await this.send_cmd(7, memBlock(packet, i), true);
		}
	}
	return async function(){
		await send_code.call(this, codeText, 0x400be000);
		await send_code.call(this, codeData, 0x3ffdeba8);
		await this.send_cmd(6, memEnd(0x400be598));
		console.assert(Buffer.from(await this.recv()).toString() == 'OHAI');
	}
}();

Serial.prototype.write_flash = function(){
	const FLASH_WRITE_SIZE = 0x4000;
	function memBegin(size, blockCount, offset){
		let b = Buffer.alloc(16);
		b.writeUInt32LE(size, 0);
		b.writeUInt32LE(blockCount, 4);
		b.writeUInt32LE(FLASH_WRITE_SIZE, 8);
		b.writeUInt32LE(offset, 12);
		return b;
	}
	function memEnd(rebootFlag=false){
		let b = Buffer.alloc(4);
		b.writeUInt32LE(!rebootFlag, 0);
		return b;
	}
	function memBlock(data, index){
		let b = Buffer.alloc(16);
		b.writeUInt32LE(data.length, 0);
		b.writeUInt32LE(index, 4);
		return Buffer.concat([b, data]);
	}
	return async function(data, offset, progressFn=null){
		data = this.align_data(data, 4, 0xFF);
		const oldBlockCount = Math.ceil(data.length / FLASH_WRITE_SIZE);
		data = zlib.deflateSync(data, {level:9});
		const blockCount = Math.ceil(data.length / FLASH_WRITE_SIZE);
		await this.send_cmd(0x10, memBegin(oldBlockCount * FLASH_WRITE_SIZE, blockCount, offset));
		for(let i=0; i<blockCount; ++i){
			const packet = data.slice(FLASH_WRITE_SIZE * i, FLASH_WRITE_SIZE * (i + 1));
			await this.send_cmd(0x11, memBlock(packet, i), true);
			progressFn?.((FLASH_WRITE_SIZE * i + packet.length) / data.length);
		}
		//await this.send_cmd(2, memBegin(0, 0, 0));
		await this.send_cmd(0x12, memEnd());
	}
}();
/*
Serial.prototype.check_flash_md5 = function(){
	function buildPacket(size, offset){
		let b = Buffer.alloc(16);
		b.writeUInt32LE(offset, 0);
		b.writeUInt32LE(size, 4);
		return b;
	}
	return async function(data, offset){
		const timeout = Math.max(3000, 8000 * data.length / 0x100000);//speed=8s/M
		const result = await this.send_cmd(0x13, buildPacket(data.length, offset), false, timeout);
		const md5_old = crypto.createHash('md5').update(data).digest('hex');
		const md5_new = result[1].slice(0, 16).map(v => v.toString(16).padStart(2, '0')).join('');
		console.assert(md5_old === md5_new);
	}
}();

Serial.prototype.write_reg = function(){
	function buildPacket(address, value){
		let b = Buffer.alloc(16);
		b.writeUInt32LE(address, 0);
		b.writeUInt32LE(value, 4);
		b.writeUInt32LE(0xFFFFFFFF, 8);
		return b;
	}
	return function(address, value){
		return this.send_cmd(0x9, buildPacket(address, value));
	}
}();

Serial.prototype.read_reg = function(){
	function buildPacket(address){
		let b = Buffer.alloc(4);
		b.writeUInt32LE(address, 0);
		return b;
	}
	return function(address){
		return this.send_cmd(0xA, buildPacket(address)).then(v => v[0]);
	}
}();
*/
Serial.prototype.align_data = function(){
	const calcPad = (length, align) => (align - length % align) % align;
	return function(data, align, fill=0){
		const pad = calcPad(data.length, align);
		return pad > 0 ? Buffer.concat([data, Buffer.alloc(pad, fill)]) : data;
	}
}();

Serial.prototype.send_cmd = function(){
	function checksum(data, offset){
		let result = 0xef;
		for(let i=offset, n=data.length; i<n; ++i){
			result ^= data[i];
		}
		return result;
	}
	return function(op, data, checksumFlag=false, timeout=1000){
		const head = Buffer.alloc(8);
		head[1] = op;
		head.writeUInt16LE(data.length, 2);
		if(checksumFlag){
			head.writeUInt32LE(checksum(data, 16), 4);
		}
		return this.send([...head, ...data], timeout).then(result => {
			console.assert(result.length === 8 + (result[2] | result[3] << 8));
			if(result[0] == 1 && result[1] == op){
				return [Buffer.from(result).readUInt32LE(4), result.slice(8)];
			}
			return Promise.reject();
		});
	}
}();

Serial.prototype.send = function(){
	const encode = function(){
		function mapFn(v){
			if(v == 0xc0)return [0xdb, 0xdc];
			if(v == 0xdb)return [0xdb, 0xdd];
			return v;
		}
		return buffer => Buffer.from([0xc0, ...Array.from(buffer, mapFn).flat(), 0xc0]);
	}();
	return function(buffer, timeout=1000){
		return this.sendQueue(() => {
			if(!this.isConnected())return;
			return this.send_buffer(encode(buffer)).then(() => timeout < 0 ? undefined : this.recv(timeout));
		});
	}
}();

Serial.prototype.recv = function(){
	function concatFn(value, buffer){
		buffer.push(...new Uint8Array(value));
		while(buffer[0] != 0xc0)buffer.shift();
	}
	const replyFn = composeFactory(
		concatFn,
		buffer => buffer.indexOf(0xc0, 1) > 0,
		buffer => {
			const index = buffer.indexOf(0xc0, 1);
			return decode(buffer.slice(1, index));
		}
	);
	const decode = function(){
		function reduceFn(result, v){
			const lastIndex = result.length - 1;
			if(result[lastIndex] != 0xdb){
				result.push(v);
			}else if(v == 0xdc){
				result[lastIndex] = 0xc0;
			}else if(v != 0xdd){
				result.push(v);
			}
			return result;
		}
		return list => list.reduce(reduceFn, []);
	}();
	return function(timeout=1000){
		if(!this.isConnected())return;
		return waitWhen(this, 'data', timeout, replyFn([]));
	}
}();

module.exports = Serial;