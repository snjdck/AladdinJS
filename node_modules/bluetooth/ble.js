'use strict';

const bluetooth = require('../webonly/bluetooth');
const {checkerFactory, upload} = require('./uno');
const replyFnFactory = require('./firmware');
const {message} = antd;

const concatFn = (evt, buffer) => buffer.push(...new Uint8Array(evt.target.value.buffer));
const composeFn = checkerFactory(concatFn);
const replyFn = replyFnFactory(concatFn);

const option = {
	filters:[{namePrefix:'WeeeMake_'}],
	optionalServices:[0xf100, 0xf200]
};

async function connectBLE(){
	switch(await bluetooth.check()){
		case 1:
			message.warn('no bluetooth');
			return;
		case 2:
			message.warn('bluetooth not available');
			return;
	}
	const device = await bluetooth.requestDevice(option);
	if(!device)return;//user not select
	if(device.gatt.connected)return;
	await device.gatt.connect();
	device.ongattserverdisconnected = function(...args){
		message.info('ongattserverdisconnected', args);
		console.log(args)
	}

	const [sendMod, readMod] = await bluetooth.getService(device.gatt, 0xf100, [0xf101, 0xf102]);
	const [resetMod] = await bluetooth.getService(device.gatt, 0xf200, [0xf202]);
	await readMod.startNotifications();
	message.success('蓝牙连接成功');

	window.sendBLERawData = arrayBuffer => new Promise((resolve, reject) => {
		bluetooth.listenNotifications(readMod, replyFn([]), resolve);
		bluetooth.writeValue(sendMod, arrayBuffer);
	});

	const sendFn = (array, recvCount=0) => new Promise(resolve => {
		bluetooth.listenNotifications(readMod, composeFn([], recvCount), resolve);
		bluetooth.writeValue(sendMod, new Uint8Array(array).buffer);
	});

	async function resetFn(){
		await resetMod.writeValue(new Uint8Array([1]).buffer);
		await resetMod.writeValue(new Uint8Array([0]).buffer);
	}

	window.resetBLE = function(data, stepFn, progressFn){
		return upload(
			new Uint8Array(data),
			resetFn,
			sendFn,
			progressFn,
			stepFn
		);
	}
}

exports.connectBLE = connectBLE;
