

async function connectBLE(){
	const {bluetooth} = navigator;
	if(!bluetooth){
		console.warn('no bluetooth');
		return;
	}
	if(window.sendBLEData)return;
	const option = {
		filters:[{namePrefix:'WeeeMake_'}],
		optionalServices:[0xf100]
	};
	let device;

	try{
		device = await bluetooth.requestDevice(option);
	}catch(error){
		console.error('requestDevice', error);
		return;
	}
	
	console.log('device', device.name);
	let server = device.gatt;
	if(!server.connected){
		console.log('try reconnect');
		server = await server.connect();
	}
	if(!server.connected){
		return;
	}
	device.ongattserverdisconnected = async function(){
		console.log('ongattserverdisconnected');
	}
	console.log('connect', server.connected);
	let service = await server.getPrimaryService(0xf100);
	let readMod = await service.getCharacteristic(0xf102);
	let sendMod = await service.getCharacteristic(0xf101);
	readMod.oncharacteristicvaluechanged = function(evt){
		let dataView = evt.target.value;
		if(window.onBLEData)window.onBLEData(String.fromCharCode(...new Uint8Array(dataView.buffer)));
		//console.log('msg', String.fromCharCode(...new Uint8Array(dataView.buffer)));
	}
	await readMod.startNotifications();
	await delay(1);
	window.sendBLEData = v => sendMod.writeValue(str2ab(v + "\r\n"));
	//await sendMod.writeValue(str2ab("BZ 484 500\r\n"));
	//await delay(1);
	//await sendMod.writeValue(str2ab("VER\r\n"));
	//console.log('send success');
}

const delay = v => new Promise(resolve => setTimeout(resolve, v * 1000));

function str2ab(text){
	let list = new Uint8Array(text.length);
	list.forEach((_, i) => list[i] = text.charCodeAt(i));
	return list.buffer;
}
