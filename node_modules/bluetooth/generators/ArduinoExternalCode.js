'use strict';

const db = {board:'elf'}
const board_elf_mini = 'mini';
const board_elf_2560 = 'elf 2560';
const pinyin = require('utils/text/pinyin');

const identity = v => v;
//*
function hexToRgb(hex){
	var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	return result ? {
		R: parseInt(result[1], 16),
		G: parseInt(result[2], 16),
		B: parseInt(result[3], 16)
	} : {R:0,G:0,B:0};
}

function castMatrix2(matrix, w, h){
	let bytes = [];
	for(let j=0; j<w; ++j){
		bytes[j] = 0;
		for(let i=0; i<h; ++i){
			if(matrix.charAt(i*w+j) === '1'){
				bytes[j] |= 1 << i;
			}
		}
	}
	return bytes.map(v => '0x' + v.toString(16)).join(', ');
}

function castMatrix(matrix){
	const list = matrix.split(':').map(v => v.split(''));
	const h = list.length;
	const w = list[0].length;
	let bytes = [];
	for(let j=0; j<w; ++j){
		bytes[j] = 0;
		for(let i=0; i<h; ++i){
			if(list[i][j] === '1'){
				bytes[j] |= 1 << i;
			}
		}
	}
	return bytes.map(v => '0x' + v.toString(16));
}

const INT_2_BOOL = ['false','true'];
const INT_2_HIGH_LOW = ['LOW', 'HIGH'];
const IR_CODE_2_NAME = {
	0x45:'IR_CONTROLLER_A',
	0x46:'IR_CONTROLLER_B',
	0x47:'IR_CONTROLLER_C',
	0x44:'IR_CONTROLLER_D',
	0x40:'IR_CONTROLLER_UP',
	0x43:'IR_CONTROLLER_E',
	0x07:'IR_CONTROLLER_LEFT',
	0x15:'IR_CONTROLLER_OK',
	0x09:'IR_CONTROLLER_RIGHT',
	0x19:'IR_CONTROLLER_DOWN',
	0x0D:'IR_CONTROLLER_F',
	0x16:'IR_CONTROLLER_0',
	0x0C:'IR_CONTROLLER_1',
	0x18:'IR_CONTROLLER_2',
	0x5E:'IR_CONTROLLER_3',
	0x08:'IR_CONTROLLER_4',
	0x1C:'IR_CONTROLLER_5',
	0x5A:'IR_CONTROLLER_6',
	0x42:'IR_CONTROLLER_7',
	0x52:'IR_CONTROLLER_8',
	0x4A:'IR_CONTROLLER_9'
};

//*/
const Arduino = {};
/*
	function castToStr(block, key, mapFn=identity){
		let valueBlock = this.getInputTargetBlock(block, key);
		return valueBlock.type == 'text' ? JSON.stringify(mapFn(valueBlock.getFieldValue('TEXT'))) : 'String(' + this.valueToCode(block, key, this.ORDER_NONE) + ').c_str()';
	}

	const register_option = name => Arduino[name] = block => [this.getFieldValue(block,name.toUpperCase()), this.ORDER_ATOMIC];

	register_option('speed');
	register_option('angle');
	register_option('rgb');
	register_option('note');
	register_option('beat');
	register_option('matrix@21*7');
	register_option('matrix@14*5');
	register_option('speech-recognition-index');
	register_option('vibration-speed');
	register_option('rj11-rgb-index');
	register_option('rgb-ring-index');
	register_option('elf-core-rgb-index');
	//register_option('colour_picker', 'COLOUR');
	//register_option('math_integer', 'NUM');
	
	Arduino["matrix@14*5"] =
	Arduino["matrix@21*7"] = function(block){
		return [this.getFieldValue(block,'MATRIX'), this.ORDER_ATOMIC];
	}
	*/

	Arduino.board_port =
	Arduino.led_index =
	Arduino.buzzer_note =
	Arduino.buzzer_beat =
	Arduino.sensor_port =
	Arduino.servo_port =
	Arduino.motor_speed =
	Arduino.dc_motor_index = function(block, {VALUE}){return [VALUE, this.ORDER_ATOMIC]}
	Arduino.ir_code = function(block, {VALUE}){return [IR_CODE_2_NAME[VALUE], this.ORDER_ATOMIC]}

	Arduino.weeemake_generate_offline_code = block => '';
	Arduino.when_start = function(block, {next}){
		return next;
	};
	Arduino.weeemake_set_var_type = (list => function(block){
		let raw_name = block.getField('VARIABLE').text_;
		let name = this.adjustVarName(raw_name);
		const VAR_TYPE = this.getFieldValue(block,'VAR_TYPE');
		this.varType[name] = list[VAR_TYPE];
		return '';
	})(['double', 'long']);
	Arduino.weeemake_pin_rgb = function(block, {pin, index, color}){
		const key = this.genSensorKey('WeRGBLed', 'rgbLED', pin);
		let result = [
			`${key}.setColor(${index}, ${color})`,
			`${key}.show()`
		];
		return result.map(v => v + this.END).join('');
	}

	Arduino.weeemake_pin_button = function(block, {pin}){
		return [`!digitalRead(${pin})`, this.ORDER_UNARY];
	}

	const genRGB = (key, port) => function(block){
		const PIXEL = this.valueToCode(block, 'PIXEL', this.ORDER_NONE);
		const COLOR = this.valueToCode(block, 'COLOR', this.ORDER_NONE);

		this.addVarDef(`WeRGBLed ${key}(${port});\n`, key);

		let result = [
			`${key}.setColor(${PIXEL}, ${COLOR})`,
			`${key}.show()`
		];

		return result.map(v => v + this.END).join('');
	};

	Arduino.weeemake_soil =
	Arduino.weeemake_pin_sound =
	Arduino.weeemake_pin_light = 'analogRead';

	Arduino.weeemake_pin_ir = function(block, {pin}){
		this.addVarDef(`WeInfraredReceiver ir(${pin});\n`);
		this.addSetupCode('ir.begin();\n');
		this.addLoopCode('ir.loop();\n');

		return [`ir.getValue()`, this.ORDER_HIGH];
	}
	Arduino.weeemake_single_led = 'digitalWrite';

	Arduino.weeemake_single_line_follower = function(block, {pin}){
		return [`1023 - analogRead(${pin})`, this.ORDER_ADDITIVE];
	}

	Arduino.elf_328p_mpin = 'elf_uno_mpin'
	Arduino.elf_mini_mpin = 'elf_uno_mpin'
	Arduino.elf_uno_mpin =  function(block, {value}){
		return [value, this.ORDER_HIGH]
	}

	Arduino.weeemake_dc_motor = function(block, {pin, speed}, {pin:{type:pinType}}){
		const key = this.genSensorKey('WeDCMotor', 'dc', pin);
		return `${key}.run(${speed})` + this.END;
		const [pin0, pin1] = pin.split(',');
		this.addSetupCode(`pinMode(${pin0}, OUTPUT);\n`);
		this.addSetupCode(`pinMode(${pin1}, OUTPUT);\n`);

		if(pinType == 'elf_328p_mpin'){
			return [`{`,
			`\tint16_t speed = ${speed};`,
			`\tanalogWrite(${pin0}, speed >= 0 ? speed : -speed);`,
			`\tdigitalWrite(${pin1}, speed >= 0 ? 0 : 1);`,
			`}`].map(v => v + '\n').join('');
		}
		return [`{`,
		`\tint16_t speed = ${speed};`,
		`\tanalogWrite(${pin0}, speed >= 0 ? 0 : -speed);`,
		`\tanalogWrite(${pin1}, speed >= 0 ? speed : 0);`,
		`}`].map(v => v + '\n').join('');
	}

	Arduino.weeemake_robot_move = function(block){
		//1,2,3,4 => F,B,L,R
		const MOVE_DIRECTION = this.getFieldValue(block,'MOVE_DIRECTION');
		let SPEED = this.valueToCode(block, 'SPEED', this.ORDER_NONE);

		let needSpeedVar = !/^\w+$/.test(SPEED);
		let result = [];
		this.addVarDef('WeDCMotor dc_1(M1);\n', 'dc_1');
		this.addVarDef('WeDCMotor dc_2(M2);\n', 'dc_2');
		let l_sign = (MOVE_DIRECTION === '1' || MOVE_DIRECTION === '4') ? '-' : '';
		let r_sign = (MOVE_DIRECTION === '1' || MOVE_DIRECTION === '3') ? '' : '-';
		if(needSpeedVar){
			this.addVarDef('int speed;\n', 'speed');
			result.push(`speed = ${SPEED}`);
			SPEED = 'speed';
		}
		result.push(`dc_1.run(${r_sign}${SPEED})`);
		result.push(`dc_2.run(${l_sign}${SPEED})`);
		return result.map(v => v + this.END).join('');
	}

	Arduino.weeemake_vehicle_move = function(block){
		let LSPEED;
		let RSPEED = this.valueToCode(block, 'RSPEED', this.ORDER_NONE);

		if(this.getInputTargetBlock(block, 'LSPEED').type != 'speed'){
			LSPEED = '-' + this.valueToCode(block, 'LSPEED', this.ORDER_UNARY);
		}else{
			LSPEED = - this.valueToCode(block, 'LSPEED', this.ORDER_NONE);
		}
		
		let result = [];
		this.addVarDef('WeDCMotor dc_1(M1);\n', 'dc_1');
		this.addVarDef('WeDCMotor dc_2(M2);\n', 'dc_2');

		result.push(`dc_1.run(${RSPEED})`);
		result.push(`dc_2.run(${LSPEED})`);
		return result.map(v => v + this.END).join('');
	}

	Arduino.weeemake_robot_stop = function(block){
		this.addVarDef('WeDCMotor dc_1(M1);\n', 'dc_1');
		this.addVarDef('WeDCMotor dc_2(M2);\n', 'dc_2');
		let result = [];
		result.push(`dc_1.stop()`);
		result.push(`dc_2.stop()`);
		return result.map(v => v + this.END).join('');
	}

	Arduino.weeemake_dc_130_motor = function(block, {pin, speed}){
		const key = this.genSensorKey('We130DCMotor', 'dc130', pin);
		return `${key}.run(${speed})` + this.END;
	}

	Arduino.weeemake_encoder_motor_set_origin = function(block, {pin}){
		const key = this.genSensorKey('WeEncoderMotor', 'encoder', pin);
		return `${key}.setPositionOrigin()` + this.END;
	}

	Arduino.weeemake_encoder_motor_set = (list => function(block, {pin, type, value}){
		const key = this.genSensorKey('WeEncoderMotor', 'encoder', pin);
		return `${key}.${list[type]}(${value})` + this.END;
	})(['runSpeed', 'run']);

	Arduino.weeemake_encoder_motor_move = (list => function(block, {pin, type, value, speed}){
		const key = this.genSensorKey('WeEncoderMotor', 'encoder', pin);
		return `${key}.${list[type]}(${speed}, ${value})` + this.END;
	})(['move', 'moveTo']);

	Arduino.weeemake_servo = function(block, {pin, angle}){
		let key = `servo_${pin}`;

		if(db.board === board_elf_mini){
			this.addVarDef(`WeServo ${key}(${pin});\n`, key);
		}else{
			this.addVarDef(`Servo ${key};\n`, key);
			this.addSetupCode(`${key}.attach(${pin});\n`, key);
		}

		return `${key}.write(${angle})` + this.END;
	}

	Arduino.weeemake_servo_360 = function(block, {pin, angle}){
		const key = this.genSensorKey('WeServo360', 'servo', pin);
		return `${key}.write(${ANGLE})` + this.END;
	}

	Arduino.weeemake_servo_driver = function(block, {pin, index, angle}){
		const key = this.genSensorKey('WeServoMotorDrive', 'servoDriver', pin);
		return `${key}.write(${index}, ${angle})` + this.END;
	}

	Arduino.weeemake_buzzer = function(block, {pin, note, beat}){
		const key = this.genSensorKey('WeBuzzer', 'buzzer', pin);
		return `${key}.tone(${note}, ${beat})` + this.END;
	}

	Arduino.weeemake_rgb_strip = 'weeemake_pin_rgb';

	Arduino.weeemake_rgb_RJ11 = function(block, {pin, index, color}){
		const key = this.genSensorKey('WeRGBLED_RJ', 'rgbLED_RJ11', pin);
		let result = [
			`${key}.setColor(${index}, ${color})`,
			`${key}.show()`
		];
		return result.map(v => v + this.END).join('');
	}

	Arduino.weeemake_line_follower = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const LINE_FOLLOWER_INDEX = this.getFieldValue(block,'LINE_FOLLOWER_INDEX');

		let key = `linefollower_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLineFollower ${key}(${SENSOR_PORT});\n`, key);

		return [`${key}.startRead(${LINE_FOLLOWER_INDEX})`, this.ORDER_HIGH];
	}

	Arduino.weeemake_ultrasonic = function(block, {pin}){
		const key = this.genSensorKey('WeUltrasonicSensor', 'ultrasonic', pin);
		return [`${key}.distanceCm()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_ultrasonic_led = function(block, {pin, index, value}){
		const key = this.genSensorKey('WeUltrasonicSensor', 'ultrasonic', pin);
		return `${key}.setLed(${index}, ${value})` + this.END;
	}

	Arduino.weeemake_ultrasonic_rgb = function(block, {pin, index, color}){
		const key = this.genSensorKey('WeUltrasonicSensor', 'ultrasonic', pin);
		return `${key}.setColor(${index}, ${color})` + this.END;
	}

	Arduino.weeemake_ir_avoid = function(block, {pin}){
		const key = this.genSensorKey('WeIRAvoidSensor', 'irAvoid', pin);
		return [`${key}.isObstacle()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_ir_avoid_led = function(block, {pin, index, value}){
		const key = this.genSensorKey('WeIRAvoidSensor', 'irAvoid', pin);
		return `${key}.setLed(${index}, ${value})` + this.END;
	}

	Arduino.weeemake_ir_avoid_rgb = function(block, {pin, index, color}){
		const key = this.genSensorKey('WeIRAvoidSensor', 'irAvoid', pin);
		return `${key}.setColor(${index}, ${color})` + this.END;
	}

	Arduino.weeemake_led_matrix_number = function(block){
		const LED_MATRIX_TYPE = this.getFieldValue(block,'LED_MATRIX_TYPE').replace('x', '_');
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const NUM = this.valueToCode(block, 'NUM', this.ORDER_NONE);

		let key = `led_matrix_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDPanelModuleMatrix${LED_MATRIX_TYPE} ${key}(${SENSOR_PORT});\n`, key);

		return `${key}.showNum(${NUM})` + this.END;
	}

	Arduino.weeemake_led_matrix_time = function(block){
		const LED_MATRIX_TYPE = this.getFieldValue(block,'LED_MATRIX_TYPE').replace('x', '_');
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const HOUR = this.valueToCode(block, 'HOUR', this.ORDER_NONE);
		const SHOW_COLON = this.valueToCode(block, 'SHOW_COLON', this.ORDER_NONE);
		const MINUTE = this.valueToCode(block, 'MINUTE', this.ORDER_NONE);

		let key = `led_matrix_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDPanelModuleMatrix${LED_MATRIX_TYPE} ${key}(${SENSOR_PORT});\n`, key);

		return `${key}.showClock(${HOUR}, ${MINUTE}, ${SHOW_COLON})` + this.END;
	}

	Arduino.weeemake_led_matrix_string = function(block){
		const LED_MATRIX_TYPE = this.getFieldValue(block,'LED_MATRIX_TYPE').replace('x', '_');
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const X = this.valueToCode(block, 'X', this.ORDER_NONE);
		const Y = this.valueToCode(block, 'Y', this.ORDER_NONE);
		const STR = this.valueToCode(block, 'STR', this.ORDER_NONE);

		let key = `led_matrix_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDPanelModuleMatrix${LED_MATRIX_TYPE} ${key}(${SENSOR_PORT});\n`, key);

		return `${key}.showChar(${X}, ${Y}, ${STR})` + this.END;
	}

	Arduino.weeemake_led_matrix_bitmap21x7 = function(block, {pin, x, y, value}){
		const key = `led_matrix_${pin}`;
		this.addVarDef(`WeLEDPanelModuleMatrix7_21 ${key}(${pin});\n`);
		return `${key}.showBitmap2(${x}, ${y}, ${castMatrix(value).join(', ')});\n`;
	}

	Arduino.weeemake_led_matrix_bitmap14x5 = function(block, {pin, x, y, value}){
		const key = `led_matrix_${pin}`;
		this.addVarDef(`WeLEDPanelModuleMatrix5_14 ${key}(${pin});\n`);
		return `${key}.showBitmap2(${x}, ${y}, ${castMatrix(value).join(', ')});\n`;
	}

	Arduino.weeemake_led_matrix_pixel = function(block){
		const LED_MATRIX_TYPE = this.getFieldValue(block,'LED_MATRIX_TYPE').replace('x', '_');
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const SHOW_HIDE = this.valueToCode(block, 'SHOW_HIDE', this.ORDER_NONE);
		const X = this.valueToCode(block, 'X', this.ORDER_NONE);
		const Y = this.valueToCode(block, 'Y', this.ORDER_NONE);

		let key = `led_matrix_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDPanelModuleMatrix${LED_MATRIX_TYPE} ${key}(${SENSOR_PORT});\n`, key);

		return `${key}.setDot(${X}, ${Y}, ${SHOW_HIDE})` + this.END;
	};

	Arduino.weeemake_led_matrix_clear = function(block){
		const LED_MATRIX_TYPE = this.getFieldValue(block,'LED_MATRIX_TYPE').replace('x', '_');
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `led_matrix_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDPanelModuleMatrix${LED_MATRIX_TYPE} ${key}(${SENSOR_PORT});\n`, key);

		return `${key}.clearScreen()` + this.END;
	}

	Arduino.weeemake_humiture = (list => function(block, {pin, mode}){
		const key = this.genSensorKey('WeHumiture', 'humiture', pin);
		this.addLoopCode(`${key}.startRead()`);
		return [`${key}.${list[mode]}()`, this.ORDER_HIGH];
	})(['getHumidity', 'getTemperature']);

	Arduino.weeemake_seven_segment = function(block, {pin, value}){
		const key = this.genSensorKey('We7SegmentDisplay', 'seven_segment', pin);
		return `${key}.showNumber(${value})` + this.END;
	}

	Arduino.weeemake_seven_segment_show_string = function(block, {pin, value}){
		const key = this.genSensorKey('We7SegmentDisplay', 'seven_segment', pin);
		return `${key}.showString(${value})` + this.END;
	}

	Arduino.weeemake_potentiometer = function(block, {pin}){
		const key = this.genSensorKey('WePotentiometer', 'potentiometer', pin);
		return [`${key}.readAnalog()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_gas_sensor = function(block){
		const key = this.genSensorKey('WeGasSensor', 'gasSensor', pin);
		return [`${key}.readAnalog()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_led_button_light = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const BUTTON_INDEX = this.getFieldValue(block,'BUTTON_INDEX');
		const ON_OFF = this.valueToCode(block, 'ON_OFF', this.ORDER_NONE);

		let key = `button4led_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`We4LEDButton ${key}(${SENSOR_PORT});\n`, key);

		return `${key}.setLed(${BUTTON_INDEX}, ${ON_OFF})` + this.END;
	}

	Arduino.weeemake_relay = function(block, {pin, value}){
		const key = this.genSensorKey('WeRelay', 'relay', pin);
		return `${key}.setNC(${value})` + this.END;
	}

	Arduino.weeemake_water_atomizer = function(block, {pin, value}){
		const key = this.genSensorKey('WeWaterAtomizer', 'waterAtomizer', pin);
		return `${key}.setRun(${value})` + this.END;
	}

	Arduino.weeemake_color_sensor_white_balance = function(block, {pin}){
		const key = this.genSensorKey('WeColorSensor', 'colorSensor', pin);
		return `${key}.whitebalance()` + this.END;
	}

	Arduino.weeemake_color_sensor_light = function(block, {pin, value}){
		const key = this.genSensorKey('WeColorSensor', 'colorSensor', pin);
		return `${key}.setLight(${value})` + this.END;
	}

	Arduino.weeemake_color_sensor = (list => function(block, {pin, type}){
		const key = this.genSensorKey('WeColorSensor', 'colorSensor', pin);
		this.addLoopCode(`${key}.readColorData()`, key);
		return [`${key}.${list[type]}()`, this.ORDER_HIGH];
	})(['showColorData', 'showRedData', 'showGreenData', 'showBlueData']);

	Arduino.weeemake_mp3_do = (list => function(block, {pin, type}){
		const key = this.genSensorKey('WeMP3', 'mp3', pin);
		return `${key}.${list[type]}()` + this.END;
	})(['play', 'pause', 'prevMusic', 'nextMusic']);

	Arduino.weeemake_mp3_set_music = function(block, {pin, value}){
		const key = this.genSensorKey('WeMP3', 'mp3', pin);
		return `${key}.appointMusic(${value})` + this.END;
	}

	Arduino.weeemake_mp3_set_volume = function(block, {pin, value}){
		const key = this.genSensorKey('WeMP3', 'mp3', pin);
		return `${key}.appointVolume(${value})` + this.END;
	}

	Arduino.weeemake_mp3_set_device = function(block, {pin, value}){
		const key = this.genSensorKey('WeMP3', 'mp3', pin);
		return `${key}.appointDevice(${value})` + this.END;
	}

	Arduino.weeemake_mp3_is_over = function(block, {pin}){
		const key = this.genSensorKey('WeMP3', 'mp3', pin);
		return [`${key}.isOver()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_oled_set_size = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const OLED_SIZE = this.getFieldValue(block,'OLED_SIZE');

		let key = `oled_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeOLED ${key}(${SENSOR_PORT});\n`, key);

		return `${key}.setSize(${OLED_SIZE})` + this.END;
	}

	Arduino.weeemake_oled_show_string = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const X = this.valueToCode(block, 'X', this.ORDER_NONE);
		const Y = this.valueToCode(block, 'Y', this.ORDER_NONE);
		const STR = this.valueToCode(block, 'STR', this.ORDER_NONE);

		let key = `oled_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeOLED ${key}(${SENSOR_PORT});\n`, key);

		return `${key}.showString(${X}, ${Y}, ${STR})` + this.END;
	}

	Arduino.weeemake_oled_show_number = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const X = this.valueToCode(block, 'X', this.ORDER_NONE);
		const Y = this.valueToCode(block, 'Y', this.ORDER_NONE);
		const NUM = this.valueToCode(block, 'NUM', this.ORDER_NONE);

		let key = `oled_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeOLED ${key}(${SENSOR_PORT});\n`, key);

		return `${key}.showNum(${X}, ${Y}, ${NUM})` + this.END;
	}

	Arduino.weeemake_oled_clear_screen = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `oled_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeOLED ${key}(${SENSOR_PORT});\n`, key);

		return `${key}.clearScreen()` + this.END;
	}

	

	Arduino.weeemake_flame_sensor = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const FLAME_INDEX = this.getFieldValue(block,'FLAME_INDEX');

		let key = `flame_sensor_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeFlameSensor ${key}(${SENSOR_PORT});\n`, key);
		this.addLoopCode(`${key}.readData()`, key);

		return [`${key}.showSensor${FLAME_INDEX}()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_joystick = (list => function(block, {pin, axis}){
		const key = this.genSensorKey('WeJoystick', 'joystick', pin);
		this.addLoopCode(`${key}.readData()`, key);
		return [`${key}.${list[axis]}()`, this.ORDER_HIGH];
	})(['showX', 'showY']);

	Arduino.weeemake_compass = (list => function(block, {pin, axis}){
		const key = this.genSensorKey('WeCompassSensor', 'compass', pin);
		this.addLoopCode(`${key}.update()`, key);
		return [`${key}.${list[axis]}()`, this.ORDER_HIGH];
	})(['getHeadS', 'getHeadY', 'getHeadZ']);

	Arduino.weeemake_gyro = (list => function(block, {pin, type, axis}){
		const key = this.genSensorKey('WeGyroSensor', 'gyro', pin);
		this.addSetupCode(`${key}.begin();\n`);
		this.addLoopCode(`${key}.update()`);
		return [`${key}.${list[type][axis]}()`, this.ORDER_HIGH];
	})([['getAngleX', 'getAngleY', 'getAngleZ'],['getGyroX', 'getGyroY', 'getGyroZ']]);

	Arduino.weeemake_touch = function(block, {pin}){
		const key = this.genSensorKey('WeTouchSensor', 'touchSensor', pin);
		return [`${key}.touched()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_led_button = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const BUTTON_INDEX = this.getFieldValue(block,'BUTTON_INDEX');

		let key = `button4led_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`We4LEDButton ${key}(${SENSOR_PORT});\n`, key);

		return [`${key}.readValue() == ${1 << (BUTTON_INDEX - 1)}`, this.ORDER_RELATIONAL];
	}

	Arduino.weeemake_pir = function(block, {pin}){
		const key = this.genSensorKey('WePIRSensor', 'pir', pin);
		return [`${key}.readSensor()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_tilt = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const TILT_DIR = this.getFieldValue(block,'TILT_DIR');

		let key = `tilt_` + SENSOR_PORT.split('_')[1];
		let valueKey = key + '_value';

		this.addVarDef(`WeTiltSwitch ${key}(${SENSOR_PORT});\n`, key);
		this.addVarDef(`int ${valueKey};\n`, valueKey);
		this.addLoopCode(`${valueKey} = ${key}.readSensor();\n`);

		return [`${valueKey} == ${TILT_DIR}`, this.ORDER_RELATIONAL];
	}

	Arduino.weeemake_limit_switch = 'digitalRead';

	Arduino.weeemake_temperature = function(block, {pin}){
		const key = this.genSensorKey('WeTemperature', 'temperature', pin);
		return [`${key}.temperature()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_barometer = (list => function(block, {pin, type}){
		const key = this.genSensorKey('WeBarometerSensor', 'barometer', pin);
		return [`${key}.${list[type]}()`, this.ORDER_HIGH];
	})(['readHeight', 'readPressure', 'readTemp']);

	Arduino.weeemake_PM25 = (list => function(block, {pin, type}){
		const key = this.genSensorKey('WePM25Sensor', 'pm25', pin);
		return [`${key}.${list[type]}()`, this.ORDER_HIGH];
	})([
	'readPm1_0Concentration', 'readPm2_5Concentration', 'readPm10Concentration',
	'read0_3NumIn100ml', 'read0_5NumIn100ml', 'read1_0NumIn100ml', 'read2_5NumIn100ml',
	'read5_0NumIn100ml', 'read10NumIn100ml']);

	Arduino.weeemake_funny_touch = function(block, {pin, index}){
		index = (1 << index - 1).toString(16);
		const key = this.genSensorKey('WeFunnyTouchSensor', 'funnyTouch', pin);
		return [`(${key}.readValue() & 0x${index}) > 0`, this.ORDER_RELATIONAL];
	}

	Arduino.weeemake_funny_touch_value = function(block, {pin}){
		const key = this.genSensorKey('WeFunnyTouchSensor', 'funnyTouch', pin);
		return [`${key}.readValue()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_uv = function(block, {pin}){
		const key = this.genSensorKey('WeUVSensor', 'uvSensor', pin);
		return [`${key}.readAnalog()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_raindrop = function(block, {pin}){
		const key = this.genSensorKey('WeWaterSensor', 'waterSensor', pin);
		return [`${key}.readAnalog()`, this.ORDER_HIGH];
	}

	function addUsbHost(){
		const key = `usb_host`;
		const args = db.board === board_elf_2560 ? '51, 50' : 'A3, A2';
		
		this.addInclude('#include"SoftwareSerial.h"');
		this.addVarDef(`WeUSBHost ${key}(${args});\n`, key);
		this.addSetupCode(`${key}.init(USB2_0);\n`, key);
		this.addLoopCode(`${key}.loop()`, key);

		return key;
	}

	Arduino.weeemake_usb_host = (list => function(block){
		const USB_HOST_KEY = this.getFieldValue(block,'USB_HOST_KEY');

		let key = addUsbHost();

		return [`${key}.ButtonPressed(${list[USB_HOST_KEY]})`, this.ORDER_HIGH];
	})([null, 'WeJOYSTICK_START', 'WeJOYSTICK_SELECT', 'WeJOYSTICK_MODE', 'WeJOYSTICK_BUTTON_L', 'WeJOYSTICK_BUTTON_R',
	'WeJOYSTICK_RIGHT_L', 'WeJOYSTICK_LEFT_L', 'WeJOYSTICK_UP_L', 'WeJOYSTICK_DOWN_L', 'WeJOYSTICK_UP_R',
	'WeJOYSTICK_RIGHT_R', 'WeJOYSTICK_DOWN_R', 'WeJOYSTICK_LEFT_R', 'WeJOYSTICK_L1', 'WeJOYSTICK_R1', 'WeJOYSTICK_L2', 'WeJOYSTICK_R2']);

	Arduino.weeemake_usb_host_joystick = function(block){
		const LEFT_RIGHT = this.getFieldValue(block,'LEFT_RIGHT');
		const AXIS2 = this.getFieldValue(block,'AXIS2');

		let key = addUsbHost();

		let a = LEFT_RIGHT == '0' ? 'L' : 'R';
		let b = AXIS2 == '0' ? 'x' : 'y';
		let method = 'joystick' + a + b;

		return [`${key}.${method}()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_ascii2str = function(block){
		const VALUE = this.valueToCode(block, 'VALUE', this.ORDER_NONE);
		return [`String(char(${VALUE}))`, this.ORDER_HIGH];
	}

	Arduino.weeemake_str2ascii = function(block){
		const VALUE = this.valueToCode(block, 'VALUE', this.ORDER_NONE);
		return [`int(${VALUE}[0])`, this.ORDER_HIGH];
	}

	Arduino.weeemake_speech_recognition_set_keyword = function(block, {pin, value}){
		const key = this.genSensorKey('WeSpeechRecognition', 'speechRec', pin);
		return `${key}.setKeyword(${pinyin(value)})` + this.END;
	}

	Arduino.weeemake_speech_recognition_set_password = function(block, {pin, index, value}){
		const key = this.genSensorKey('WeSpeechRecognition', 'speechRec', pin);
		return `${key}.setPassword(${index}, ${pinyin(value)})` + this.END;
	}

	Arduino.weeemake_speech_recognition_set_mode = function(block, {pin, mode}){
		const key = this.genSensorKey('WeSpeechRecognition', 'speechRec', pin);
		return `${key}.setTriggerMode(${mode})` + this.END;
	}

	Arduino.weeemake_speech_recognition_read = function(block, {pin}){
		const key = this.genSensorKey('WeSpeechRecognition', 'speechRec', pin);
		return [`${key}.read()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_gesture_recognition_read = function(block, {pin}){
		const key = this.genSensorKey('WeGestureSensor', 'gestureSensor', pin);
		return [`${key}.read()`, this.ORDER_HIGH]
	}

	Arduino.weeemake_image_recognition_set_mode = (nameList => function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const IMAGE_RECOGNITION_MODE = this.getFieldValue(block,'IMAGE_RECOGNITION_MODE');

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT});\n`, key);

		return `${key}.${nameList[IMAGE_RECOGNITION_MODE]}()` + this.END;
	})(['setAutoTrackingMode', 'setLineFollowerMode']);

	Arduino.weeemake_image_recognition_color_position = (list => function(block, {pin, value}){
		let key = `imageRec_${pin}`;
		this.addVarDef(`WeImageRecognition ${key}(${pin});\n`, key);
		return [`${key}.getColorPosition(${list.indexOf(value)+1})`, this.ORDER_HIGH];
	})(["#e17373","#e08649","#5450e8","#37b80c","#24716b"]);
/*
	Arduino.weeemake_image_recognition_auto_tracking = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return [`${key}.getAutoPosition()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_image_recognition_line_follow = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return [`${key}.getLineFollowerAngle()`, this.ORDER_HIGH];
	}
*/
	Arduino.weeemake_image_recognition_update = (list => function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const IMAGE_RECOGNITION_MODE = this.getFieldValue(block,'IMAGE_RECOGNITION_MODE');

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return [`${key}.${list[IMAGE_RECOGNITION_MODE]}()`, this.ORDER_HIGH];
	})(['getAutoPosition', 'getLineFollowerAngle'])

	Arduino.weeemake_image_recognition_value = (nameList => function(block, {pin, name}){
		let key = `imageRec_${pin}`;
		this.addVarDef(`WeImageRecognition ${key}(${pin})`, key);
		return [`${key}.${nameList[name]}`, this.ORDER_HIGH];
	})(['centerX', 'centerY', 'pixels']);

	Arduino.weeemake_image_recognition_line_follow_angle = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return [`${key}.angle`, this.ORDER_HIGH];
	}

	Arduino.weeemake_image_recognition_set_fast_mode = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ON_OFF = this.getFieldValue(block,'ON_OFF') == 'TRUE' ? 1 : 0;

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return `${key}.fastMode(${ON_OFF})` + this.END;
	}

	Arduino.weeemake_image_recognition_face_position = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return [`${key}.getFacePositon()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_vibration_motor = function(block, {pin, speed}){
		const key = this.genSensorKey('WeVibrationMotor', 'vibrationMotor', pin);
		let code;
		if(speed === '100') code = 'run()'
		else if(speed === '0') code = 'stop()'
		else code = `run(${speed})`
		return `${key}.${code}` + this.END;
	}

	Arduino.weeemake_led_single_line_follower = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `ledLineFollower_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDLineFollower ${key}(${SENSOR_PORT})`, key);

		return [`${key}.readSensor()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_led_single_line_follower_led = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ON_OFF = this.valueToCode(block, 'ON_OFF', this.ORDER_NONE);

		let key = `ledLineFollower_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDLineFollower ${key}(${SENSOR_PORT})`, key);

		return `${key}.showLED(${ON_OFF})` + this.END;
	};

	Arduino.weeemake_elf_core_board_ir_sender = function(block){
		let IR_CODE = this.getFieldValue(block,'IR_CODE');
		const GROUP = this.valueToCode(block, 'GROUP', this.ORDER_NONE);

		let key = `ir_sender`;

		this.addVarDef(`WeInfraredSender ${key}(OnBoard_IR_T)`, key);

		return `${key}.send_nec_message(${GROUP}, ${IR_CODE})` + this.END;
	}

	Arduino.weeemake_rj11_light = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `lightSensorRJ11_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLightSensor_RJ ${key}(${SENSOR_PORT})`, key);

		return [`${key}.read()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_rj11_sound = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `soundSensorRJ11_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeSoundSensor_RJ ${key}(${SENSOR_PORT})`, key);

		return [`${key}.read()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_adapter_digitalWrite = function(block, {pin, index, value}){
		const key = this.genSensorKey('WeAdapter', 'adapter', pin);
		return `${key}.digitalWrite(${index}, ${value})` + this.END;
	}

	Arduino.weeemake_adapter_servo = function(block, {pin, index, value}){
		const key = this.genSensorKey('WeAdapter', 'adapter', pin);
		return `${key}.write(${index}, ${value})` + this.END;
	}

	Arduino.weeemake_adapter_rgb = function(block, {pin, index, pixel, color}){
		const key = this.genSensorKey('WeAdapter', 'adapter', pin);
		return `${key}.RGBshow(${index}, ${pixel}, ${color})` + this.END;
	}

	Arduino.weeemake_adapter_digitalRead = function(block, {pin, index}){
		const key = this.genSensorKey('WeAdapter', 'adapter', pin);
		return [`${key}.digitalRead(${index})`, this.ORDER_HIGH];
	}

	Arduino.weeemake_adapter_analogRead = function(block, {pin, index}){
		const key = this.genSensorKey('WeAdapter', 'adapter', pin);
		return [`${key}.analogRead(${index})`, this.ORDER_HIGH];
	}

	Arduino.weeemake_adapter_temperature = function(block, {pin, index}){
		const key = this.genSensorKey('WeAdapter', 'adapter', pin);
		return [`${key}.readTemperature(${index})`, this.ORDER_HIGH];
	}

	function addBluetoothController(){
		const key = `bluetooth_controller`;
		
		this.addVarDef(`WeBluetoothController ${key}`, key);
		this.addSetupCode(`Serial.begin(115200);\n`);
		this.addLoopCode(`${key}.loop()`, key);

		return key;
	}

	const bluetooth_controller_keys = [null,
		'WeJOYSTICK_LY',
		'WeJOYSTICK_LX',
		'WeJOYSTICK_RY',
		'WeJOYSTICK_RX',
		'WeBUTTON_ZR',
		'WeBUTTON_R',
		'WeBUTTON_ZL',
		'WeBUTTON_L',
		'WeBUTTON_HOME',
		'WeBUTTON_BL',
		'WeBUTTON_Y',
		'WeBUTTON_B',
		'WeBUTTON_A',
		'WeBUTTON_X',
		'WeBUTTON_PLUS',
		'WeBUTTON_MODE',
		'WeBUTTON_UP',
		'WeBUTTON_DOWN',
		'WeBUTTON_LEFT',
		'WeBUTTON_RIGHT',
		'WeBUTTON_MINUS',
		'WeBUTTON_BR'
	];

	Arduino.weeemake_bluetooth_controller_button = function(block){
		const BLUETOOTH_CONTROLLER_KEY = this.getFieldValue(block,'BLUETOOTH_CONTROLLER_KEY');

		let key = addBluetoothController();

		return [`${key}.buttonPressed(${bluetooth_controller_keys[BLUETOOTH_CONTROLLER_KEY]})`, this.ORDER_HIGH];
	}

	Arduino.weeemake_bluetooth_controller_joystick = function(block){
		const LEFT_RIGHT = this.getFieldValue(block,'LEFT_RIGHT');
		const AXIS2 = this.getFieldValue(block,'AXIS2');

		let key = addBluetoothController();

		let a = LEFT_RIGHT == '0' ? 0 : 2;
		let b = AXIS2 == '0' ? 2 : 1;

		return [`${key}.readAnalog(${bluetooth_controller_keys[a+b]})`, this.ORDER_HIGH];
	};

	Arduino.weeemake_wifi_set_info = function(block, {pin, SSID='', PWD=''}){
		const key = this.genSensorKey('WeWifi', 'wifi', pin);
		return `${key}.setWIFIinfo(${JSON.stringify(SSID)}, ${JSON.stringify(PWD)})` + this.END;
	}

	Arduino.weeemake_wifi_init_mode = function(block, {pin, mode, CHANNEL, IP, PORT}){
		const key = this.genSensorKey('WeWifi', 'wifi', pin);
		let code;
		if(mode == 'sta'){
			code = 'initSTA()'
		}else if(mode == 'ap'){
			code = `initAP(${CHANNEL})`;
		}else{
			code = `init${mode == 'tcp' ? 'TCP' : 'Slave'}(${JSON.stringify(IP)}, ${PORT})`;
		}
		return `${key}.${code}` + this.END;
	}

	Arduino.weeemake_wifi_write = function(block, {pin, VALUE, ID}){
		const key = this.genSensorKey('WeWifi', 'wifi', pin);
		return `${key}.write(${VALUE}, ${ID})` + this.END;
	}

	Arduino.weeemake_wifi_read = function(block, {pin}){
		const key = this.genSensorKey('WeWifi', 'wifi', pin);
		return [`${key}.readString()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_wifi_read_ip = function(block, {pin}){
		const key = this.genSensorKey('WeWifi', 'wifi', pin);
		return [`${key}.readIP()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_wifi_value = (list => function(block, {pin, type}){
		const key = this.genSensorKey('WeWifi', 'wifi', pin);
		return [`${key}.${list[type]}`, this.ORDER_HIGH];
	})(['IP_addr', 'link_IP', 'rx_buffer']);

	Arduino.weeemake_wifi_check_recv_data = function(block, {pin, DATA}){
		const key = this.genSensorKey('WeWifi', 'wifi', pin);
		return [`strcmp(${key}.rx_buffer, ${DATA}) == 0`, this.ORDER_RELATIONAL];
	}

	Arduino.weeemake_image_recognition_set_color = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const IMAGE_RECOGNITION_COLOR_INDEX = this.getFieldValue(block,'IMAGE_RECOGNITION_COLOR_INDEX');
		const minL = this.valueToCode(block, 'minL', this.ORDER_NONE);
		const maxL = this.valueToCode(block, 'maxL', this.ORDER_NONE);
		const minA = this.valueToCode(block, 'minA', this.ORDER_NONE);
		const maxA = this.valueToCode(block, 'maxA', this.ORDER_NONE);
		const minB = this.valueToCode(block, 'minB', this.ORDER_NONE);
		const maxB = this.valueToCode(block, 'maxB', this.ORDER_NONE);

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return `${key}.setLabColor${IMAGE_RECOGNITION_COLOR_INDEX}(${minL}, ${maxL}, ${minA}, ${maxA}, ${minB}, ${maxB})` + this.END;
	}

	Arduino.weeemake_image_recognition_set_threshold = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const VALUE = this.valueToCode(block, 'VALUE', this.ORDER_NONE);

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return `${key}.setPixelsThreshold(${VALUE})` + this.END;
	}

	Arduino.weeemake_image_recognition_set_traffic_signs_mode = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return `${key}.setTrafficSignsMode()` + this.END;
	}

	Arduino.weeemake_image_recognition_get_traffic_signs_value = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const TRAFFIC_SIGN = this.getFieldValue(block,'TRAFFIC_SIGN');

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];
		let valueKey = key + '_value';

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);
		this.addVarDef(`int ${valueKey}`, valueKey);

		this.addLoopCode(`${valueKey} = ${key}.getTrafficSigns()`);

		return [`${valueKey} == ${TRAFFIC_SIGN}`, this.ORDER_RELATIONAL];
	}

	Arduino.weeemake_ir_send = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const DATA = this.getInputTargetBlock(block, 'DATA').getFieldValue('TEXT') || '0';

		let len = DATA.split(',').length;

		let key = `ir_sender_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeInfraredSender ${key}(${SENSOR_PORT})`, key);

		return `{\n\tunsigned int data[] = {${DATA}};\n\t${key}.send_ir_raw(data, ${len});\n}\n`;
	}

module.exports = Arduino;