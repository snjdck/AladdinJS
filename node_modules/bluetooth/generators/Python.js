'use strict';

const needBrackets = require('js/needBrackets');
const {tab, untab} = require('utils/text');

//https://docs.python.org/3/reference/expressions.html#operator-precedence
const Python = {
	ORDER_ATOMIC: 0,
	ORDER_HIGH: 1,
	ORDER_EXPONENTIATION: 2,
	ORDER_UNARY: 3,
	ORDER_MULTIPLICATIVE: 4,
	ORDER_ADDITIVE: 5,
	ORDER_SHIFT: 6,
	ORDER_BIT_AND: 7,
	ORDER_BIT_XOR: 8,
	ORDER_BIT_OR: 9,
	ORDER_RELATIONAL: 10,
	ORDER_EQUAL: 10,//==ORDER_RELATIONAL
	ORDER_NOT: 11,
	ORDER_AND: 12,
	ORDER_OR: 13,
	ORDER_NONE: 99,
	END: '\n',
	commentStart:'#',
	needBrackets: needBrackets([2, 3, 11]),//ORDER_EXPONENTIATION, ORDER_UNARY, ORDER_NOT
	onCodeMissed(text, v=0){
		return [v, this.ORDER_ATOMIC];
	},
	onGenVarDef(new_name, name, type){
		return `${new_name} = ${type == 'Array' ? '[]' : 0}\t#${name}\n`;
	},
	addFuncDef(name, body){
		this.addStage(this.STAGE_FUNC_DEF, `${name}:\n${tab(body || 'pass')}\n\n`);
	},
	genSensorKey(type, name, pin='0'){
		const suffix = pin.split('_').pop();
		const key = name.startsWith(suffix.toLowerCase()) ? name : name + `_` + suffix;
		this.addInclude(`import ${type}`);
		this.addVarDef(`${key} = ${type}(${pin})\n`);
		return key;
	},
	finish(workspace, setupCode){
		this.collectVarDefs(workspace.variables?.variable);
		this.addStage(this.STAGE_SETUP, setupCode + '%loop-b%');
		this.addStage(this.STAGE_LOOP, '%loop-e%');
		const code = this.genStageCode();
		const pattern = /%loop-b%\n(.*)%loop-e%/s;
		if(code.indexOf('\nwhile True:\n') >= 0){
			return code.slice(0, code.lastIndexOf('%loop-b%')).replace('\nwhile True:\n', '$&' + tab(code.match(pattern)[1]));
		}
		return code.replace(pattern, (_, v) => v ? `while True:\n${tab(v)}` : '');
	}
}

module.exports = Python;