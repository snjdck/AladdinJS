'use strict';

const db = {board:'elf'}
const board_elf_mini = 'mini';
const board_elf_2560 = 'elf 2560';
const pinyin = require('utils/text/pinyin');

const identity = v => v;
//*
function hexToRgb(hex){
	var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	return result ? {
		R: parseInt(result[1], 16),
		G: parseInt(result[2], 16),
		B: parseInt(result[3], 16)
	} : {R:0,G:0,B:0};
}

function castMatrix(matrix, w, h){
	let bytes = [];
	for(let j=0; j<w; ++j){
		bytes[j] = 0;
		for(let i=0; i<h; ++i){
			if(matrix.charAt(i*w+j) === '1'){
				bytes[j] |= 1 << i;
			}
		}
	}
	return bytes.map(v => '0x' + v.toString(16)).join(', ');
}

const INT_2_BOOL = ['false','true'];
const INT_2_HIGH_LOW = ['LOW', 'HIGH'];
const IR_CODE_2_NAME = {
	0x45:'IR_CONTROLLER_A',
	0x46:'IR_CONTROLLER_B',
	0x47:'IR_CONTROLLER_C',
	0x44:'IR_CONTROLLER_D',
	0x40:'IR_CONTROLLER_UP',
	0x43:'IR_CONTROLLER_E',
	0x07:'IR_CONTROLLER_LEFT',
	0x15:'IR_CONTROLLER_OK',
	0x09:'IR_CONTROLLER_RIGHT',
	0x19:'IR_CONTROLLER_DOWN',
	0x0D:'IR_CONTROLLER_F',
	0x16:'IR_CONTROLLER_0',
	0x0C:'IR_CONTROLLER_1',
	0x18:'IR_CONTROLLER_2',
	0x5E:'IR_CONTROLLER_3',
	0x08:'IR_CONTROLLER_4',
	0x1C:'IR_CONTROLLER_5',
	0x5A:'IR_CONTROLLER_6',
	0x42:'IR_CONTROLLER_7',
	0x52:'IR_CONTROLLER_8',
	0x4A:'IR_CONTROLLER_9'
};

//*/
const Arduino = {};

	function castToStr(block, key, mapFn=identity){
		let valueBlock = this.getInputTargetBlock(block, key);
		return valueBlock.type == 'text' ? JSON.stringify(mapFn(valueBlock.getFieldValue('TEXT'))) : 'String(' + this.valueToCode(block, key, this.ORDER_NONE) + ').c_str()';
	}

	const register_option = name => Arduino[name] = block => [this.getFieldValue(block,name.toUpperCase()), this.ORDER_ATOMIC];

	register_option('speed');
	register_option('angle');
	register_option('rgb');
	register_option('note');
	register_option('beat');
	register_option('matrix@21*7');
	register_option('matrix@14*5');
	register_option('speech-recognition-index');
	register_option('vibration-speed');
	register_option('rj11-rgb-index');
	register_option('rgb-ring-index');
	register_option('elf-core-rgb-index');
	//register_option('colour_picker', 'COLOUR');
	//register_option('math_integer', 'NUM');
	Arduino["matrix@14*5"] =
	Arduino["matrix@21*7"] = function(block){
		return [this.getFieldValue(block,'MATRIX'), this.ORDER_ATOMIC];
	}

	Arduino.board_port =
	Arduino.led_index =
	Arduino.buzzer_note =
	Arduino.buzzer_beat =
	Arduino.sensor_port =
	Arduino.servo_port =
	Arduino.motor_speed =
	Arduino.dc_motor_index = function(block, {VALUE}){return [VALUE, this.ORDER_ATOMIC]}
	Arduino.logic_boolean = function(block, {BOOL}){return [BOOL == 'TRUE' ? 'true' : 'false', this.ORDER_ATOMIC]}
	Arduino.ir_code = function(block, {VALUE}){return [IR_CODE_2_NAME[VALUE], this.ORDER_ATOMIC]}

	Arduino.weeemake_generate_offline_code = block => '';
	Arduino.when_start = block => '';
	Arduino.weeemake_set_var_type = (list => function(block){
		let raw_name = block.getField('VARIABLE').text_;
		let name = this.adjustVarName(raw_name);
		const VAR_TYPE = this.getFieldValue(block,'VAR_TYPE');
		this.varType[name] = list[VAR_TYPE];
		return '';
	})(['double', 'long']);
	Arduino.weeemake_weeebot_board_rgb = function(block){
		const COLOR = this.valueToCode(block, 'COLOR', this.ORDER_NONE);

		let key = `rgb_led_board`;

		this.addVarDef(`WeRGBLed ${key}(OnBoard_RGB)`, key);

		let result = [
			`${key}.setColor(1, ${COLOR})`,
			`${key}.show()`
		];

		return result.map(v => v + this.END).join('');
	}

	Arduino.weeemake_weeebot_board_rgb3 = function(block){
		const R = this.valueToCode(block, 'R', this.ORDER_NONE);
		const G = this.valueToCode(block, 'G', this.ORDER_NONE);
		const B = this.valueToCode(block, 'B', this.ORDER_NONE);

		let key = `rgb_led_board`;

		this.addVarDef(`WeRGBLed ${key}(OnBoard_RGB)`, key);

		let result = [
			`${key}.setColor(1, ${R}, ${G}, ${B})`,
			`${key}.show()`
		];

		return result.map(v => v + this.END).join('');
	}

	Arduino.weeemake_weeebot_board_button = function(block){
		this.addSetupCode('pinMode(OnBoard_Button, INPUT)', 'OnBoard_Button');
		return ['!digitalRead(OnBoard_Button)', this.ORDER_UNARY];
	}

	const genRGB = (key, port) => function(block){
		const PIXEL = this.valueToCode(block, 'PIXEL', this.ORDER_NONE);
		const COLOR = this.valueToCode(block, 'COLOR', this.ORDER_NONE);

		this.addVarDef(`WeRGBLed ${key}(${port})`, key);

		let result = [
			`${key}.setColor(${PIXEL}, ${COLOR})`,
			`${key}.show()`
		];

		return result.map(v => v + this.END).join('');
	};

	const genRGB3 = (key, port) => function(block){
		const PIXEL = this.valueToCode(block, 'PIXEL', this.ORDER_NONE);
		const R = this.valueToCode(block, 'R', this.ORDER_NONE);
		const G = this.valueToCode(block, 'G', this.ORDER_NONE);
		const B = this.valueToCode(block, 'B', this.ORDER_NONE);

		this.addVarDef(`WeRGBLed ${key}(${port})`, key);

		let result = [
			`${key}.setColor(${PIXEL}, ${R}, ${G}, ${B})`,
			`${key}.show()`
		];

		return result.map(v => v + this.END).join('');
	};

	Arduino.weeemake_weeebot_pin_ring_rgb = genRGB('rgb_led_ring', 'PORT_0');
	Arduino.weeemake_weeebot_pin_ring_rgb3 = genRGB3('rgb_led_ring', 'PORT_0');
	Arduino.weeemake_elf_core_board_rgb = genRGB('rgb_led_board', 'OnBoard_RGB');
	Arduino.weeemake_elf_core_board_rgb3 = genRGB3('rgb_led_board', 'OnBoard_RGB');

	Arduino.weeemake_soil =
	Arduino.weeemake_weeebot_pin_sound =
	Arduino.weeemake_weeebot_pin_light = function(block){
		//const BOARD_PORT = this.valueToCode(block, 'BOARD_PORT', this.ORDER_NONE);
		const BOARD_PORT = this.valueToCode(block, 'BOARD_PORT', this.ORDER_NONE);

		this.addSetupCode(`pinMode(${BOARD_PORT}, INPUT)`, BOARD_PORT);
		return [`analogRead(${BOARD_PORT})`, this.ORDER_HIGH];
	}

	Arduino.weeemake_weeebot_pin_ir = function(block){
		const BOARD_PORT = this.valueToCode(block, 'BOARD_PORT', this.ORDER_NONE);
		//let IR_CODE = this.getFieldValue(block,'IR_CODE');
		let IR_CODE = this.valueToCode(block, 'IR_CODE', this.ORDER_NONE)

		this.addVarDef(`WeInfraredReceiver ir(${BOARD_PORT})`, 'ir');
		this.addSetupCode('ir.begin()', 'ir');
		this.addLoopCode('ir.loop()', 'ir');
		Arduino.irFlag = true;

		return [`ir.isKeyPressed(${IR_CODE})`, this.ORDER_HIGH];
	}

	Arduino.weeemake_weeebotMini_board_light = function(block){
		this.addSetupCode(`pinMode(OnBoard_Light, INPUT)`, 'OnBoard_Light');
		return [`analogRead(OnBoard_Light)`, this.ORDER_HIGH];
	}

	Arduino.weeemake_weeebotMini_board_sound = function(block){
		this.addSetupCode(`pinMode(OnBoard_Sound, INPUT)`, 'OnBoard_Sound');
		return [`analogRead(OnBoard_Sound)`, this.ORDER_HIGH];
	}

	Arduino.weeemake_weeebotMini_board_ir = function(block){
		let IR_CODE = this.valueToCode(block, 'IR_CODE', this.ORDER_NONE)

		this.addVarDef(`WeInfraredReceiver ir(OnBoard_IR)`, 'ir');
		this.addSetupCode('ir.begin()', 'ir');
		this.addLoopCode('ir.loop()', 'ir');
		Arduino.irFlag = true;

		return [`ir.isKeyPressed(${IR_CODE})`, this.ORDER_HIGH];
	}

	Arduino.weeemake_weeebotMini_board_back_led = (dict => function(block){
		let BACK_LED_PORT = this.getFieldValue(block,'BACK_LED_PORT');
		const ON_OFF = this.valueToCode(block, 'ON_OFF', this.ORDER_NONE);

		BACK_LED_PORT = dict[BACK_LED_PORT];

		this.addSetupCode(`pinMode(${BACK_LED_PORT}, OUTPUT)`, BACK_LED_PORT);
		return `digitalWrite(${BACK_LED_PORT}, ${ON_OFF})` + this.END;
	})({'4':'MINI_LEFT_YELLOW','3':'MINI_LEFT_RED','14':'MINI_RIGHT_RED','13':'MINI_RIGHT_YELLOW'});

	Arduino.weeemake_single_led = function(block, {pin=0, value}){
		this.addSetupCode(`pinMode(${pin}, OUTPUT)`, pin);
		return `digitalWrite(${pin}, ${value})` + this.END;
	}

	Arduino.weeemake_single_line_follower = function(block){
		const BOARD_PORT = this.valueToCode(block, 'BOARD_PORT', this.ORDER_NONE);
		this.addSetupCode(`pinMode(${BOARD_PORT}, INPUT)`, BOARD_PORT);
		return [`1023 - analogRead(${BOARD_PORT})`, this.ORDER_ADDITIVE];
	}

	Arduino.elf_328p_mpin = 'elf_uno_mpin'
	Arduino.elf_mini_mpin = 'elf_uno_mpin'
	Arduino.elf_uno_mpin =  function(block, {value}){
		return [value, this.ORDER_HIGH]
	}

	Arduino.weeemake_dc_motor = function(block, {pin, speed}, {pin:{type:pinType}}){
		const [pin0, pin1] = pin.split(',');
		this.addSetupCode(`pinMode(${pin0}, OUTPUT)`);
		this.addSetupCode(`pinMode(${pin1}, OUTPUT)`);

		if(pinType == 'elf_328p_mpin'){
			return [`{`,
			`\tint16_t speed = ${speed};`,
			`\tanalogWrite(${pin0}, speed >= 0 ? speed : -speed);`,
			`\tdigitalWrite(${pin1}, speed >= 0 ? 0 : 1);`,
			`}`].map(v => v + '\n').join('');
		}
		return [`{`,
		`\tint16_t speed = ${speed};`,
		`\tanalogWrite(${pin0}, speed >= 0 ? 0 : -speed);`,
		`\tanalogWrite(${pin1}, speed >= 0 ? speed : 0);`,
		`}`].map(v => v + '\n').join('');
	}

	Arduino.weeemake_robot_move = function(block){
		//1,2,3,4 => F,B,L,R
		const MOVE_DIRECTION = this.getFieldValue(block,'MOVE_DIRECTION');
		let SPEED = this.valueToCode(block, 'SPEED', this.ORDER_NONE);

		let needSpeedVar = !/^\w+$/.test(SPEED);
		let result = [];
		this.addVarDef('WeDCMotor dc_1(M1)', 'dc_1');
		this.addVarDef('WeDCMotor dc_2(M2)', 'dc_2');
		let l_sign = (MOVE_DIRECTION === '1' || MOVE_DIRECTION === '4') ? '-' : '';
		let r_sign = (MOVE_DIRECTION === '1' || MOVE_DIRECTION === '3') ? '' : '-';
		if(needSpeedVar){
			this.addVarDef('int speed', 'speed');
			result.push(`speed = ${SPEED}`);
			SPEED = 'speed';
		}
		result.push(`dc_1.run(${r_sign}${SPEED})`);
		result.push(`dc_2.run(${l_sign}${SPEED})`);
		return result.map(v => v + this.END).join('');
	}

	Arduino.weeemake_vehicle_move = function(block){
		let LSPEED;
		let RSPEED = this.valueToCode(block, 'RSPEED', this.ORDER_NONE);

		if(this.getInputTargetBlock(block, 'LSPEED').type != 'speed'){
			LSPEED = '-' + this.valueToCode(block, 'LSPEED', this.ORDER_UNARY);
		}else{
			LSPEED = - this.valueToCode(block, 'LSPEED', this.ORDER_NONE);
		}
		
		let result = [];
		this.addVarDef('WeDCMotor dc_1(M1)', 'dc_1');
		this.addVarDef('WeDCMotor dc_2(M2)', 'dc_2');

		result.push(`dc_1.run(${RSPEED})`);
		result.push(`dc_2.run(${LSPEED})`);
		return result.map(v => v + this.END).join('');
	}

	Arduino.weeemake_robot_stop = function(block){
		this.addVarDef('WeDCMotor dc_1(M1)', 'dc_1');
		this.addVarDef('WeDCMotor dc_2(M2)', 'dc_2');
		let result = [];
		result.push(`dc_1.stop()`);
		result.push(`dc_2.stop()`);
		return result.map(v => v + this.END).join('');
	}

	Arduino.weeemake_dc_130_motor = function(block, {pin=0, speed}){
		let key = `dc130_` + pin;

		this.addVarDef(`We130DCMotor ${key}(${pin})`, key);

		return `${key}.run(${speed})` + this.END;
	}

	Arduino.weeemake_encoder_motor_set_origin = function(block){
		const MOTOR_PORT = this.getFieldValue(block,'MOTOR_PORT');

		let key = `encoder_` + MOTOR_PORT.split('_')[1];

		this.addVarDef(`WeEncoderMotor ${key}(${MOTOR_PORT})`, key);

		return `${key}.setPositionOrigin()` + this.END;
	}

	Arduino.weeemake_encoder_motor_power = function(block){
		const MOTOR_PORT = this.getFieldValue(block,'MOTOR_PORT');
		const SPEED = this.valueToCode(block, 'SPEED', this.ORDER_NONE);

		let key = `encoder_` + MOTOR_PORT.split('_')[1];

		this.addVarDef(`WeEncoderMotor ${key}(${MOTOR_PORT})`, key);

		return `${key}.run(${SPEED})` + this.END;
	}

	Arduino.weeemake_encoder_motor_speed = function(block){
		const MOTOR_PORT = this.getFieldValue(block,'MOTOR_PORT');
		const SPEED = this.valueToCode(block, 'SPEED', this.ORDER_NONE);

		let key = `encoder_` + MOTOR_PORT.split('_')[1];

		this.addVarDef(`WeEncoderMotor ${key}(${MOTOR_PORT})`, key);

		return `${key}.runSpeed_188(${SPEED})` + this.END;
	}

	Arduino.weeemake_encoder_motor_move = function(block){
		const MOTOR_PORT = this.getFieldValue(block,'MOTOR_PORT');
		const SPEED = this.valueToCode(block, 'SPEED', this.ORDER_NONE);

		let key = `encoder_` + MOTOR_PORT.split('_')[1];

		this.addVarDef(`WeEncoderMotor ${key}(${MOTOR_PORT})`, key);

		return `${key}.move(150, ${SPEED})` + this.END;
	}

	Arduino.weeemake_servo = function(block){
		const pin = this.valueToCode(block, 'pin', this.ORDER_NONE);
		const angle = this.valueToCode(block, 'angle', this.ORDER_NONE);

		let key = `servo_${pin}`;

		if(db.board === board_elf_mini){
			this.addVarDef(`WeServo ${key}(${pin})`, key);
		}else{
			this.addVarDef(`Servo ${key}`, key);
			this.addSetupCode(`${key}.attach(${pin})`, key);
		}

		return `${key}.write(${angle})` + this.END;
	}

	Arduino.weeemake_servo_360 = function(block){
		const SERVO_PORT = this.valueToCode(block, 'SERVO_PORT', this.ORDER_NONE);
		const ANGLE = this.valueToCode(block, 'ANGLE', this.ORDER_NONE);

		let key = `servo_` + SERVO_PORT.split('_').pop();

		this.addVarDef(`WeServo360 ${key}(${SERVO_PORT})`, key);

		return `${key}.write(${ANGLE})` + this.END;
	}

	Arduino.weeemake_buzzer = function(block, {pin, note, beat}){
		this.addInclude(`#include<WeBuzzer.h>`)
		this.addVarDef(`WeBuzzer buzzer(${pin})`, 'buzzer');

		return `buzzer.tone(${note}, ${beat})` + this.END;
	}

	Arduino.weeemake_rgb_strip = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const PIXEL = this.valueToCode(block, 'PIXEL', this.ORDER_NONE);
		const COLOR = this.valueToCode(block, 'COLOR', this.ORDER_NONE);

		let key = `rgb_led_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeRGBLed ${key}(${SENSOR_PORT})`, key);

		let result = [
			`${key}.setColor(${PIXEL}, ${COLOR})`,
			`${key}.show()`
		];

		return result.map(v => v + this.END).join('');
	}

	Arduino.weeemake_rgb3_strip = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const PIXEL = this.valueToCode(block, 'PIXEL', this.ORDER_NONE);
		const R = this.valueToCode(block, 'R', this.ORDER_NONE);
		const G = this.valueToCode(block, 'G', this.ORDER_NONE);
		const B = this.valueToCode(block, 'B', this.ORDER_NONE);

		let key = `rgb_led_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeRGBLed ${key}(${SENSOR_PORT})`, key);

		let result = [
			`${key}.setColor(${PIXEL}, ${R}, ${G}, ${B})`,
			`${key}.show()`
		];

		return result.map(v => v + this.END).join('');
	}

	Arduino.weeemake_rgb_RJ11 = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		//const RJ11_RGB_INDEX = this.getFieldValue(block,'RJ11_RGB_INDEX');
		const INDEX = this.valueToCode(block, 'INDEX', this.ORDER_NONE);
		const COLOR = this.valueToCode(block, 'COLOR', this.ORDER_NONE);

		let key = `rgb_led_RJ_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeRGBLED_RJ ${key}(${SENSOR_PORT})`, key);

		let result = [
			`${key}.setColor(${INDEX}, ${COLOR})`,
			`${key}.show()`
		];

		return result.map(v => v + this.END).join('');
	}

	Arduino.weeemake_rgb3_RJ11 = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		//const RJ11_RGB_INDEX = this.getFieldValue(block,'RJ11_RGB_INDEX');
		//const PIXEL = this.valueToCode(block, 'PIXEL', this.ORDER_NONE);
		const INDEX = this.valueToCode(block, 'INDEX', this.ORDER_NONE);
		const R = this.valueToCode(block, 'R', this.ORDER_NONE);
		const G = this.valueToCode(block, 'G', this.ORDER_NONE);
		const B = this.valueToCode(block, 'B', this.ORDER_NONE);

		let key = `rgb_led_RJ_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeRGBLED_RJ ${key}(${SENSOR_PORT})`, key);

		let result = [
			`${key}.setColor(${INDEX}, ${R}, ${G}, ${B})`,
			`${key}.show()`
		];

		return result.map(v => v + this.END).join('');
	}

	Arduino.weeemake_line_follower = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const LINE_FOLLOWER_INDEX = this.getFieldValue(block,'LINE_FOLLOWER_INDEX');

		let key = `linefollower_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLineFollower ${key}(${SENSOR_PORT})`, key);

		return [`${key}.startRead(${LINE_FOLLOWER_INDEX})`, this.ORDER_HIGH];
	}

	Arduino.weeemake_ultrasonic = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `ultrasonic_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeUltrasonicSensor ${key}(${SENSOR_PORT})`, key);

		return [`${key}.distanceCm()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_ultrasonic_led = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		//const ULTRASONIC_LED_INDEX = this.valueToCode(block, 'ULTRASONIC_LED_INDEX', this.ORDER_NONE);
		const ULTRASONIC_LED_INDEX = this.valueToCode(block, 'ULTRASONIC_LED_INDEX', this.ORDER_NONE);
		const ON_OFF = this.valueToCode(block, 'ON_OFF', this.ORDER_NONE);

		let key = `ultrasonic_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeUltrasonicSensor ${key}(${SENSOR_PORT})`, key);

		return `${key}.setLed(${ULTRASONIC_LED_INDEX}, ${ON_OFF})` + this.END;
	}

	Arduino.weeemake_ultrasonic_rgb = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ULTRASONIC_LED_INDEX = this.valueToCode(block, 'ULTRASONIC_LED_INDEX', this.ORDER_NONE);
		const COLOR = this.valueToCode(block, 'COLOR', this.ORDER_NONE);

		let key = `ultrasonic_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeUltrasonicSensor ${key}(${SENSOR_PORT})`, key);

		return `${key}.setColor(${ULTRASONIC_LED_INDEX}, ${COLOR})` + this.END;
	}

	Arduino.weeemake_ultrasonic_rgb3 = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ULTRASONIC_LED_INDEX = this.valueToCode(block, 'ULTRASONIC_LED_INDEX', this.ORDER_NONE);
		const R = this.valueToCode(block, 'R', this.ORDER_NONE);
		const G = this.valueToCode(block, 'G', this.ORDER_NONE);
		const B = this.valueToCode(block, 'B', this.ORDER_NONE);

		let key = `ultrasonic_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeUltrasonicSensor ${key}(${SENSOR_PORT})`, key);

		return `${key}.setColor(${ULTRASONIC_LED_INDEX}, ${R}, ${G}, ${B})` + this.END;
	}

	Arduino.weeemake_ir_avoid = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `ir_avoid_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeIRAvoidSensor ${key}(${SENSOR_PORT})`, key);

		return [`${key}.isObstacle()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_ir_avoid_led = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ULTRASONIC_LED_INDEX = this.valueToCode(block, 'ULTRASONIC_LED_INDEX', this.ORDER_NONE);
		const ON_OFF = this.valueToCode(block, 'ON_OFF', this.ORDER_NONE);

		let key = `ir_avoid_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeIRAvoidSensor ${key}(${SENSOR_PORT})`, key);

		return `${key}.setLed(${ULTRASONIC_LED_INDEX}, ${ON_OFF})` + this.END;
	}

	Arduino.weeemake_ir_avoid_rgb = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ULTRASONIC_LED_INDEX = this.valueToCode(block, 'ULTRASONIC_LED_INDEX', this.ORDER_NONE);
		const COLOR = this.valueToCode(block, 'COLOR', this.ORDER_NONE);

		let key = `ir_avoid_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeIRAvoidSensor ${key}(${SENSOR_PORT})`, key);

		return `${key}.setColor(${ULTRASONIC_LED_INDEX}, ${COLOR})` + this.END;
	}

	Arduino.weeemake_ir_avoid_rgb3 = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ULTRASONIC_LED_INDEX = this.valueToCode(block, 'ULTRASONIC_LED_INDEX', this.ORDER_NONE);
		const R = this.valueToCode(block, 'R', this.ORDER_NONE);
		const G = this.valueToCode(block, 'G', this.ORDER_NONE);
		const B = this.valueToCode(block, 'B', this.ORDER_NONE);

		let key = `ir_avoid_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeIRAvoidSensor ${key}(${SENSOR_PORT})`, key);

		return `${key}.setColor(${ULTRASONIC_LED_INDEX}, ${R}, ${G}, ${B})` + this.END;
	}

	Arduino.weeemake_led_matrix_number = function(block){
		const LED_MATRIX_TYPE = this.getFieldValue(block,'LED_MATRIX_TYPE').replace('x', '_');
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const NUM = this.valueToCode(block, 'NUM', this.ORDER_NONE);

		let key = `led_matrix_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDPanelModuleMatrix${LED_MATRIX_TYPE} ${key}(${SENSOR_PORT})`, key);

		return `${key}.showNum(${NUM})` + this.END;
	}

	Arduino.weeemake_led_matrix_time = function(block){
		const LED_MATRIX_TYPE = this.getFieldValue(block,'LED_MATRIX_TYPE').replace('x', '_');
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const HOUR = this.valueToCode(block, 'HOUR', this.ORDER_NONE);
		const SHOW_COLON = this.valueToCode(block, 'SHOW_COLON', this.ORDER_NONE);
		const MINUTE = this.valueToCode(block, 'MINUTE', this.ORDER_NONE);

		let key = `led_matrix_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDPanelModuleMatrix${LED_MATRIX_TYPE} ${key}(${SENSOR_PORT})`, key);

		return `${key}.showClock(${HOUR}, ${MINUTE}, ${SHOW_COLON})` + this.END;
	}

	Arduino.weeemake_led_matrix_string = function(block){
		const LED_MATRIX_TYPE = this.getFieldValue(block,'LED_MATRIX_TYPE').replace('x', '_');
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const X = this.valueToCode(block, 'X', this.ORDER_NONE);
		const Y = this.valueToCode(block, 'Y', this.ORDER_NONE);
		const STR = this.valueToCode(block, 'STR', this.ORDER_NONE);

		let key = `led_matrix_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDPanelModuleMatrix${LED_MATRIX_TYPE} ${key}(${SENSOR_PORT})`, key);

		return `${key}.showChar(${X}, ${Y}, ${STR})` + this.END;
	}

	Arduino.weeemake_led_matrix_bitmap = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const X = this.valueToCode(block, 'X', this.ORDER_NONE);
		const Y = this.valueToCode(block, 'Y', this.ORDER_NONE);
		const MATRIX = this.valueToCode(block, 'MATRIX', this.ORDER_NONE);
		const IS_BIG_MATRIX = this.getInputTargetBlock(block, 'MATRIX').type.indexOf("21*7") > 0;

		let key = `led_matrix_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDPanelModuleMatrix${IS_BIG_MATRIX ? '7_21' : '5_14'} ${key}(${SENSOR_PORT})`, key);
		let data = IS_BIG_MATRIX ? castMatrix(MATRIX, 21, 7) : castMatrix(MATRIX, 14, 5);
		return `${key}.showBitmap2(${X}, ${Y}, ${data})` + this.END;
	}

	Arduino.weeemake_led_matrix_bitmap_21x7 = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const X = this.valueToCode(block, 'X', this.ORDER_NONE);
		const Y = this.valueToCode(block, 'Y', this.ORDER_NONE);
		const MATRIX = this.valueToCode(block, 'MATRIX', this.ORDER_NONE);

		let key = `led_matrix_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDPanelModuleMatrix7_21 ${key}(${SENSOR_PORT})`, key);

		return `${key}.showBitmap2(${X}, ${Y}, ${castMatrix(MATRIX, 21, 7)})` + this.END;
	}

	Arduino.weeemake_led_matrix_bitmap_14x5 = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const X = this.valueToCode(block, 'X', this.ORDER_NONE);
		const Y = this.valueToCode(block, 'Y', this.ORDER_NONE);
		const MATRIX = this.valueToCode(block, 'MATRIX', this.ORDER_NONE);

		let key = `led_matrix_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDPanelModuleMatrix5_14 ${key}(${SENSOR_PORT})`, key);

		return `${key}.showBitmap2(${X}, ${Y}, ${castMatrix(MATRIX, 14, 5)})` + this.END;
	}
/*
	Arduino.weeemake_led_matrix_pixel_show = function(block){
		const LED_MATRIX_TYPE = this.getFieldValue(block,'LED_MATRIX_TYPE').replace('x', '_');
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const X = this.valueToCode(block, 'X', this.ORDER_NONE);
		const Y = this.valueToCode(block, 'Y', this.ORDER_NONE);

		let key = `led_matrix_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDPanelModuleMatrix${LED_MATRIX_TYPE} ${key}(${SENSOR_PORT})`, key);

		return `${key}.turnOnDot(${X}, ${Y})` + this.END;
	}

	Arduino.weeemake_led_matrix_pixel_hide = function(block){
		const LED_MATRIX_TYPE = this.getFieldValue(block,'LED_MATRIX_TYPE').replace('x', '_');
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const X = this.valueToCode(block, 'X', this.ORDER_NONE);
		const Y = this.valueToCode(block, 'Y', this.ORDER_NONE);

		let key = `led_matrix_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDPanelModuleMatrix${LED_MATRIX_TYPE} ${key}(${SENSOR_PORT})`, key);

		return `${key}.turnOffDot(${X}, ${Y})` + this.END;
	}
*/
	Arduino.weeemake_led_matrix_pixel = function(block){
		const LED_MATRIX_TYPE = this.getFieldValue(block,'LED_MATRIX_TYPE').replace('x', '_');
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const SHOW_HIDE = this.valueToCode(block, 'SHOW_HIDE', this.ORDER_NONE);
		const X = this.valueToCode(block, 'X', this.ORDER_NONE);
		const Y = this.valueToCode(block, 'Y', this.ORDER_NONE);

		let key = `led_matrix_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDPanelModuleMatrix${LED_MATRIX_TYPE} ${key}(${SENSOR_PORT})`, key);

		return `${key}.setDot(${X}, ${Y}, ${SHOW_HIDE})` + this.END;
	};

	Arduino.weeemake_led_matrix_clear = function(block){
		const LED_MATRIX_TYPE = this.getFieldValue(block,'LED_MATRIX_TYPE').replace('x', '_');
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `led_matrix_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDPanelModuleMatrix${LED_MATRIX_TYPE} ${key}(${SENSOR_PORT})`, key);

		return `${key}.clearScreen()` + this.END;
	}

	Arduino.weeemake_humiture = (list => function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const HUMITURE_TYPE = this.getFieldValue(block,'HUMITURE_TYPE');

		let key = `humiture_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeHumiture ${key}(${SENSOR_PORT})`, key);
		this.addLoopCode(`${key}.startRead()`, key);

		return [`${key}.${list[HUMITURE_TYPE]}()`, this.ORDER_HIGH];
	})(['getHumidity', 'getTemperature']);

	Arduino.weeemake_seven_segment = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const NUM = this.valueToCode(block, 'NUM', this.ORDER_NONE);

		let key = `seven_segment_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`We7SegmentDisplay ${key}(${SENSOR_PORT})`, key);

		return `${key}.showNumber(${NUM})` + this.END;
	}
/*
	Arduino.weeemake_sliding_potentiometer = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `potentiometer_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeSlidingPotentiometer ${key}(${SENSOR_PORT})`, key);

		return [`${key}.readAnalog()`, this.ORDER_HIGH];
	}
*/
	Arduino.weeemake_potentiometer = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `potentiometer_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WePotentiometer ${key}(${SENSOR_PORT})`, key);

		return [`${key}.readAnalog()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_gas_sensor = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `gas_sensor_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeGasSensor ${key}(${SENSOR_PORT})`, key);

		return [`${key}.readAnalog()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_led_button_light = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const BUTTON_INDEX = this.getFieldValue(block,'BUTTON_INDEX');
		const ON_OFF = this.valueToCode(block, 'ON_OFF', this.ORDER_NONE);

		let key = `button4led_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`We4LEDButton ${key}(${SENSOR_PORT})`, key);

		return `${key}.setLed(${BUTTON_INDEX}, ${ON_OFF})` + this.END;
	}

	Arduino.weeemake_relay = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ON_OFF = this.valueToCode(block, 'ON_OFF', this.ORDER_NONE);

		let key = `relay_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeRelay ${key}(${SENSOR_PORT})`, key);

		return `${key}.setNC(${ON_OFF})` + this.END;
	}

	Arduino.weeemake_water_atomizer = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ON_OFF = this.valueToCode(block, 'ON_OFF', this.ORDER_NONE);

		let key = `water_atomizer_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeWaterAtomizer ${key}(${SENSOR_PORT})`, key);
		
		return `${key}.setRun(${ON_OFF})` + this.END;
	}

	Arduino.weeemake_color_sensor_white_balance = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `color_sensor_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeColorSensor ${key}(${SENSOR_PORT})`, key);
		
		return `${key}.whitebalance()` + this.END;
	}

	Arduino.weeemake_color_sensor_light = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ON_OFF = this.valueToCode(block, 'ON_OFF', this.ORDER_NONE);

		let key = `color_sensor_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeColorSensor ${key}(${SENSOR_PORT})`, key);
		
		return `${key}.setLight(${ON_OFF})` + this.END;
	}

	Arduino.weeemake_mp3_do = (list => function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const MP3_FUNCTION = this.getFieldValue(block,'MP3_FUNCTION');

		let key = `mp3_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeMP3 ${key}(${SENSOR_PORT})`, key);
		
		return `${key}.${list[MP3_FUNCTION]}()` + this.END;
	})(['play', 'pause', 'prevMusic', 'nextMusic']);
/*
	Arduino.weeemake_mp3_play = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `mp3_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeMP3 ${key}(${SENSOR_PORT})`, key);
		
		return `${key}.play()` + this.END;
	}

	Arduino.weeemake_mp3_pause = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `mp3_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeMP3 ${key}(${SENSOR_PORT})`, key);
		
		return `${key}.pause()` + this.END;
	}

	Arduino.weeemake_mp3_prev_music = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `mp3_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeMP3 ${key}(${SENSOR_PORT})`, key);
		
		return `${key}.prevMusic()` + this.END;
	}

	Arduino.weeemake_mp3_next_music = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `mp3_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeMP3 ${key}(${SENSOR_PORT})`, key);
		
		return `${key}.nextMusic()` + this.END;
	}
*/
	Arduino.weeemake_mp3_set_music = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const NUM = this.valueToCode(block, 'NUM', this.ORDER_NONE);

		let key = `mp3_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeMP3 ${key}(${SENSOR_PORT})`, key);
		
		return `${key}.appointMusic(${NUM})` + this.END;
	}

	Arduino.weeemake_mp3_set_volume = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const NUM = this.valueToCode(block, 'NUM', this.ORDER_NONE);

		let key = `mp3_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeMP3 ${key}(${SENSOR_PORT})`, key);
		
		return `${key}.appointVolume(${NUM})` + this.END;
	}

	Arduino.weeemake_mp3_set_device = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const MP3_DEVICE_TYPE = this.getFieldValue(block,'MP3_DEVICE_TYPE');

		let key = `mp3_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeMP3 ${key}(${SENSOR_PORT})`, key);
		
		return `${key}.appointDevice(${MP3_DEVICE_TYPE})` + this.END;
	}

	Arduino.weeemake_mp3_is_over = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `mp3_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeMP3 ${key}(${SENSOR_PORT})`, key);

		return [`${key}.isOver()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_oled_set_size = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const OLED_SIZE = this.getFieldValue(block,'OLED_SIZE');

		let key = `oled_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeOLED ${key}(${SENSOR_PORT})`, key);

		return `${key}.setSize(${OLED_SIZE})` + this.END;
	}

	Arduino.weeemake_oled_show_string = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const X = this.valueToCode(block, 'X', this.ORDER_NONE);
		const Y = this.valueToCode(block, 'Y', this.ORDER_NONE);
		const STR = this.valueToCode(block, 'STR', this.ORDER_NONE);

		let key = `oled_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeOLED ${key}(${SENSOR_PORT})`, key);

		return `${key}.showString(${X}, ${Y}, ${STR})` + this.END;
	}

	Arduino.weeemake_oled_show_number = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const X = this.valueToCode(block, 'X', this.ORDER_NONE);
		const Y = this.valueToCode(block, 'Y', this.ORDER_NONE);
		const NUM = this.valueToCode(block, 'NUM', this.ORDER_NONE);

		let key = `oled_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeOLED ${key}(${SENSOR_PORT})`, key);

		return `${key}.showNum(${X}, ${Y}, ${NUM})` + this.END;
	}

	Arduino.weeemake_oled_clear_screen = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `oled_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeOLED ${key}(${SENSOR_PORT})`, key);

		return `${key}.clearScreen()` + this.END;
	}

	Arduino.weeemake_color_sensor = (list => function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const COLOR_TYPE = this.getFieldValue(block,'COLOR_TYPE');

		let key = `color_sensor_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeColorSensor ${key}(${SENSOR_PORT})`, key);
		this.addLoopCode(`${key}.readColorData()`, key);

		return [`${key}.${list[COLOR_TYPE]}()`, this.ORDER_HIGH];
	})(['showColorData', 'showRedData', 'showGreenData', 'showBlueData']);

	Arduino.weeemake_flame_sensor = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const FLAME_INDEX = this.getFieldValue(block,'FLAME_INDEX');

		let key = `flame_sensor_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeFlameSensor ${key}(${SENSOR_PORT})`, key);
		this.addLoopCode(`${key}.readData()`, key);

		return [`${key}.showSensor${FLAME_INDEX}()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_joystick = (list => function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const AXIS2 = this.getFieldValue(block,'AXIS2');

		let key = `joystick_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeJoystick ${key}(${SENSOR_PORT})`, key);
		this.addLoopCode(`${key}.readData()`, key);

		return [`${key}.${list[AXIS2]}()`, this.ORDER_HIGH];
	})(['showX', 'showY']);

	Arduino.weeemake_compass = (list => function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const AXIS3 = this.getFieldValue(block,'AXIS3');

		let key = `compass_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeCompassSensor ${key}(${SENSOR_PORT})`, key);
		this.addLoopCode(`${key}.update()`, key);

		return [`${key}.${list[AXIS3]}()`, this.ORDER_HIGH];
	})(['getHeadS', 'getHeadY', 'getHeadZ']);

	Arduino.weeemake_gyro = (list => function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const GYRO_VALUE_TYPE = this.getFieldValue(block,'GYRO_VALUE_TYPE');
		const AXIS3 = this.getFieldValue(block,'AXIS3');

		let key = `gyro_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeGyroSensor ${key}(${SENSOR_PORT})`, key);
		this.addSetupCode(`${key}.begin()`, key);
		this.addLoopCode(`${key}.update()`, key);

		return [`${key}.${list[GYRO_VALUE_TYPE][AXIS3]}()`, this.ORDER_HIGH];
	})([['getAngleX', 'getAngleY', 'getAngleZ'],['getGyroX', 'getGyroY', 'getGyroZ']]);

	Arduino.weeemake_touch = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `touch_sensor_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeTouchSensor ${key}(${SENSOR_PORT})`, key);

		return [`${key}.touched()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_led_button = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const BUTTON_INDEX = this.getFieldValue(block,'BUTTON_INDEX');

		let key = `button4led_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`We4LEDButton ${key}(${SENSOR_PORT})`, key);

		return [`${key}.readValue() == ${1 << (BUTTON_INDEX - 1)}`, this.ORDER_RELATIONAL];
	}

	Arduino.weeemake_pir = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `pir_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WePIRSensor ${key}(${SENSOR_PORT})`, key);

		return [`${key}.readSensor()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_tilt = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const TILT_DIR = this.getFieldValue(block,'TILT_DIR');

		let key = `tilt_` + SENSOR_PORT.split('_')[1];
		let valueKey = key + '_value';

		this.addVarDef(`WeTiltSwitch ${key}(${SENSOR_PORT})`, key);
		this.addVarDef(`int ${valueKey}`, valueKey);
		this.addLoopCode(`${valueKey} = ${key}.readSensor()`);

		return [`${valueKey} == ${TILT_DIR}`, this.ORDER_RELATIONAL];
	}

	Arduino.weeemake_limit_switch = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		this.addSetupCode(`pinMode(${SENSOR_PORT}, INPUT)`, SENSOR_PORT);
		return [`digitalRead(${SENSOR_PORT})`, this.ORDER_HIGH];
	}

	Arduino.weeemake_temperature = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `temperature_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeTemperature ${key}(${SENSOR_PORT})`, key);

		return [`${key}.temperature()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_barometer = (list => function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const BAROMETER_TYPE = this.getFieldValue(block,'BAROMETER_TYPE');

		let key = `barometer_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeBarometerSensor ${key}(${SENSOR_PORT})`, key);

		return [`${key}.${list[BAROMETER_TYPE]}()`, this.ORDER_HIGH];
	})(['readHeight', 'readPressure', 'readTemp']);

	Arduino.weeemake_PM25 = (list => function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const PM25_TYPE = this.getFieldValue(block,'PM25_TYPE');

		let key = `PM25_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WePM25Sensor ${key}(${SENSOR_PORT})`, key);

		return [`${key}.${list[PM25_TYPE]}()`, this.ORDER_HIGH];
	})([
	'readPm1_0Concentration', 'readPm2_5Concentration', 'readPm10Concentration',
	'read0_3NumIn100ml', 'read0_5NumIn100ml', 'read1_0NumIn100ml', 'read2_5NumIn100ml',
	'read5_0NumIn100ml', 'read10NumIn100ml']);

	Arduino.weeemake_funny_touch = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const FUNNY_TOUCH_INDEX = this.getFieldValue(block,'FUNNY_TOUCH_INDEX');

		let index = (1 << FUNNY_TOUCH_INDEX - 1).toString(16);
		let key = `funnyTouch_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeFunnyTouchSensor ${key}(${SENSOR_PORT})`, key);

		return [`(${key}.readValue() & 0x${index}) > 0`, this.ORDER_RELATIONAL];
	}

	Arduino.weeemake_funny_touch_value = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `funnyTouch_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeFunnyTouchSensor ${key}(${SENSOR_PORT})`, key);

		return [`${key}.readValue()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_uv = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `uv_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeUVSensor ${key}(${SENSOR_PORT})`, key);

		return [`${key}.readAnalog()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_raindrop = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `water_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeWaterSensor ${key}(${SENSOR_PORT})`, key);

		return [`${key}.readAnalog()`, this.ORDER_HIGH];
	}

	function addUsbHost(){
		const key = `usb_host`;
		const args = db.board === board_elf_2560 ? '51, 50' : 'A3, A2';
		
		this.addInclude('#include"SoftwareSerial.h"');
		this.addVarDef(`WeUSBHost ${key}(${args})`, key);
		this.addSetupCode(`${key}.init(USB2_0)`, key);
		this.addLoopCode(`${key}.loop()`, key);

		return key;
	}

	Arduino.weeemake_usb_host = (list => function(block){
		const USB_HOST_KEY = this.getFieldValue(block,'USB_HOST_KEY');

		let key = addUsbHost();

		return [`${key}.ButtonPressed(${list[USB_HOST_KEY]})`, this.ORDER_HIGH];
	})([null, 'WeJOYSTICK_START', 'WeJOYSTICK_SELECT', 'WeJOYSTICK_MODE', 'WeJOYSTICK_BUTTON_L', 'WeJOYSTICK_BUTTON_R',
	'WeJOYSTICK_RIGHT_L', 'WeJOYSTICK_LEFT_L', 'WeJOYSTICK_UP_L', 'WeJOYSTICK_DOWN_L', 'WeJOYSTICK_UP_R',
	'WeJOYSTICK_RIGHT_R', 'WeJOYSTICK_DOWN_R', 'WeJOYSTICK_LEFT_R', 'WeJOYSTICK_L1', 'WeJOYSTICK_R1', 'WeJOYSTICK_L2', 'WeJOYSTICK_R2']);

	Arduino.weeemake_usb_host_joystick = function(block){
		const LEFT_RIGHT = this.getFieldValue(block,'LEFT_RIGHT');
		const AXIS2 = this.getFieldValue(block,'AXIS2');

		let key = addUsbHost();

		let a = LEFT_RIGHT == '0' ? 'L' : 'R';
		let b = AXIS2 == '0' ? 'x' : 'y';
		let method = 'joystick' + a + b;

		return [`${key}.${method}()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_digitalRead = function(block){
		const DPIN = this.getFieldValue(block,'DPIN');

		this.addSetupCode(`pinMode(${DPIN}, INPUT)`, DPIN);
		return [`digitalRead(${DPIN})`, this.ORDER_HIGH];
	}

	Arduino.weeemake_digitalWrite = function(block){
		const DPIN = this.getFieldValue(block,'DPIN');
		const HIGH_LOW = this.getFieldValue(block,'HIGH_LOW');

		this.addSetupCode(`pinMode(${DPIN}, OUTPUT)`, DPIN);
		return `digitalWrite(${DPIN}, ${INT_2_HIGH_LOW[HIGH_LOW]})` + this.END;
	}

	Arduino.weeemake_analogRead = function(block){
		const APIN = this.getFieldValue(block,'APIN');

		this.addSetupCode(`pinMode(${APIN}, INPUT)`, APIN);
		return [`analogRead(${APIN})`, this.ORDER_HIGH];
	}

	Arduino.weeemake_analogWrite = function(block){
		const PWM_PIN = this.getFieldValue(block,'PWM_PIN');
		const VALUE = this.valueToCode(block, 'VALUE', this.ORDER_NONE);

		this.addSetupCode(`pinMode(${PWM_PIN}, OUTPUT)`, PWM_PIN);
		return `analogWrite(${PWM_PIN}, ${VALUE})` + this.END;
	}

	Arduino.weeemake_ascii2str = function(block){
		const VALUE = this.valueToCode(block, 'VALUE', this.ORDER_NONE);
		return [`String(char(${VALUE}))`, this.ORDER_HIGH];
	}

	Arduino.weeemake_str2ascii = function(block){
		const VALUE = this.valueToCode(block, 'VALUE', this.ORDER_NONE);
		return [`int(${VALUE}[0])`, this.ORDER_HIGH];
	}

	Arduino.weeemake_speech_recognition_set_keyword = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const VALUE = castToStr(block, 'VALUE', v => pinyin(v).trim());

		let key = `speechRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeSpeechRecognition ${key}(${SENSOR_PORT})`, key);

		return `${key}.setKeyword(${VALUE})` + this.END;
	}

	Arduino.weeemake_speech_recognition_set_password = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const INDEX = this.getFieldValue(block,'INDEX');
		const VALUE = castToStr(block, 'VALUE', v => pinyin(v).trim());

		let key = `speechRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeSpeechRecognition ${key}(${SENSOR_PORT})`, key);

		return `${key}.setPassword(${INDEX}, ${VALUE})` + this.END;
	}

	Arduino.weeemake_speech_recognition_set_mode = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const SPEECH_RECOGNITION_MODE = this.getFieldValue(block,'SPEECH_RECOGNITION_MODE');

		let key = `speechRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeSpeechRecognition ${key}(${SENSOR_PORT})`, key);

		return `${key}.setTriggerMode(${SPEECH_RECOGNITION_MODE})` + this.END;
	}

	Arduino.weeemake_speech_recognition_read = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `speechRec_` + SENSOR_PORT.split('_')[1];
		let valueKey = key + '_value';

		this.addVarDef(`WeSpeechRecognition ${key}(${SENSOR_PORT})`, key);
		this.addVarDef(`int ${valueKey}`, valueKey);
		this.addLoopCode(`${valueKey} = ${key}.read()`);

		return [valueKey, this.ORDER_HIGH];
	}

	Arduino.weeemake_gesture_recognition_read = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const GESTURE_RECOGNITION_TYPE = this.getFieldValue(block,'GESTURE_RECOGNITION_TYPE');

		let key = `gestureSensor_` + SENSOR_PORT.split('_')[1];
		let valueKey = key + '_value';

		this.addVarDef(`WeGestureSensor ${key}(${SENSOR_PORT})`, key);
		this.addVarDef(`int ${valueKey}`, valueKey);
		this.addLoopCode(`${valueKey} = ${key}.read()`);

		return [`${valueKey} == ${GESTURE_RECOGNITION_TYPE}`, this.ORDER_RELATIONAL];
	}

	Arduino.weeemake_gesture_recognition_value = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		//const GESTURE_RECOGNITION_TYPE = this.getFieldValue(block,'GESTURE_RECOGNITION_TYPE');

		let key = `gestureSensor_` + SENSOR_PORT.split('_')[1];
		let valueKey = key + '_value';

		this.addVarDef(`WeGestureSensor ${key}(${SENSOR_PORT})`, key);
		this.addVarDef(`int ${valueKey}`, valueKey);
		this.addLoopCode(`${valueKey} = ${key}.read()`);

		return [valueKey, this.ORDER_HIGH];
	}

	Arduino.weeemake_gesture_recognition_compare = function(block){
		const VALUE = this.valueToCode(block, 'VALUE', this.ORDER_RELATIONAL);
		const GESTURE_RECOGNITION_TYPE = this.getFieldValue(block,'GESTURE_RECOGNITION_TYPE');

		//let key = `gestureSensor_` + SENSOR_PORT.split('_')[1];
		//let valueKey = key + '_value';

		//this.addVarDef(`WeGestureSensor ${key}(${SENSOR_PORT})`, key);
		//this.addVarDef(`int ${valueKey}`, valueKey);
		//this.addLoopCode(`${valueKey} = ${key}.read()`);

		return [`${VALUE} == ${GESTURE_RECOGNITION_TYPE}`, this.ORDER_RELATIONAL];
	}

	Arduino.weeemake_image_recognition_set_mode = (nameList => function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const IMAGE_RECOGNITION_MODE = this.getFieldValue(block,'IMAGE_RECOGNITION_MODE');

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return `${key}.${nameList[IMAGE_RECOGNITION_MODE]}()` + this.END;
	})(['setAutoTrackingMode', 'setLineFollowerMode']);

	Arduino.weeemake_image_recognition_color_position = (list => function(block, {pin=0, value}){
		let key = `imageRec_${pin}`;
		this.addVarDef(`WeImageRecognition ${key}(${pin})`, key);
		return [`${key}.getColorPosition(${list.indexOf(value)+1})`, this.ORDER_HIGH];
	})(["#e17373","#e08649","#5450e8","#37b80c","#24716b"]);
/*
	Arduino.weeemake_image_recognition_auto_tracking = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return [`${key}.getAutoPosition()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_image_recognition_line_follow = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return [`${key}.getLineFollowerAngle()`, this.ORDER_HIGH];
	}
*/
	Arduino.weeemake_image_recognition_update = (list => function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const IMAGE_RECOGNITION_MODE = this.getFieldValue(block,'IMAGE_RECOGNITION_MODE');

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return [`${key}.${list[IMAGE_RECOGNITION_MODE]}()`, this.ORDER_HIGH];
	})(['getAutoPosition', 'getLineFollowerAngle'])

	Arduino.weeemake_image_recognition_value = (nameList => function(block, {pin=0, name}){
		let key = `imageRec_${pin}`;
		this.addVarDef(`WeImageRecognition ${key}(${pin})`, key);
		return [`${key}.${nameList[name]}`, this.ORDER_HIGH];
	})(['centerX', 'centerY', 'pixels']);

	Arduino.weeemake_image_recognition_line_follow_angle = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return [`${key}.angle`, this.ORDER_HIGH];
	}

	Arduino.weeemake_image_recognition_set_fast_mode = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ON_OFF = this.getFieldValue(block,'ON_OFF') == 'TRUE' ? 1 : 0;

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return `${key}.fastMode(${ON_OFF})` + this.END;
	}

	Arduino.weeemake_image_recognition_face_position = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return [`${key}.getFacePositon()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_vibration_motor = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const SPEED = this.valueToCode(block, 'SPEED', this.ORDER_NONE);

		let key = `vibrationMotor_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeVibrationMotor ${key}(${SENSOR_PORT})`, key);

		let code;

		if(SPEED === '100') code = 'run()'
		else if(SPEED === '0') code = 'stop()'
		else code = `run(${SPEED})`

		return `${key}.${code}` + this.END;
	}

	Arduino.weeemake_led_single_line_follower = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `ledLineFollower_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDLineFollower ${key}(${SENSOR_PORT})`, key);

		return [`${key}.readSensor()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_led_single_line_follower_led = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ON_OFF = this.valueToCode(block, 'ON_OFF', this.ORDER_NONE);

		let key = `ledLineFollower_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLEDLineFollower ${key}(${SENSOR_PORT})`, key);

		return `${key}.showLED(${ON_OFF})` + this.END;
	};

	Arduino.weeemake_elf_core_board_ir_sender = function(block){
		let IR_CODE = this.getFieldValue(block,'IR_CODE');
		const GROUP = this.valueToCode(block, 'GROUP', this.ORDER_NONE);

		let key = `ir_sender`;

		this.addVarDef(`WeInfraredSender ${key}(OnBoard_IR_T)`, key);

		return `${key}.send_nec_message(${GROUP}, ${IR_CODE})` + this.END;
	}

	Arduino.weeemake_rj11_light = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `lightSensorRJ11_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeLightSensor_RJ ${key}(${SENSOR_PORT})`, key);

		return [`${key}.read()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_rj11_sound = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `soundSensorRJ11_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeSoundSensor_RJ ${key}(${SENSOR_PORT})`, key);

		return [`${key}.read()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_adapter_digitalWrite = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ADAPTER_INDEX = this.getFieldValue(block,'ADAPTER_INDEX');
		const HIGH_LOW = this.valueToCode(block, 'HIGH_LOW', this.ORDER_NONE);

		let key = `adapter_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeAdapter ${key}(${SENSOR_PORT})`, key);

		return `${key}.digitalWrite(${ADAPTER_INDEX}, ${HIGH_LOW})` + this.END;
	}

	Arduino.weeemake_adapter_servo = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ADAPTER_INDEX = this.getFieldValue(block,'ADAPTER_INDEX');
		const ANGLE = this.valueToCode(block, 'ANGLE', this.ORDER_NONE);

		let key = `adapter_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeAdapter ${key}(${SENSOR_PORT})`, key);

		return `${key}.write(${ADAPTER_INDEX}, ${ANGLE})` + this.END;
	}

	Arduino.weeemake_adapter_rgb = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ADAPTER_INDEX = this.getFieldValue(block,'ADAPTER_INDEX');
		const PIXEL = this.valueToCode(block, 'PIXEL', this.ORDER_NONE);
		const COLOUR = this.valueToCode(block, 'COLOUR', this.ORDER_NONE);

		let key = `adapter_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeAdapter ${key}(${SENSOR_PORT})`, key);

		return `${key}.RGBshow(${ADAPTER_INDEX}, ${PIXEL}, ${COLOUR})` + this.END;
	}

	Arduino.weeemake_adapter_digitalRead = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ADAPTER_INDEX = this.getFieldValue(block,'ADAPTER_INDEX');

		let key = `adapter_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeAdapter ${key}(${SENSOR_PORT})`, key);

		return [`${key}.digitalRead(${ADAPTER_INDEX})`, this.ORDER_HIGH];
	}

	Arduino.weeemake_adapter_analogRead = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ADAPTER_INDEX = this.getFieldValue(block,'ADAPTER_INDEX');

		let key = `adapter_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeAdapter ${key}(${SENSOR_PORT})`, key);

		return [`${key}.analogRead(${ADAPTER_INDEX})`, this.ORDER_HIGH];
	}

	Arduino.weeemake_adapter_temperature = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const ADAPTER_INDEX = this.getFieldValue(block,'ADAPTER_INDEX');

		let key = `adapter_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeAdapter ${key}(${SENSOR_PORT})`, key);

		return [`${key}.readTemperature(${ADAPTER_INDEX})`, this.ORDER_HIGH];
	}

	function addBluetoothController(){
		const key = `bluetooth_controller`;
		
		this.addVarDef(`WeBluetoothController ${key}`, key);
		this.addSetupCode(`Serial.begin(115200)`);
		this.addLoopCode(`${key}.loop()`, key);

		return key;
	}

	const bluetooth_controller_keys = [null,
		'WeJOYSTICK_LY',
		'WeJOYSTICK_LX',
		'WeJOYSTICK_RY',
		'WeJOYSTICK_RX',
		'WeBUTTON_ZR',
		'WeBUTTON_R',
		'WeBUTTON_ZL',
		'WeBUTTON_L',
		'WeBUTTON_HOME',
		'WeBUTTON_BL',
		'WeBUTTON_Y',
		'WeBUTTON_B',
		'WeBUTTON_A',
		'WeBUTTON_X',
		'WeBUTTON_PLUS',
		'WeBUTTON_MODE',
		'WeBUTTON_UP',
		'WeBUTTON_DOWN',
		'WeBUTTON_LEFT',
		'WeBUTTON_RIGHT',
		'WeBUTTON_MINUS',
		'WeBUTTON_BR'
	];

	Arduino.weeemake_bluetooth_controller_button = function(block){
		const BLUETOOTH_CONTROLLER_KEY = this.getFieldValue(block,'BLUETOOTH_CONTROLLER_KEY');

		let key = addBluetoothController();

		return [`${key}.buttonPressed(${bluetooth_controller_keys[BLUETOOTH_CONTROLLER_KEY]})`, this.ORDER_HIGH];
	}

	Arduino.weeemake_bluetooth_controller_joystick = function(block){
		const LEFT_RIGHT = this.getFieldValue(block,'LEFT_RIGHT');
		const AXIS2 = this.getFieldValue(block,'AXIS2');

		let key = addBluetoothController();

		let a = LEFT_RIGHT == '0' ? 0 : 2;
		let b = AXIS2 == '0' ? 2 : 1;

		return [`${key}.readAnalog(${bluetooth_controller_keys[a+b]})`, this.ORDER_HIGH];
	};

	Arduino.weeemake_wifi_set_info = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		//const SSID = castToStr(block, 'SSID');
		//const PWD = castToStr(block, 'PWD');
		const SSID = JSON.stringify(this.getFieldValue(block,'SSID'));
		const PWD = JSON.stringify(this.getFieldValue(block,'PWD'));

		let key = `wifi_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeWifi ${key}(${SENSOR_PORT})`, key);

		return `${key}.setWIFIinfo(${SSID}, ${PWD})` + this.END;
	}

	Arduino.weeemake_wifi_init_mode = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const MODE = this.getFieldValue(block,'MODE');

		const key = `wifi_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeWifi ${key}(${SENSOR_PORT})`, key);

		let code;

		if(MODE == 'sta'){
			code = 'initSTA()'
		}else if(MODE == 'ap'){
			const CHANNEL = this.getFieldValue(block,'CHANNEL');
			code = `initAP(${CHANNEL})`
		}else{
			const IP = JSON.stringify(this.getFieldValue(block,'IP'));
			const PORT = this.getFieldValue(block,'PORT');
			const method = MODE == 'tcp' ? 'initTCP' : 'initSlave';
			code = method + `(${IP}, ${PORT})`;
		}

		return `${key}.${code}` + this.END;
	}
/*
	Arduino.weeemake_wifi_init_slave = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const IP = castToStr(block, 'IP');
		const PORT = this.valueToCode(block, 'PORT', this.ORDER_NONE);

		let key = `wifi_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeWifi ${key}(${SENSOR_PORT})`, key);

		return `${key}.initSlave(${IP}, ${PORT})` + this.END;
	}

	Arduino.weeemake_wifi_init_tcp = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const IP = castToStr(block, 'IP');
		const PORT = this.valueToCode(block, 'PORT', this.ORDER_NONE);

		let key = `wifi_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeWifi ${key}(${SENSOR_PORT})`, key);

		return `${key}.initTCP(${IP}, ${PORT})` + this.END;
	}

	Arduino.weeemake_wifi_init_ap = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const CHANNEL = this.valueToCode(block, 'CHANNEL', this.ORDER_NONE);

		let key = `wifi_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeWifi ${key}(${SENSOR_PORT})`, key);

		return `${key}.initAP(${CHANNEL})` + this.END;
	}

	Arduino.weeemake_wifi_init_sta = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `wifi_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeWifi ${key}(${SENSOR_PORT})`, key);

		return `${key}.initSTA()` + this.END;
	}
*/
	Arduino.weeemake_wifi_write = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const VALUE = castToStr(block, 'VALUE');
		const ID = this.valueToCode(block, 'ID', this.ORDER_NONE);

		let key = `wifi_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeWifi ${key}(${SENSOR_PORT})`, key);

		return `${key}.write(${VALUE}, ${ID})` + this.END;
	}

	Arduino.weeemake_wifi_read = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `wifi_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeWifi ${key}(${SENSOR_PORT})`, key);

		return [`${key}.readString()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_wifi_read_ip = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `wifi_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeWifi ${key}(${SENSOR_PORT})`, key);

		return [`${key}.readIP()`, this.ORDER_HIGH];
	}

	Arduino.weeemake_wifi_value = (list => function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const WIFI_VALUE_NAME = this.getFieldValue(block,'WIFI_VALUE_NAME');

		let key = `wifi_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeWifi ${key}(${SENSOR_PORT})`, key);

		return [`${key}.${list[WIFI_VALUE_NAME]}`, this.ORDER_HIGH];
	})(['IP_addr', 'link_IP', 'rx_buffer']);

	Arduino.weeemake_wifi_check_recv_data = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const DATA = castToStr(block, 'DATA');

		let key = `wifi_` + SENSOR_PORT.split('_').pop();

		this.addVarDef(`WeWifi ${key}(${SENSOR_PORT})`, key);

		return [`strcmp(${key}.rx_buffer, ${DATA}) == 0`, this.ORDER_RELATIONAL];
	}

	Arduino.weeemake_image_recognition_set_color = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const IMAGE_RECOGNITION_COLOR_INDEX = this.getFieldValue(block,'IMAGE_RECOGNITION_COLOR_INDEX');
		const minL = this.valueToCode(block, 'minL', this.ORDER_NONE);
		const maxL = this.valueToCode(block, 'maxL', this.ORDER_NONE);
		const minA = this.valueToCode(block, 'minA', this.ORDER_NONE);
		const maxA = this.valueToCode(block, 'maxA', this.ORDER_NONE);
		const minB = this.valueToCode(block, 'minB', this.ORDER_NONE);
		const maxB = this.valueToCode(block, 'maxB', this.ORDER_NONE);

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return `${key}.setLabColor${IMAGE_RECOGNITION_COLOR_INDEX}(${minL}, ${maxL}, ${minA}, ${maxA}, ${minB}, ${maxB})` + this.END;
	}

	Arduino.weeemake_image_recognition_set_threshold = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const VALUE = this.valueToCode(block, 'VALUE', this.ORDER_NONE);

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return `${key}.setPixelsThreshold(${VALUE})` + this.END;
	}

	Arduino.weeemake_image_recognition_set_traffic_signs_mode = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);

		return `${key}.setTrafficSignsMode()` + this.END;
	}

	Arduino.weeemake_image_recognition_get_traffic_signs_value = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const TRAFFIC_SIGN = this.getFieldValue(block,'TRAFFIC_SIGN');

		let key = `imageRec_` + SENSOR_PORT.split('_')[1];
		let valueKey = key + '_value';

		this.addVarDef(`WeImageRecognition ${key}(${SENSOR_PORT})`, key);
		this.addVarDef(`int ${valueKey}`, valueKey);

		this.addLoopCode(`${valueKey} = ${key}.getTrafficSigns()`);

		return [`${valueKey} == ${TRAFFIC_SIGN}`, this.ORDER_RELATIONAL];
	}

	Arduino.weeemake_ir_send = function(block){
		const SENSOR_PORT = this.valueToCode(block, 'SENSOR_PORT', this.ORDER_NONE);
		const DATA = this.getInputTargetBlock(block, 'DATA').getFieldValue('TEXT') || '0';

		let len = DATA.split(',').length;

		let key = `ir_sender_` + SENSOR_PORT.split('_')[1];

		this.addVarDef(`WeInfraredSender ${key}(${SENSOR_PORT})`, key);

		return `{\n\tunsigned int data[] = {${DATA}};\n\t${key}.send_ir_raw(data, ${len});\n}\n`;
	}

module.exports = Arduino;