'use strict';
const {message} = antd;
const {bin2hex, hex2bin} = require('utils/hex');
const {limitSend} = require('utils/sender');
const {listenData} = require('net/packet');
const {checkerFactory, upload} = require('./uno');
const replyFnFactory = require('./firmware');
const trueFn = () => true;

async function connectBLE(){
	const target = new EventTarget();
	dd.onMessage = info => target.dispatchEvent(Object.assign(new Event(info.fn), {data:info.value}));
	const invoke = (fn, value) => dd.postMessage({fn, value});
	const listenReply = handler => listenData(target, 'reply', trueFn, handler);
	
	invoke('connect');

	const concatFn = (evt, buffer) => buffer.push(...hex2bin(evt.data));
	const composeFn = checkerFactory(concatFn);
	const replyFn = replyFnFactory(concatFn);

	const sendAndWait = (arrayBuffer, checker) => new Promise((resolve, reject) => {
		listenData(target, 'data', checker, resolve);
		limitSend((v, c) => {
			listenReply(c);
			invoke('send', bin2hex(new Uint8Array(v)));
		}, arrayBuffer);
	});

	window.sendBLERawData = arrayBuffer => sendAndWait(arrayBuffer, replyFn([]));

	const sendFn = (array, recvCount=0) => sendAndWait(new Uint8Array(array).buffer, composeFn([], recvCount));

	const resetFn = () => new Promise(resolve => {
		listenReply(resolve);
		invoke('reset');
	});

	window.resetBLE = function(data, stepFn, progressFn){
		return upload(
			new Uint8Array(data),
			resetFn,
			sendFn,
			progressFn,
			stepFn
		);
	}
}

exports.connectBLE = connectBLE;
