'use strict';

const {composeFactory} = require('../net/packet');

const pageSize = 0x80;
const isEqual = (a, b) => a.every((v, i) => v === b[i]);
const delay = v => new Promise(resolve => setTimeout(resolve, v * 1000));

const checkerFactory = concatFn => composeFactory(
	concatFn,
	(buffer, recvCount) => (buffer.length == 2 + recvCount) && (buffer[0] == 0x14 && buffer[1+recvCount] == 0x10),
	buffer => buffer.slice(1, -1)
);

const loadAddress = (sendFn, value) => sendFn([0x55, (value >> 1) & 0xFF, (value >> 9) & 0xFF, 0x20]);

async function doWrite(payload, sendFn, progressFn){
	for(let address=0; address < payload.length;){
		const bytesSend = Math.min(pageSize, payload.length - address);
		await loadAddress(sendFn, address);
		await sendFn([
			0x64, 0x00, bytesSend, 0x46,
			...payload.slice(address, address + bytesSend),
			0x20
		]);
		address += bytesSend;
		progressFn(address / payload.length);
	}
}

async function doRead(length, sendFn, progressFn){
	const recvData = [];
	for(let address=0; address < length;){
		const bytesSend = Math.min(pageSize, length - address);
		await loadAddress(sendFn, address);
		const data = await sendFn([0x74, 0x00, bytesSend, 0x46, 0x20], bytesSend);
		recvData.push(...data);
		address += bytesSend;
		progressFn(address / length);
	}
	return recvData;
}

/*
payload = array
resetFn = () => Promise<Void>
sendFn = (array, recvCount=0) => Promise<Array>
progressFn = (percent) => Void
//*/
async function upload(payload, resetFn, sendFn, progressFn){
	await resetFn();
	await delay(0.4);
	await sendFn([0x30, 0x20]);
	await sendFn([0x50, 0x20]);
	await doWrite(payload, sendFn, v => progressFn(0.5 * v));
	const recvData = await doRead(payload.length, sendFn, v => progressFn(0.5 * (v + 1)));
	await sendFn([0x51, 0x20]);
	return isEqual(payload, recvData);
}

exports.checkerFactory = checkerFactory;
exports.upload = upload;
