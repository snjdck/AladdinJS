'use strict';

const startBlockName = 'when_start';
const startBlockLabel = '当点击开始';

Blockly.Extensions.register('markAsyncFunc', function(){
	this.data = 'isAsyncFunc';
});

Blockly.Extensions.register('markStatement', function(){
	this.setPreviousStatement(true, null);
	this.setNextStatement(true, null);
});

Blockly.Extensions.register('colour_robots', function(){
	this.setColour(15);
});

Blockly.defineBlocksWithJsonArray([
	{
		"type": startBlockName,
		"message0": startBlockLabel,
		"nextStatement": null,
		"colour": 330
	},{
		"type": "device_port",
		"message0": "%1",
		"args0": [
			{"type": "field_dropdown", "name": "VALUE", "options":[
				["PORT A","A"],
				["PORT B","B"],
				["PORT C","C"],
				["PORT D","D"]
			]}
		],
		"output": "DEVICE_PORT",
		"extensions": ["colour_robots"]
	},{
		"type": "device_pin",
		"message0": "%1",
		"args0": [
			{"type": "field_dropdown", "name": "VALUE", "options":[
				["PIN 1","1"],
				["PIN 2","2"],
				["PIN 3","3"],
				["PIN 4","4"],
				["PIN 5","5"],
				["PIN 6","6"]
			]}
		],
		"output": "DEVICE_PIN",
		"extensions": ["colour_robots"]
	},{
		"type": "ir_code",
		"message0": "红外按键 %1",
		"args0": [
			{"type": "field_dropdown", "name": "VALUE", "options":[
				["A", '69'],
				["B", '70'],
				["C", '71'],
				["D", '68'],
				["E", '67'],
				["F", '13'],
				["↑", '64'],
				["↓", '25'],
				["←", '7'],
				["→", '9'],
				["OK",'21'],
				["R0",'22'],
				["R1",'12'],
				["R2",'24'],
				["R3",'94'],
				["R4",'8'],
				["R5",'28'],
				["R6",'90'],
				["R7",'66'],
				["R8",'82'],
				["R9",'74']
			]}
		],
		"output": "Number",
		"extensions": ["colour_robots"]
	},{
		"type": "buzzer_note",
		"message0": "音调 %1",
		"args0": [
			{"type": "field_dropdown", "name": "VALUE", "options":[
				["B0", "31"],["C1", "33"],["D1", "37"],["E1", "41"],["F1", "44"],["G1", "49"],["A1", "55"],["B1", "62"],
				["C2", "65"],["D2", "73"],["E2", "82"],["F2", "87"],["G2", "98"],["A2", "110"],["B2", "123"],
				["C3", "131"],["D3", "147"],["E3", "165"],["F3", "175"],["G3", "196"],["A3", "220"],["B3", "247"],
				["C4", "262"],["D4", "294"],["E4", "330"],["F4", "349"],["G4", "392"],["A4", "440"],["B4", "494"],
				["C5", "523"],["D5", "587"],["E5", "659"],["F5", "698"],["G5", "784"],["A5", "880"],["B5", "988"],
				["C6", "1047"],["D6", "1175"],["E6", "1319"],["F6", "1397"],["G6", "1568"],["A6", "1760"],["B6", "1976"],
				["C7", "2093"],["D7", "2349"],["E7", "2637"],["F7", "2794"],["G7", "3136"],["A7", "3520"],["B7", "3951"],
				["C8", "4186"],["D8", "4699"]
			]}
		],
		"output": "Number",
		"extensions": ["colour_robots"]
	},{
		"type": "buzzer_beat",
		"message0": "%1 拍",
		"args0": [
			{"type": "field_dropdown", "name": "VALUE", "options":[
				['二分之一',"500"],
				['四分之一',"250"],
				['百分之一',"125"],
				['一',"1000"],
				['两',"2000"]
			]}
		],
		"output": "Number",
		"extensions": ["colour_robots"]
	},{
		"type": "weeebot_board_rgb",
		"message0": "设置板载RGB %1",
		"args0": [
			{"type": "input_value", "name": "COLOUR", "check": "Colour"}
		],
		"extensions": ["colour_robots", "markStatement", "markAsyncFunc"]
	},{
		"type": "weeebot_button",
		"message0": "板载按钮按下?",
		"args0": [],
		"output": "Boolean",
		"extensions": ["colour_robots", "markAsyncFunc"]
	},{
		"type": "weeebot_pin_light",
		"message0": "板载光线传感器 %1",
		"args0": [
			{"type": "input_value", "name": "PIN", "check": "DEVICE_PIN"}
		],
		"output": "Number",
		"extensions": ["colour_robots", "markAsyncFunc"]
	},{
		"type": "weeebot_pin_sound",
		"message0": "板载声音传感器 %1",
		"args0": [
			{"type": "input_value", "name": "PIN", "check": "DEVICE_PIN"}
		],
		"output": "Number",
		"extensions": ["colour_robots", "markAsyncFunc"]
	},{
		"type": "RJ11_light",
		"message0": "外接光线传感器 %1",
		"args0": [
			{"type": "input_value", "name": "PORT", "check": "DEVICE_PORT"}
		],
		"output": "Number",
		"extensions": ["colour_robots", "markAsyncFunc"]
	},{
		"type": "RJ11_sound",
		"message0": "外接声音传感器 %1",
		"args0": [
			{"type": "input_value", "name": "PORT", "check": "DEVICE_PORT"}
		],
		"output": "Number",
		"extensions": ["colour_robots", "markAsyncFunc"]
	},{
		"type": "single_led",
		"message0": "设置单色LED %1 打开? %2",
		"args0": [
			{"type": "input_value", "name": "PORT", "check": "DEVICE_PORT"},
			{"type": "input_value", "name": "VALUE", "check": "Boolean"}
		],
		"inputsInline": true,
		"extensions": ["colour_robots", "markStatement", "markAsyncFunc"]
	},{
		"type": "weeebot_pin_ir",
		"message0": "红外 %1 接收到 %2",
		"args0": [
			{"type": "input_value", "name": "PIN", "check": "DEVICE_PIN"},
			{"type": "input_value", "name": "IR_CODE", "check": "Number"}
		],
		"output": "Boolean",
		"inputsInline": true,
		"extensions": ["colour_robots", "markAsyncFunc"]
	},{
		"type": "control_wait",
		"message0": "等待 %1 秒",
		"args0": [
			{"type": "input_value", "name": "VALUE", "check": "Number"}
		],
		"extensions": ["colour_robots", "markStatement", "markAsyncFunc"]
	},{
		"type": "buzzer",
		"message0": "蜂鸣器响 %1 %2",
		"args0": [
			{"type": "input_value", "name": "NOTE", "check": "Number"},
			{"type": "input_value", "name": "BEAT", "check": "Number"}
		],
		"inputsInline": true,
		"extensions": ["colour_robots", "markStatement", "markAsyncFunc"]
	}
]);


const defaultXml = `<xml xmlns="https://developers.google.com/blockly/xml"><block type="${startBlockName}" editable="false" deletable="false" movable="false"></block></xml>`;

Blockly.BlockSvg.START_HAT = true;
const workspace = Blockly.inject('blocklyDiv', {
	media: 'media/',
	toolbox: document.getElementById('toolbox'),
	grid: {
		spacing: 20,
		length: 3,
		colour: '#ccc',
		snap: true
	}
});

Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(defaultXml), workspace);

workspace.addChangeListener(Blockly.Events.disableOrphans);
//workspace.addChangeListener(evt => console.log('changed'));

const toJSON = require('../fileformats/xml/toJSON.js');
const js_engine = require('../blockly/js_engine.js');

const runBtn = document.getElementById('runBtn');
const mask = document.getElementById('mask');

const context = {
	text({TEXT}){
		return JSON.stringify(TEXT);
	},
	math_number({NUM}){
		return Number(NUM);
	},
	math_arithmetic({OP, A, B}){
		if(OP == 'ADD')return A + B;
		if(OP == 'MINUS')return A - B;
		if(OP == 'MULTIPLY')return A * B;
		if(OP == 'DIVIDE')return A / B;
		if(OP == 'POWER')return A ** B;
	},
	math_single({OP, NUM}){
		if(OP == 'ROOT')return Math.sqrt(NUM);
		if(OP == 'ABS')return Math.abs(NUM);
		if(OP == 'NEG')return -NUM;
		if(OP == 'LN')return Math.log(NUM);
		if(OP == 'LOG10')return Math.log10(NUM);
		if(OP == 'EXP')return Math.exp(NUM);
		if(OP == 'POW10')return 10 ** NUM;
	},
	math_trig({OP, NUM}){
		if(OP == 'SIN')return Math.sin(NUM);
		if(OP == 'COS')return Math.cos(NUM);
		if(OP == 'TAN')return Math.tan(NUM);
		if(OP == 'ASIN')return Math.asin(NUM);
		if(OP == 'ACOS')return Math.acos(NUM);
		if(OP == 'ATAN')return Math.atan(NUM);
	},
	math_constant({CONSTANT}){
		if(CONSTANT == 'PI')return Math.PI;
		if(CONSTANT == 'E')return Math.E;
		if(CONSTANT == 'GOLDEN_RATIO')return 2 / (Math.sqrt(5) - 1);
		if(CONSTANT == 'SQRT2')return Math.SQRT2;
		if(CONSTANT == 'SQRT1_2')return Math.SQRT1_2;
		if(CONSTANT == 'INFINITY')return Infinity;
	},
	math_number_property({PROPERTY, NUMBER_TO_CHECK, DIVISOR}){
		if(PROPERTY == 'EVEN')return NUMBER_TO_CHECK % 2 == 0;
		if(PROPERTY == 'ODD')return NUMBER_TO_CHECK % 2 == 1;
		if(PROPERTY == 'WHOLE')return Number.isInteger(NUMBER_TO_CHECK);
		if(PROPERTY == 'POSITIVE')return NUMBER_TO_CHECK > 0;
		if(PROPERTY == 'NEGATIVE')return NUMBER_TO_CHECK < 0;
		if(PROPERTY == 'DIVISIBLE_BY')return NUMBER_TO_CHECK % DIVISOR == 0;
		if(PROPERTY == 'PRIME'){
			for(let i=2, n=NUMBER_TO_CHECK>>1; i<n; ++i){
				if(NUMBER_TO_CHECK % i == 0)return false;
			}
			return true;
		}
	},
	logic_boolean({BOOL}){
		return BOOL === 'TRUE';
	},
	logic_negate({BOOL}){
		return !BOOL;
	},
	logic_null(){
		return null;
	},
	logic_compare({OP, A, B}){
		if(OP == 'EQ')return A == B;
		if(OP == 'LT')return A < B;
		if(OP == 'GT')return A > B;
		if(OP == 'NEQ')return A != B;
		if(OP == 'LTE')return A <= B;
		if(OP == 'GTE')return A >= B;
	},
	logic_operation({OP, A, B}){
		if(OP == 'AND')return A && B;
		if(OP == 'OR')return A || B;
	},
	buzzer({NOTE, BEAT}){
		return console.log(NOTE, BEAT)
		return window.sendBLEData(`BZ ${NOTE} ${BEAT}`);
	},
	buzzer_note({VALUE}){
		return Number(VALUE);
	},
	buzzer_beat({VALUE}){
		return Number(VALUE);
	}
};

function onExecFinish(){
	js_engine.stop();
	mask.style.display = 'none';
}

mask.onclick = onExecFinish;
runBtn.onclick = async function(){
	//await connectBLE();
	//let workspace = Blockly.getMainWorkspace();
	let json = toJSON(Blockly.Xml.workspaceToDom(workspace));
	console.log(json);
	js_engine.exec(json.block, startBlockName, context);
	js_engine.onfinish = onExecFinish;
	mask.style.display = 'block';
}


