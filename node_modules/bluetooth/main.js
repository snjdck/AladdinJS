'use strict';

Blockly.Extensions.register('markAsyncFunc', function(){this.data = 'isAsyncFunc';});

Blockly.Blocks['device_port'] = {init:function(){
	this.appendDummyInput().appendField(
		new Blockly.FieldDropdown([
			["PORT A","A"],
			["PORT B","B"],
			["PORT C","C"],
			["PORT D","D"]
		]),
		"VALUE"
	);
	this.setOutput(true, "DEVICE_PORT");
	this.setColour(15);
}};

Blockly.Blocks['device_pin'] = {init:function(){
	this.appendDummyInput().appendField(
		new Blockly.FieldDropdown([
			["PIN 1","1"],
			["PIN 2","2"],
			["PIN 3","3"],
			["PIN 4","4"],
			["PIN 5","5"],
			["PIN 6","6"]
		]),
		"VALUE"
	);
	this.setOutput(true, "DEVICE_PIN");
	this.setColour(15);
}};

Blockly.Blocks['ir_code'] = {init:function(){
	this.appendDummyInput().appendField('红外码').appendField(
		new Blockly.FieldDropdown([
			["A", '69'],
			["B", '70'],
			["C", '71'],
			["D", '68'],
			["E", '67'],
			["F", '13'],
			["↑", '64'],
			["↓", '25'],
			["←", '7'],
			["→", '9'],
			["OK",'21'],
			["R0",'22'],
			["R1",'12'],
			["R2",'24'],
			["R3",'94'],
			["R4",'8'],
			["R5",'28'],
			["R6",'90'],
			["R7",'66'],
			["R8",'82'],
			["R9",'74']
		]),
		"VALUE"
	);
	this.setOutput(true, "Number");
	this.setColour(15);
}};

Blockly.Blocks['buzzer_note'] = {init:function(){
	this.appendDummyInput().appendField('音调').appendField(
		new Blockly.FieldDropdown([
			["B0", "31"],["C1", "33"],["D1", "37"],["E1", "41"],["F1", "44"],["G1", "49"],["A1", "55"],["B1", "62"],
			["C2", "65"],["D2", "73"],["E2", "82"],["F2", "87"],["G2", "98"],["A2", "110"],["B2", "123"],
			["C3", "131"],["D3", "147"],["E3", "165"],["F3", "175"],["G3", "196"],["A3", "220"],["B3", "247"],
			["C4", "262"],["D4", "294"],["E4", "330"],["F4", "349"],["G4", "392"],["A4", "440"],["B4", "494"],
			["C5", "523"],["D5", "587"],["E5", "659"],["F5", "698"],["G5", "784"],["A5", "880"],["B5", "988"],
			["C6", "1047"],["D6", "1175"],["E6", "1319"],["F6", "1397"],["G6", "1568"],["A6", "1760"],["B6", "1976"],
			["C7", "2093"],["D7", "2349"],["E7", "2637"],["F7", "2794"],["G7", "3136"],["A7", "3520"],["B7", "3951"],
			["C8", "4186"],["D8", "4699"]
		]),
		"VALUE"
	);
	this.setOutput(true, "Number");
	this.setColour(15);
}};

Blockly.Blocks['buzzer_beat'] = {init:function(){
	this.appendDummyInput().appendField(
		new Blockly.FieldDropdown([
			['二分之一',"500"],
			['四分之一',"250"],
			['百分之一',"125"],
			['一',"1000"],
			['两',"2000"]
		]),
		"VALUE"
	).appendField('拍');
	this.setOutput(true, "Number");
	this.setColour(15);
}};

Blockly.Blocks['weeebot_board_rgb'] = {init:function(){
	//this.appendDummyInput().appendField("设置板载RGB");
	//this.appendValueInput("NAME").setCheck("DEVICE_PORT").appendField("PORT");
	this.appendValueInput("COLOUR").setCheck("Colour").appendField("设置板载RGB");
	//this.setInputsInline(true);
	this.setPreviousStatement(true, null);
	this.setNextStatement(true, null);
	this.setColour(15);
}};

Blockly.Blocks['weeebot_button'] = {init:function(){
	this.appendDummyInput().appendField("板载按钮按下?");
	this.setOutput(true, "Boolean");
	this.setColour(15);
}};

Blockly.Blocks['weeebot_pin_light'] = {init:function(){
	this.appendValueInput("PIN").setCheck("DEVICE_PIN").appendField("板载光线传感器");
	this.setOutput(true, "Number");
	this.setColour(15);
}};

Blockly.Blocks['weeebot_pin_sound'] = {init:function(){
	this.appendValueInput("PIN").setCheck("DEVICE_PIN").appendField("板载声音传感器");
	this.setOutput(true, "Number");
	this.setColour(15);
}};

Blockly.Blocks['RJ11_light'] = {init:function(){
	this.appendValueInput("PORT").setCheck("DEVICE_PORT").appendField("外接光线传感器");
	this.setOutput(true, "Number");
	this.setColour(15);
}};

Blockly.Blocks['RJ11_sound'] = {init:function(){
	this.appendValueInput("PORT").setCheck("DEVICE_PORT").appendField("外接声音传感器");
	this.setOutput(true, "Number");
	this.setColour(15);
}};

Blockly.Blocks['single_led'] = {init:function(){
	this.appendValueInput("PORT").setCheck("DEVICE_PORT").appendField("设置单色LED");
	this.appendValueInput("VALUE").setCheck("Boolean").appendField("打开?");
	this.setPreviousStatement(true, null);
	this.setNextStatement(true, null);
	this.setInputsInline(true);
	this.setColour(15);
}};

Blockly.Blocks['weeebot_pin_ir'] = {init:function(){
	this.appendValueInput("PIN")
		.setCheck("DEVICE_PIN")
		.appendField("红外");
	this.appendValueInput("IR_CODE")
		.setCheck("Number")
		.appendField("接收到");
	this.setInputsInline(true);
	this.setOutput(true, "Boolean");
	this.setColour(15);
}};

Blockly.defineBlocksWithJsonArray([
	{
		"type": "control_wait",
		"message0": "等待 %1 秒",
		"args0": [
			{"type": "input_value", "name": "VALUE", "check": "Number"}
		],
		"previousStatement": null,
		"nextStatement": null,
		"colour": 15,
		"extensions": ["markAsyncFunc"]
	},{
		"type": "buzzer",
		"message0": "蜂鸣器响 %1 %2",
		"args0": [
			{"type": "input_value", "name": "NOTE", "check": "Number"},
			{"type": "input_value", "name": "BEAT", "check": "Number"}
		],
		"inputsInline": true,
		"previousStatement": null,
		"nextStatement": null,
		"colour": 15,
		"extensions": ["markAsyncFunc"]
	}
]);

const startBlockName = 'when_start';
const startBlockLabel = '当点击开始';
Blockly.Blocks[startBlockName] = {
	init: function() {
		this.appendDummyInput().appendField(startBlockLabel);
		this.setNextStatement(true, null);
		this.setColour(330);
		//this.setTooltip(Blockly.Msg['VARIABLES_SET_TOOLTIP']);
		//this.setHelpUrl(Blockly.Msg['VARIABLES_SET_HELPURL']);
	}
};
const defaultXml = `<xml xmlns="https://developers.google.com/blockly/xml"><block type="${startBlockName}" editable="false" deletable="false" movable="false"></block></xml>`;

Blockly.BlockSvg.START_HAT = true;
const workspace = Blockly.inject('blocklyDiv', {
	media: 'media/',
	toolbox: document.getElementById('toolbox'),
	grid: {
		spacing: 20,
		length: 3,
		colour: '#ccc',
		snap: true
	}
});

Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(defaultXml), workspace);

workspace.addChangeListener(Blockly.Events.disableOrphans);
//workspace.addChangeListener(evt => console.log('changed'));

const toJSON = require('../fileformats/xml/toJSON.js');
const js_engine = require('../blockly/js_engine.js');

const runBtn = document.getElementById('runBtn');
const mask = document.getElementById('mask');

const context = {
	text({TEXT}){
		return JSON.stringify(TEXT);
	},
	math_number({NUM}){
		return Number(NUM);
	},
	logic_boolean({BOOL}){
		return BOOL === 'TRUE';
	},
	logic_negate({BOOL}){
		return !BOOL;
	},
	logic_null(){
		return null;
	},
	buzzer({NOTE, BEAT}){
		return console.log(NOTE, BEAT)
		return window.sendBLEData(`BZ ${NOTE} ${BEAT}`);
	},
	buzzer_note({VALUE}){
		return Number(VALUE);
	},
	buzzer_beat({VALUE}){
		return Number(VALUE);
	}
};

function onExecFinish(){
	js_engine.stop();
	mask.style.display = 'none';
}

mask.onclick = onExecFinish;
runBtn.onclick = async function(){
	//await connectBLE();
	//let workspace = Blockly.getMainWorkspace();
	let json = toJSON(Blockly.Xml.workspaceToDom(workspace));
	console.log(json);
	js_engine.exec(json.block, startBlockName, context);
	js_engine.onfinish = onExecFinish;
	mask.style.display = 'block';
}


