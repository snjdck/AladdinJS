

async function connectBLE(){
	const {serial} = navigator;
	if(!serial){
		console.warn('no serial');
		return;
	}
	if(window.sendBLERawData){
		return;
	}
	let list = await serial.getPorts();
	console.log(list);
	const port = await serial.requestPort({filters:[{vendorId:0x1A86,productId:0x7523}]});
	await port.open({baudrate: 115200});
	await delay(2);
	const reader = port.readable.getReader();
	const writer = port.writable.getWriter();
	//reader.releaseLock();
	//writer.releaseLock();
	window.sendBLERawData = function(v){
		return new Promise((resolve, reject) => {
			listen(() => reader.read(), (value, buffer) => {
				buffer.push(...value);
				if(buffer.length < 6)return;
				if(buffer[buffer.length-2] != 0xA || buffer[2] != buffer.length)return;
				let result;
				switch(buffer[3]){
					case 0:
						break;
					case 1:
						result = buffer[4];
						break;
					case 2:
						result = buffer[4] << 8 | buffer[5];
						break;
					case 3:
						result = buffer.slice(4, buffer[2]-2);
						break;
					case 255:
						buffer.length = 0;
						sendFn();
						return;
					default:
						console.log('error')
				}
				resolve(result);
				return true;
			}, []);
			//const sendFn = () => limitSend((v, c) => writer.write(new Uint8Array(v)).then(c), v);
			const sendFn = () => writer.write(new Uint8Array(v));
			sendFn();
		});
	}
}

const delay = v => new Promise(resolve => setTimeout(resolve, v * 1000));

function str2ab(text){
	let list = new Uint8Array(text.length);
	list.forEach((_, i) => list[i] = text.charCodeAt(i));
	return list.buffer;
}

function listen(readFn, callback, ...args){
	function onData({done, value}){
		if(callback(value, ...args))return;
		readFn().then(onData);
	}
	readFn().then(onData);
}

function limitSend(sendFn, data, callback, limit=20){
	if(data.byteLength <= limit)
		return sendFn(data, callback);
	let offset = 0;
	void function doSend(){
		const remain = data.byteLength - offset;
		if(remain <= limit)
			return sendFn(slice(data, offset, remain), callback);
		sendFn(slice(data, offset, limit), doSend, void(offset += limit));
	}();
}

function slice(data, offset, count){
	let list = new Uint8Array(count);
	list.set(new Uint8Array(data, offset, count));
	return list.buffer;
}