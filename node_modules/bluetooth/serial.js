'use strict';

const {composeFactory, listenReadableStream, writeWritableStream} = require('../net/packet');
const {checkerFactory, upload} = require('./uno');
const {message} = antd;

const serialOptions = {baudrate: 115200};

const composeFn = checkerFactory(value => value);

const replyFn = composeFactory(
	(value, buffer) => {
		buffer.push(...value);
		if(buffer[0] == 0)buffer.shift();//delete bluetooth extra byte
	},
	(buffer) => buffer.length >= 6 && buffer[buffer.length-2] == 0xA && buffer[2] == buffer.length,
);

const parseReply = buffer => {
	if(!buffer)return console.log('buffer empty');
	switch(buffer[3]){
		case 0: return;
		case 1: return buffer[4];
		case 2: return buffer[4] << 8 | buffer[5];
		case 3: return buffer.slice(4, buffer[2]-2);
	}
	console.error('buffer type error', buffer);
};

async function connectBLE(){
	const {serial} = navigator;
	if(!serial){
		console.warn('no serial');
		return;
	}
	serial.ondisconnect = evt => console.log('disconnect', evt.port);
	//const port = await serial.requestPort({filters:[{vendorId:0x1A86,productId:0x7523}]});
	const port = await serial.requestPort(serialOptions);
	await port.open(serialOptions);

	window.sendBLERawData = function(v){
		writeWritableStream(port.writable, new Uint8Array(v));
		return listenReadableStream(port.readable, replyFn([])).then(parseReply, error => console.error('listen error', error));
	}
	
	function sendFn(array, recvCount=0){
		writeWritableStream(port.writable, new Uint8Array(array));
		return listenReadableStream(port.readable, composeFn([], recvCount));
	}

	async function resetFn(){
		await port.setSignals({ dtr: false });
		await port.setSignals({ dtr: true });
	}

	window.resetBLE = function(data, stepFn, progressFn){
		return upload(
			new Uint8Array(data),
			resetFn,
			sendFn,
			progressFn,
			stepFn
		).then(success => {
			if(success){
				message.success('固件上传成功');
			}else{
				message.error('固件上传失败');
			}
		});
	}
}

exports.connectBLE = connectBLE;
