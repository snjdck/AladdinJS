'use strict';

const os = require('os');
const {join} = require('path');
const {execFileAsync} = require('node/child_process');
const {existsSync, mkdtempSync, mkdirSync} = require('fs');
const {clearFolderSync, readFileAsync, writeFileAsync} = require('node/fs');
const TaskQueueFactory = require('utils/task');
const {bodyParser} = require('net/HttpServer');

const compile = require('arduino_vm/arduino_compiler');

const arduino_exe = 'F:/uc_make_new/UCMake_win_3.2.2/WeeeCode_win_x64_3.3.2/package.nw/static/Arduino/arduino_debug.exe';
const maxTaskCount = 10;

const parseHEX = data => Buffer.from(Array.from(data.trim()
	.split(/\s+/)
	.map(line => line.slice(9, -2))
	.join('')
	.match(/\w{2}/g),
	v => parseInt(v, 16)
));

function respond404(response){
	response.statusCode = 404;
	response.end();
}
/*
const enqueue = TaskQueueFactory(async([code, response])=>{
	const folder = mkdtempSync(join(os.tmpdir(), 'ArduinoTemp-'));
	const src_folder = join(folder, 'src');
	const lib_folder = join(folder, 'lib');
	const ino_path = join(src_folder, 'src.ino');
	const hex_path = join(lib_folder, 'src.ino.hex');
	if(!existsSync(src_folder))mkdirSync(src_folder);
	if(!existsSync(lib_folder))mkdirSync(lib_folder);
	try{
		await writeFileAsync(ino_path, code);
		await execFileAsync(arduino_exe, ['--verify', '--board', 'arduino:avr:uno', '--pref', `build.path=${lib_folder}`, ino_path]);
		const hex_data = await readFileAsync(hex_path, 'utf8');
		const bin_data = parseHEX(hex_data);
		response.setHeader('Access-Control-Allow-Origin', '*');
		response.setHeader('Content-Length', bin_data.length);
		response.end(bin_data);
	}catch(error){
		respond404(response);
	}finally{
		clearFolderSync(folder, true);
	}
}, maxTaskCount);
*/
const enqueue = TaskQueueFactory(async([code, response])=>{
	const avr_root = `F:/uc_make_new/WeeeCode_win_ia32_3.3.3/package.nw/static/Arduino/hardware/tools/avr/bin/`;
	const root = 'G:/AladdinJS_git/AladdinJS/node_modules/arduino_vm/';
	try{
		const hex_data = compile(code, avr_root, [
			root + 'includes/cores/arduino',
			root + 'includes/variants/standard',
			root + 'includes/weeemake',
		], [
			root + 'libs/WeeeMake.a',
			root + 'libs/core.a'
		]);
		const bin_data = parseHEX(hex_data.toString());
		response.setHeader('Access-Control-Allow-Origin', '*');
		response.setHeader('Content-Length', bin_data.length);
		response.end(bin_data);
	}catch(error){
		respond404(response);
	}
}, maxTaskCount);

module.exports = bodyParser.raw((request, response) => enqueue([request.body, response]));
