'use strict';

let {execFile} = require('child_process');
let {readFile, writeFile, readFileSync} = require('fs');
const url = require('url');

const options = {
	
};

const promisify = (fn, index=0) => (...args) => new Promise(resolve => fn(...args, index == 0 ? resolve : (...args) => resolve(args[index])));

function listenEvt(target, callback){
	let result = [];
	target.on('data', chunk => result.push(chunk));
	target.on('end', () => callback(Buffer.concat(result)));
}

readFile = promisify(readFile, 1);
writeFile = promisify(writeFile);
execFile = promisify(execFile);
listenEvt = promisify(listenEvt);

const fn = (handlerMap, port=80, host='0.0.0.0') => require('https').createServer(options, (request, response) => {
	const {pathname} = url.parse(request.url);
	const handler = handlerMap[request.method] && handlerMap[request.method][pathname.slice(1)];
	if(handler)handler(request, response);
	else respond404(response);
}).on('listening', function(){
	console.log(this.address());
}).listen(port, host);

const respond404 = response => {
	response.statusCode = 404;
	response.end();
}



fn({POST:{
	async compile(request, response){
		const body = await listenEvt(request);
		await writeFile(inoPath, body);
		await execFile(arduino_exe, ['--verify', '--board', 'arduino:avr:uno', '--pref', `build.path=${libdir}`, '--preserve-temp-files', inoPath]);
		const data = await readFile(hexPath);
		response.setHeader('Access-Control-Allow-Origin', '*');
		response.setHeader('Content-Type', 'text/plain');
		response.setHeader('Content-Length', data.length);
		response.write(data);
		response.end();
	}
}}, 82);

