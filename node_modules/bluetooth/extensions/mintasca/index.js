
exports.blocks = require('./blocks.json');
exports.toolbox = require('./toolbox.json');

const dgram = require('dgram');
const {crc16} = require('fileformats/crc');

function encode(address, cmd, data){
	if(!data)return Buffer.from([0xEE, address, cmd, 0, 0, 0xED]);
	const size = data.length;
	const checksum = crc16(data);
	return Buffer.from([0xEE, address, cmd, size >> 8, size, ...data, checksum, checksum >> 8, 0xED]);
}

function createSocket(){
	return dgram.createSocket('udp4').on('error', function(error){
		console.log(`server error:\n${error.stack}`);
		this.close();
	}).on('message', function(message, info){
		console.log('onMessage', message.toString('hex'))
	}).on('listening', function(){
		console.log('listening');
		ctx.writeCmd4(0x44, 0).then(() => this.send(encode(0, 0x02), 2000, '192.168.1.30'))
	}).bind();
}

function sendPacket(socket, packet){
	return new Promise((resolve, reject) => {
		function onMessage(msg){
			if(msg.compare(packet, 0, 3, 0, 3) != 0)return;
			socket.off('message', onMessage);
			clearTimeout(timer);
			resolve(msg.slice(5, 5 + (msg[3] << 8 | msg[4])));
		}
		function onTimer(){
			socket.off('message', onMessage);
			reject('timeout');
		}
		const timer = setTimeout(onTimer, 1000);
		socket.on('message', onMessage);
		socket.send(packet, 2000, '192.168.1.30');
		console.log('send data', packet.toString('hex'))
	});
}

function writeInt(value, size){
	let data = Buffer.allocUnsafe(size);
	data.writeIntBE(value, 0, size);
	return data;
}

const ctx = {
	socket: createSocket(),
	async readCmd1(cmd, id){
		let data = await sendPacket(this.socket, encode(id, cmd));
		console.assert(data.length === 1);
		return data[0];
	},
	async readCmd2(cmd, id){
		let data = await sendPacket(this.socket, encode(id, cmd));
		console.assert(data.length === 2);
		if(cmd === 0x45)return data.readUInt16BE(0) / (1 << 10);
		return data.readInt16BE(0) / (1 << 8);
	},
	async readCmd3(cmd, id){
		let data = await sendPacket(this.socket, encode(id, cmd));
		console.assert(data.length === 4);
		return data.readInt32BE(0) / (1 << 24);
	},
	async writeCmd1(cmd, id, value){
		let data = await sendPacket(this.socket, encode(id, cmd, [value]));
		console.assert(data.length === 1);
		if(data[0] === 0){
			console.warn('writeCmd1 error', cmd, id, value)
		}
	},
	async writeCmd2(cmd, id, value){
		let data = await sendPacket(this.socket, encode(id, cmd, writeInt(value * (1 << 8), 2)));
		console.assert(data.length === 1);
		if(data[0] === 0){
			console.warn('writeCmd2 error', cmd, id, value)
		}
	},
	async writeCmd3(cmd, id, value){
		try{
			let data = await sendPacket(this.socket, encode(id, cmd, writeInt(value * (1 << 24), 4)));
			console.assert(data.length === 1);
			if(data[0] === 0){
				console.warn('writeCmd3 error', cmd, id, value)
			}
		}catch(error){
			if(cmd > 0xA)throw error;
		}
	},
	async writeCmd4(cmd, id){
		let data = await sendPacket(this.socket, encode(id, cmd));
		console.assert(data.length === 1);
		if(data[0] === 0){
			console.warn('writeCmd4 error', cmd, id)
		}
	},
}

exports.context = {
	mintasca_set_mode({id, value}){
		return ctx.writeCmd1(0x07, id, value);
	},
	mintasca_get_mode({id}){
		return ctx.readCmd1(0x55, id);
	},
	mintasca_set_state({id, type, value}){
		return ctx.writeCmd1(parseInt(type), id, value);
	},
	mintasca_get_state({id, type}){
		return ctx.readCmd1(parseInt(type), id);
	},
	mintasca_set_bitwidth({id, type, value}){
		return ctx.writeCmd2(parseInt(type), id, value);
	},
	mintasca_get_bitwidth({id, type}){
		return ctx.readCmd2(parseInt(type), id);
	},
	mintasca_set_temperature({id, type, value}){
		return ctx.writeCmd2(parseInt(type), id, value);
	},
	mintasca_get_temperature({id, type}){
		return ctx.readCmd2(parseInt(type), id);
	},
	mintasca_set_value({id, type, value}){
		return ctx.writeCmd3(parseInt(type), id, value);
	},
	mintasca_get_value({id, type}){
		return ctx.readCmd3(parseInt(type), id);
	},
	mintasca_set_ring_value({id, type, type1, value}){
		return ctx.writeCmd3(parseInt(type) + parseInt(type1), id, value);
	},
	mintasca_get_ring_value({id, type, type1}){
		return ctx.readCmd3(parseInt(type) + parseInt(type1), id);
	},
	mintasca_set_curve_value({id, type, type1, value}){
		return ctx.writeCmd3(parseInt(type) + parseInt(type1), id, value);
	},
	mintasca_get_curve_value({id, type, type1}){
		return ctx.readCmd3(parseInt(type) + parseInt(type1), id);
	},
	mintasca_set_ring_range({id, type, type1, value}){
		return ctx.writeCmd3(parseInt(type) + parseInt(type1), id, value);
	},
	mintasca_get_ring_range({id, type, type1}){
		return ctx.readCmd3(parseInt(type) + parseInt(type1), id);
	},
	mintasca_set_limit({id, type, value}){
		return ctx.writeCmd3(parseInt(type), id, value);
	},
	mintasca_get_limit({id, type}){
		return ctx.readCmd3(parseInt(type), id);
	},
	mintasca_set_position_range({id, type, value}){
		return ctx.writeCmd3(0x84 - parseInt(type), id, value);
	},
	mintasca_get_position_range({id, type}){
		return ctx.readCmd3(0x86 - parseInt(type), id);
	},
	mintasca_set_flow_range({id, type, value}){
		return ctx.writeCmd3(0x90 + parseInt(type), id, value);
	},
	mintasca_get_flow_range({id, type}){
		return ctx.readCmd3(0x92 + parseInt(type), id);
	},
	mintasca_set_bias_value({id, value}){
		return ctx.writeCmd3(0x89, id, value);
	},
	mintasca_get_bias_value({id}){
		return ctx.readCmd3(0x8A, id);
	},
	mintasca_set_enargy_value({id, value}){
		return ctx.writeCmd3(0x7E, id, value);
	},
	mintasca_get_enargy_value({id}){
		return ctx.readCmd3(0x7F, id);
	},
	mintasca_set_home_value({id, value}){
		return ctx.writeCmd3(0x87, id, value);
	},
	mintasca_clear_homing({id}){
		return ctx.writeCmd4(0x88, id);
	},
	mintasca_clear_warn({id}){
		return ctx.writeCmd4(0xFE, id);
	},
	mintasca_get_info({id, type}){
		return ctx.readCmd2(parseInt(type), id);
	},
	mintasca_get_inertia({id}){
		return ctx.readCmd3(0x7D, id);
	}
}

