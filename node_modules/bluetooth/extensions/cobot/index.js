
const {waitWhen} = require('utils/events');
const {composeFactory} = require('net/packet');

exports.blocks = require('./blocks.json');
exports.toolbox = require('./toolbox.json');

//const encode = (cmd, data=[]) => Buffer.from([0xFE, 0xFE, data.length + 2, cmd, ...data, 0xFA]);
const encode = (cmd, data=[]) => Buffer.from([0xFE, 0xFE, data.length + 2, cmd, ...data, 0xFA]).toString('hex');

const checker = function(){
	const replyFn = composeFactory(
		(v, buffer) => buffer.push(...Buffer.from(v)),
		v => v.length >= 5 && v[0] == 0xFE && v[1] == 0xFE && v[2] == v.length - 3 && v[v.length-1] == 0xFA,
		v => v.slice(4, -1)
	);
	return () => replyFn([]);
}();

const recv = (serial) => waitWhen(serial, 'data', 500, checker());

function writeInt(value, size){
	let data = Buffer.allocUnsafe(size);
	data.writeIntBE(value, 0, size);
	return data;
}


exports.context = {
	cobot_do({value}){
		console.log(encode(Number(value)));
	},
	cobot_setUpdateMode({value}){
		console.log(encode(0x16, [value]));
	},
	cobot_setFreeMode({value}){
		console.log(encode(0x1A, [value]));
	},
	async cobot_getAngle({index}){
		console.log(encode(0x20), index)
		let data = await recv(serial);
		index = index - 1 << 1;
		let temp = data[index] << 8 | data[index+1];
		return (temp > 33000 ? (temp - 65536) : temp) * 0.01;
	},
	cobot_setAngle({index, angle, speed}){
		angle *= 100;
		console.log(encode(0x21, [index, angle >> 8 & 0xFF, angle & 0xFF, speed]))
	},
	cobot_setAngles(args){
		const result = [];
		for(let i=1; i<=6; ++i){
			let angle = args['angle'+i] * 100;
			result.push(angle >> 8 & 0xFF, angle & 0xFF);
		}
		console.log(encode(0x22, [...result, args.speed]));
	},
	async cobot_getCoords({index}){
		console.log(encode(0x23), index)
		let data = await recv(serial);
		index = index - 1 << 1;
		let temp = data[index] << 8 | data[index+1];
		return (temp > 33000 ? (temp - 65536) : temp) * (index < 5 ? 0.1 : 0.01);
	},
	cobot_setCoord({index, value, speed}){
		value *= Number(index) < 4 ? 10 : 100;
		console.log(encode(0x24, [index, value >> 8 & 0xFF, value & 0xFF, speed]))
	},
	cobot_setCoords({x, y, z, rx, ry, rz, speed, mode}){
		console.log(encode(0x25, [
			x * 10 >> 8 & 0xFF, x * 10 & 0xFF,
			y * 10 >> 8 & 0xFF, y * 10 & 0xFF,
			z * 10 >> 8 & 0xFF, z * 10 & 0xFF,
			rx * 100 >> 8 & 0xFF, rx * 100 & 0xFF,
			ry * 100 >> 8 & 0xFF, ry * 100 & 0xFF,
			rz * 100 >> 8 & 0xFF, rz * 100 & 0xFF,
		speed, mode]));
	},
	async cobot_getBoolState({value}){
		console.log(encode(Number(value)))
		let data = await recv(serial);
		return data[0] == 1;
	},
	async cobot_getNumberState({value}){
		console.log(encode(Number(value)))
		let data = await recv(serial);
		return data[0];
	},
	async cobot_getJointInfo({index, type}){
		console.log(encode(Number(type), [index]))
		let data = await recv(serial);
		if(type == '0x3B')return data[0] << 8 | data[1];
		let value = data[1] << 8 | data[2];
		return (value > 33000 ? (value - 65536) : value) * 0.01;
	},
	cobot_setJointInfo({index, type, value}){
		if(type == '0x4C' || type == '0x4D')value *= 100;
		console.log(encode(Number(type), [index, value >> 8 & 0xFF, value & 0xFF]))
	},
	async cobot_isInPosition0(args){
		const result = [];
		for(let i=1; i<=6; ++i){
			let angle = args['angle'+i] * 100;
			result.push(angle >> 8 & 0xFF, angle & 0xFF);
		}
		console.log(encode(0x2A, [...result, 0]));
		let data = await recv(serial);
		return data[0] == 1;
	},
	async cobot_isInPosition1({x, y, z, rx, ry, rz}){
		console.log(encode(0x2A, [
			x * 10 >> 8 & 0xFF, x * 10 & 0xFF,
			y * 10 >> 8 & 0xFF, y * 10 & 0xFF,
			z * 10 >> 8 & 0xFF, z * 10 & 0xFF,
			rx * 100 >> 8 & 0xFF, rx * 100 & 0xFF,
			ry * 100 >> 8 & 0xFF, ry * 100 & 0xFF,
			rz * 100 >> 8 & 0xFF, rz * 100 & 0xFF,
		1]));
		let data = await recv(serial);
		return data[0] == 1;
	},
	cobot_jogRun({index, direction, speed}){
		console.log(encode(0x30, [index, direction, speed]))
	},
	cobot_jogAngle({index, type, angle, speed}){
		angle *= 100;
		console.log(encode(type == 1 ? 0x31 : 0x33, [index, angle >> 8 & 0xFF, angle & 0xFF, speed]))
	},
	cobot_jogCoord({axis, direction, speed}){
		console.log(encode(0x32, [axis, direction, speed]))
	},
	cobot_setEncoders({v1, v2, v3, v4, v5, v6, speed}){
		console.log(encode(0x3C, [
			v1 >> 8 & 0xFF, v1 & 0xFF,
			v2 >> 8 & 0xFF, v2 & 0xFF,
			v3 >> 8 & 0xFF, v3 & 0xFF,
			v4 >> 8 & 0xFF, v4 & 0xFF,
			v5 >> 8 & 0xFF, v5 & 0xFF,
			v6 >> 8 & 0xFF, v6 & 0xFF,
			speed
		]))
	},
	cobot_setSpeed({value}){
		console.log(encode(0x41, [value]))
	},
	async cobot_isServoEnable({index}){
		console.log(encode(0x50, [index]))
		let data = await recv(serial);
		return data[1] == 1;
	},
	cobot_servoDo({index, type}){
		console.log(encode(0x54 + Number(type), [index]))
	},
	cobot_servoSetData({index, type, value}){
		console.log(encode(0x52, [index, type, value]));
	},
	async cobot_servoGetData({index, type}){
		console.log(encode(0x53, [index, type]));
		let data = await recv(serial);
		return data[0];
	},
	cobot_setAtomMode({pin, mode}){
		console.log(encode(0x60, [pin, mode]))
	},
	cobot_setOutput({type, pin, value}){
		console.log(encode(type == 1 ? 0xA0 : 0x61, [pin, value]))
	},
	async cobot_getInput({type, pin}){
		console.log(encode(type == 1 ? 0xA1 : 0x62, [pin]))
		let data = await recv(serial);
		return data[1] == 1;
	},
	cobot_setGripperMode({value, speed}){
		console.log(encode(0x66, [value, speed]))
	},
	cobot_setGripper({value, speed}){
		console.log(encode(0x67, [value, speed]))
	},
	cobot_setAtomColor({r, g, b}){
		console.log(encode(0x6A, [r, g, b]))
	},
	cobot_setCoordsOrigin({type, x, y, z, rx, ry, rz}){
		console.log(encode(type == 1 ? 0x83 : 0x81, [
			x * 10 >> 8 & 0xFF, x * 10 & 0xFF,
			y * 10 >> 8 & 0xFF, y * 10 & 0xFF,
			z * 10 >> 8 & 0xFF, z * 10 & 0xFF,
			rx * 100 >> 8 & 0xFF, rx * 100 & 0xFF,
			ry * 100 >> 8 & 0xFF, ry * 100 & 0xFF,
			rz * 100 >> 8 & 0xFF, rz * 100 & 0xFF
		]));
	},
	async cobot_getCoordsOrigin({type, index}){
		console.log(encode(type == 1 ? 0x84 : 0x82))
		let data = await recv(serial);
		index = index - 1 << 1;
		let temp = data[index] << 8 | data[index+1];
		return (temp > 33000 ? (temp - 65536) : temp) * (index < 5 ? 0.1 : 0.01);
	},
	cobot_setCoordsBase({value}){
		console.log(encode(0x85, [value]))
	},
	cobot_setEndType({value}){
		console.log(encode(0x89, [value]))
	},
	async cobot_getCoordsType({type}){
		console.log(encode(type == 1 ? 0x8A : 0x86))
		let data = await recv(serial);
		return data[0];
	}
}

