
exports.blocks = require('./blocks.json');
exports.toolbox = require('./toolbox.json');

exports.arduino = function(){
	return {
		network_socket_getaddrinfo(block, {address, port}){
			this.addInclude(`import socket`);
			return [`socket.getaddrinfo(${address}, ${port})[-1][-1][0]`, this.ORDER_HIGH]
		},
		network_socket_new(block, {af, type}){
			this.addInclude(`import socket`);
			return `sock = socket.socket(socket.AF_INET${af==1?'6':''}, socket.SOCK_${type==1?'DGRAM':'STREAM'})` + this.END
		},
		network_socket_new_udpclient(block, {port}){
			this.addInclude(`import socket`);
			let result = [
				`sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)`,
				`sock.bind(('0.0.0.0', ${port}))`,
			];
			return result.map(v => v + this.END).join('')
		},
		network_socket_new_tcpclient(block, {address, port}){
			this.addInclude(`import socket`);
			let result = [
				`sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)`,
				`sock.connect((${address}, ${port}))`,
			];
			return result.map(v => v + this.END).join('')
		},
		network_socket_new_tcpserver(block, {port, backlog}){
			this.addInclude(`import socket`);
			let result = [
				`sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)`,
				`sock.bind(('0.0.0.0', ${port}))`,
				`sock.listen(${backlog})`,
			];
			return result.map(v => v + this.END).join('')
		},
		network_socket_new_result(block){
			return [`sock`, this.ORDER_HIGH]
		},
		network_socket_connected(block, {socket}){
			return [`${socket}.connected()`, this.ORDER_HIGH]
		},
		network_socket_connect(block, {socket, address, port}){
			return `${socket}.connect((${address}, ${port}))` + this.END
		},
		network_socket_bind(block, {socket, address, port}){
			return `${socket}.bind((${address}, ${port}))` + this.END
		},
		network_socket_listen(block, {socket, backlog}){
			return `${socket}.listen(${backlog})` + this.END
		},
		network_socket_settimeout(block, {socket, value}){
			return `${socket}.settimeout(${value})` + this.END
		},
		network_socket_close(block, {socket}){
			return `${socket}.close()` + this.END
		},
		network_socket_sendall(block, {socket, value}){
			return `${socket}.sendall(${value})` + this.END
		},
		network_socket_send(block, {socket, value}){
			return [`${socket}.send(${value})`, this.ORDER_HIGH]
		},
		network_socket_sendto(block, {socket, value, address, port}){
			return [`${socket}.sendto(${value}, (${address}, ${port}))`, this.ORDER_HIGH]
		},
		network_socket_recvfrom(block, {socket}){
			let result = [
				`try: data, addr = ${socket}.recvfrom(256)`,
				`except: data, addr = b'', ('0.0.0.0', 0)`,
				`data = data.decode('utf-8')`
			];
			return result.map(v => v + this.END).join('')
		},
		network_socket_recv_result(block){
			return ['data', this.ORDER_HIGH]
		},
		network_socket_accept(block, {socket}){
			let result = [
				`try: conn, addr = ${socket}.accept()`,
				`except: conn, addr = None, ('0.0.0.0', 0)`,
			];
			return result.map(v => v + this.END).join('')
		},
		network_socket_accept_result(block){
			return ['conn', this.ORDER_HIGH]
		},
		network_address_broadcast(block){
			return [`'255.255.255.255'`, this.ORDER_HIGH]
		},
		network_socket_sender_info(block, {key}){
			return [key, this.ORDER_HIGH]
		},
		//--------WiFi
		network_wifi_new_ap(block, {ssid, password, channel}){
			this.addInclude(`import network`);
			let result = [
				`wifi = network.WLAN(network.AP_IF)`,
				`wifi.active(True)`,
				`wifi.config(essid=${ssid}, password=${password}, channel=${channel})`,
			];
			return result.map(v => v + this.END).join('')
		},
		network_wifi_new_sta(block, {ssid, password}){
			this.addInclude(`import network`);
			let result = [
				`wifi = network.WLAN(network.STA_IF)`,
				`wifi.active(True)`,
				`wifi.connect(${ssid}, ${password})`,
			];
			return result.map(v => v + this.END).join('')
		},
		network_wifi_deactivate(block){
			return `wifi.active(False)` + this.END
		},
		network_wifi_disconnect(block){
			return `wifi.disconnect()` + this.END
		},
		network_wifi_isconnected(block){
			return [`wifi.isconnected()`, this.ORDER_HIGH]
		},
		network_wifi_ifconfig(block, {key}){
			return [`wifi.ifconfig()[${key}]`, this.ORDER_HIGH]
		}
	};
}();

