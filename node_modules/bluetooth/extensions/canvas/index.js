
const {delayNew} = require('utils/cache');

exports.blocks = require('./blocks.json');
exports.toolbox = require('./toolbox.json');

const getCanvasCtx = delayNew(() => document.querySelector('div.collapse > canvas:first-of-type').getContext('2d'));

exports.context = {
	canvas_2d_size({key}){
		const ctx = getCanvasCtx();
		return ctx.canvas[key];
	},
	canvas_2d_clearRect({x, y, width, height}){
		const ctx = getCanvasCtx();
		ctx.clearRect(x, y, width, height);
	},
	canvas_2d_beginPath(){
		const ctx = getCanvasCtx();
		ctx.beginPath();
	},
	canvas_2d_closePath(){
		const ctx = getCanvasCtx();
		ctx.closePath();
	},
	canvas_2d_stroke(){
		const ctx = getCanvasCtx();
		ctx.stroke();
	},
	canvas_2d_fill({fillRule}){
		const ctx = getCanvasCtx();
		ctx.fill(fillRule);
	},
	canvas_2d_moveTo({x, y}){
		const ctx = getCanvasCtx();
		ctx.moveTo(x, y);
	},
	canvas_2d_lineTo({x, y}){
		const ctx = getCanvasCtx();
		ctx.lineTo(x, y);
	},
	canvas_2d_rect({x, y, width, height}){
		const ctx = getCanvasCtx();
		ctx.rect(x, y, width, height);
	},
	canvas_2d_arc({x, y, radius, startAngle, endAngle, counterclockwise}){
		const ctx = getCanvasCtx();
		ctx.arc(x, y, radius, startAngle, endAngle, counterclockwise);
	}
}
