
exports.blocks = require('./blocks.json');

exports.arduino = {
	execExpression(block, {value}){
		return value + ';\n';
	},
	pinMode: function(){
		const list = ['INPUT', 'OUTPUT', 'INPUT_PULLUP'];
		return function(block, {pin, mode}){
			return `pinMode(${pin}, ${list[mode]});\n`;
		}
	}(),
	digitalRead(block, {pin=0}){
		return [`digitalRead(${pin})`, this.ORDER_ATOMIC];
	},
	analogRead(block, {pin}){
		return [`analogRead(${pin})`, this.ORDER_ATOMIC];
	},
	digitalWrite(block, {pin=0, value}){
		this.addSetupCode(`pinMode(${pin}, OUTPUT);\n`);
		return `digitalWrite(${pin}, ${value});\n`;
	},
	analogWrite(block, {pin, value}){
		//You do not need to call pinMode() to set the pin as an output before calling analogWrite().
		//The analogWrite function has nothing to do with the analog pins or the analogRead function.
		return `analogWrite(${pin}, ${value});\n`;
	},
	enableInterrupts: function(){
		const list = ['noInterrupts', 'interrupts'];
		return function(block, {flag}){
			return `${list[flag]}();\n`;
		}
	}(),
	attachInterrupt: function(){
		const list = ['LOW', 'CHANGE', 'FALLING', 'RISING'];
		return function(block, {pin, mode, code}){
			const name = `ISR_${pin}`;
			this.addFuncDef(`void ${name}()`, code ?? '');
			return `attachInterrupt(digitalPinToInterrupt(${pin}), ${name}, ${list[mode]});\n`;
		}
	}(),
	detachInterrupt(block, {pin}){
		return `detachInterrupt(digitalPinToInterrupt(${pin}));\n`;
	},
}
