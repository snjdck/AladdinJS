
exports.blocks = require('./blocks.json');
exports.toolbox = require('./toolbox.json');
const {tokenFactory, wrapTokenFn} = require('utils/token');
const {message} = antd;

/*
Blockly.getMainWorkspace().registerButtonCallback('reg_tlink', ()=>{
			nw.Shell.openExternal('https://www.tlink.io/');
		});
*/

exports.context = {
	log({value}){
		console.log(value);
	},
	tlink_set_info(info){
		const {userId, clientId} = info;
		this.tokenFn = wrapTokenFn(tokenFactory(() => getToken(info)), userId, clientId);
		return this.tokenFn().then(
			() => void message.success('账号设置成功!'),
			error => void message.error('账号信息有误!')
		);
	},
	tlink_set_value({sensorId, deviceNo, value}){
		if(!this.tokenFn){
			message.warn('请先设置账号信息');
			return;
		}
		return this.tokenFn(deviceWrite, deviceNo, sensorId, value).then(
			v => undefined,
			error => void message.error(error)
		);
	},
	tlink_get_value({sensorId}){
		if(!this.tokenFn){
			message.warn('请先设置账号信息');
			return 0;
		}
		return this.tokenFn(deviceRead, sensorId).then(
			v => v.value,
			error => (message.error(error), 0)
		);
	}
}

function getToken({username, password, clientId, secret}){
	const params = new URLSearchParams();
	params.append('grant_type', 'password');
	params.append('username', username);
	params.append('password', password);
	return fetch(`http://api.tlink.io/oauth/token?${params}`, {
		method:'POST',
		redirect:'error',
		credentials:'omit',
		headers:{
			'authorization': `Basic ` + Buffer.from(clientId+':'+secret).toString('base64'),
			'Content-Type':'text/plain',
			'cache-control':'no-cache',
		}
	})
	.then(response => response.json())
	.then(v => v.error ? Promise.reject(v.error_description) : [v.access_token, v.expires_in]);
}

function deviceDo(api, argsFn){
	return function(access_token, userId, clientId, ...args){
		const body = argsFn(...args);
		body.userId = userId;
		return fetch(`http://api.tlink.io/api/device/${api}`, {
			method:'POST',
			headers:{
				'tlinkAppId':clientId,
				'Authorization':`Bearer ` + access_token,
				'Content-Type':'application/json',
				'cache-control':'no-cache',
			},
			body:JSON.stringify(body)
		})
		.then(response => response.json())
		.then(v => v.flag == '00' ? v : Promise.reject(v.msg));
	}
}

const deviceWrite = deviceDo('sendDataPoint', (deviceNo, sensorId, value) => ({deviceNo,sensorDatas:[{sensorId,value}]}));
const deviceRead = deviceDo('getSingleSensorDatas', sensorId => ({sensorId}));
