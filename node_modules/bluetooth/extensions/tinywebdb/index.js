
exports.blocks = require('./blocks.json');
exports.toolbox = require('./toolbox.json');
const {tokenFactory, wrapTokenFn} = require('utils/token');
const {message} = antd;

function check(test, fn, value){
	if(!test){
		message.warn('请先设置账号信息');
		return value;
	}
	return fn();
}

function status(v){
	if(v.status != 'success'){
		message.error(v.status);
	}
}

exports.buttons = {
	register_tinywebdb(){
		nw.Shell.openExternal('https://tinywebdb.appinventor.space');
	}
}

exports.context = {
	tinywebdb_set_info({user, secret}){
		return request(user, secret, 'count').then(
			v => {
				this.user = user;
				this.secret = secret;
				message.success('设置账号成功');
			},
			error => {
				this.user = null;
				this.secret = null;
				message.error(error);
			}
		);
	},
	tinywebdb_set_value({tag, value}){
		const {user, secret} = this;
		return check(user, () => request(user, secret, 'update', {tag, value}).then(status));
	},
	tinywebdb_get_value({tag}){
		const {user, secret} = this;
		return check(user, () => request(user, secret, 'get', {tag}).then(v => v[tag]), 0);
	},
	tinywebdb_delete_value({tag}){
		const {user, secret} = this;
		return check(user, () => request(user, secret, 'delete', {tag}).then(status));
	}
}

function request(user, secret, action, args){
	const body = new URLSearchParams();
	body.append('user', user);
	body.append('secret', secret);
	body.append('action', action);
	for(let key in args){
		body.append(key, args[key]);
	}
	return fetch('http://tinywebdb.appinventor.space/api', {method:'POST',body})
	.then(response => response.text()).then(v => {
		try{
			return JSON.parse(v);
		}catch{
			throw v;
		}
	});
}
