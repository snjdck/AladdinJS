'use strict';

void function(callback){
	if(window.WebViewJavascriptBridge){return callback(window.WebViewJavascriptBridge);}
	if(window.WVJBCallbacks){return window.WVJBCallbacks.push(callback);}
	window.WVJBCallbacks = [callback];
	const WVJBIframe = document.createElement('iframe');
	WVJBIframe.style.display = 'none';
	WVJBIframe.src = 'https://__bridge_loaded__';
	document.documentElement.appendChild(WVJBIframe);
	setTimeout(function(){document.documentElement.removeChild(WVJBIframe)}, 0);
}(function(bridge){
	const decodeXML = require('fileformats/xml/decode');
	const base64 = require('utils/base64');
	const {limitSend} = require('utils/sender');
	const {checkerFactory, upload} = require('./uno');
	const replyFnFactory = require('./firmware');

	const concatFn = (value, buffer) => buffer.push(...base64.decode(value));
	const composeFn = checkerFactory(concatFn);
	const replyFn = replyFnFactory(concatFn);

	const sendAndWait = (arrayBuffer, checker) => new Promise((resolve, reject) => {
		bridge.registerHandler('OnBluetoothRecvData', data => {
			const result = checker(data);
			if(result === false)return;
			bridge.registerHandler('OnBluetoothRecvData');
			resolve(result);
		});
		limitSend((v, c) => {
			bridge.callHandler('BluetoothSendData', base64.encode(new Uint8Array(v)), c);
		}, arrayBuffer);
	});

	window.sendBLERawData = arrayBuffer => sendAndWait(arrayBuffer, replyFn([]));

	const sendFn = (array, recvCount=0) => sendAndWait(new Uint8Array(array).buffer, composeFn([], recvCount));

	const resetFn = () => new Promise(resolve => bridge.callHandler('BluetoothReset', null, resolve));

	window.resetBLE = function(data, stepFn, progressFn){
		return upload(
			new Uint8Array(data),
			resetFn,
			sendFn,
			progressFn,
			stepFn
		);
	}
});
