"use strict";

const DisplayObject3D = require("../DisplayObject3D");
const DrawUnitCollector = require("../DrawUnitCollector");
const {DepthRenderTarget} = require("../rendertargets");

class Camera3D extends DisplayObject3D
{
	constructor(lens){
		super();
		this.drawUnitCollector = new DrawUnitCollector();
		this.lens = lens;
		//camera can render to back buffer or frame buffer
		this.randerTarget = null;
		//multi cameras render order control
		this.depth = 0;
	}

	init(){
		const {canvas, gl} = view3d;

		this.geomRenderTarget = new DepthRenderTarget(canvas.width, canvas.height);
	}

	render(root, gl, mode){
		let {drawUnitCollector} = this;
		drawUnitCollector.clear();
		root.collectDrawUnits(drawUnitCollector, gl, mode);
		drawUnitCollector.draw(gl, this);
	}

	draw(){
		const lightCount = this.getLightCount();
		if(lightCount <= 0){
			return;
		}

		for(let lightIndex=0; lightIndex<lightCount; ++lightIndex){
			let light = this.lightList[lightIndex];
			light.drawShadowMap();
		}

		this.geomRenderTarget.active(gl);

		gl.clearColor(0, 0, 0, 0);
		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
		//draw

		gl.bindFramebuffer(gl.FRAMEBUFFER, null);

		gl.bindTexture(gl.TEXTURE_2D, this.geomRenderTarget.depthBuffer);
		//blend MULTIPLY

		for(let lightIndex=0; lightIndex<lightCount; ++lightIndex){
			let light = this.lightList[lightIndex];
			light.drawLight();
		}
	}
}

module.exports = Camera3D;