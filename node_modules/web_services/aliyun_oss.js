'use strict';

const load = require('../net/load');

const {sha1, md5} = function(crypto){
	const sha1 = (k, v) => crypto.createHmac('sha1', k).update(v).digest('base64');
	const md5 = v => crypto.createHash('md5').update(v).digest('base64');
	return {sha1, md5};
}(require('crypto'));

function createHeaders(content_md5='', content_type='text/plain'){
	return {
		'content-md5': content_md5,
		'content-type': content_type,
		'x-oss-date': new Date().toUTCString(),
	};
}

function calcSignText(method, headers, bucket, name){
	return [
		method,
		headers['content-md5'],
		headers['content-type'],
		headers['x-oss-date'],
		...Object.keys(headers).filter(k => k.startsWith('x-oss-')).sort().map(k => `${k}:${headers[k]}`),
		`/${bucket}/${Buffer.from(name).toString('latin1')}`
	].join('\n');
}

function OSS(region, bucket, AccessKeyId, AccessKeySecret){
	const auth = v => `OSS ${AccessKeyId}:${sha1(AccessKeySecret, v)}`;
	const calcURL = name => `http://${bucket}.${region}.aliyuncs.com/${name}`;
	async function put(name, data){
		const method = 'PUT';
		const headers = createHeaders(md5(data));
		headers.authorization = auth(calcSignText(method, headers, bucket, name));
		const url = calcURL(name);
		await load(url, {method, headers, body: data});
		return url;
	}
	function get(name){
		const headers = createHeaders();
		headers.authorization = auth(calcSignText('GET', headers, bucket, name));
		return load(calcURL(name), {headers});
	}
	return {put, get};
}

