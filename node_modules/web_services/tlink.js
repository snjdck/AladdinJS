
const load = require('../net/load');

function getToken(username, password, clientId, secret){
	return load('http://api.tlink.io/oauth/token', {
		method:'POST',
		responseType:'json',
		headers:{
			'authorization': `Basic ` + Buffer.from(clientId+':'+secret).toString('base64'),
			'Content-Type':'text/plain',
			'cache-control':'no-cache',
		},
		query:{
			grant_type: 'password',
			username,
			password
		}
	});
}

function deviceWrite(access_token, userId, clientId, deviceNo, sensorId, value){
	return load('http://api.tlink.io/api/device/sendDataPoint', {
		responseType:'json',
		headers:{
			'tlinkAppId':clientId,
			'Authorization':`Bearer ` + access_token
		},
		json:{
			userId,
			deviceNo,
			sensorDatas:[{sensorId,value}]
		}
	});
}

function deviceRead(access_token, userId, clientId, sensorId){
	return load('http://api.tlink.io/api/device/getSingleSensorDatas', {
		responseType:'json',
		headers:{
			'tlinkAppId':clientId,
			'Authorization':`Bearer ` + access_token
		},
		json:{
			userId,
			sensorId,
		}
	});
}

function tokenFactory(getFn){
	let token, expires_at;
	return async task => {
		if(!token || expires_at < performance.now()){
			const info = await getFn();
			token = info[0];
			expires_at = info[1] * 1000 + performance.now();
		}
		return task(token);
	}
}

const wrapTokenFn = (tokenFn, ...fixedArgs) => (fn, ...args) => tokenFn(token => fn(token, ...fixedArgs, ...args));

async function main(){
	const userId = '200024863';
	const clientId = '050f1162c2e340e4830d8fe1df5393bb';

	const tokenFn = wrapTokenFn(
		tokenFactory(() => getToken().then(v => [v.access_token, v.expires_in])),
		userId, clientId
	);

	console.log(await tokenFn(deviceRead, 200460109))
	//console.log(await tokenFn(deviceWrite, 'M5J26H3J530B043L', 200460109, 20))
}

main();




