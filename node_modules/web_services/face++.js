'use strict';

const load = require('../net/load');

const prefix = 'https://api-cn.faceplusplus.com/facepp/v3/';

function catchError(fn){
	return function(response){
		const {error_message} = JSON.parse(response.body.toString());
		if(error_message === 'CONCURRENCY_LIMIT_EXCEEDED'){
			return fn();
		}
		return Promise.reject(response);
	}
}

class SDK
{
	constructor(api_key, api_secret){
		this.sign = {api_key, api_secret};
	}

	detect(image_file, return_attributes='none', return_landmark=0){
		return this.request('detect', {image_file, return_attributes, return_landmark});
	}

	search(image_file, faceset_token){
		return this.request('search', {image_file, faceset_token});
	}

	createFaceSet(){
		return this.request('faceset/create', {}).then(v => v.faceset_token);
	}

	getFaceSets(start=1){
		return this.request('faceset/getfacesets', {start});
	}

	deleteFaceSet(faceset_token){
		return this.request('faceset/delete', {faceset_token, check_empty: 0});
	}

	async getAllFaceSets(){
		const result = [];
		for(let start=1; start;){
			const {facesets, next} = await this.getFaceSets(start);
			result.push(...facesets);
			start = next;
		}
		return result;
	}

	async deleteAllFaceSets(){
		for(const {faceset_token} of await this.getAllFaceSets()){
			await this.deleteFaceSet(faceset_token);
		}
	}

	addFace(faceset_token, face_tokens){
		if(Array.isArray(face_tokens)){
			face_tokens = face_tokens.join();
		}
		return this.request('faceset/addface', {faceset_token, face_tokens});
	}

	request(method, args){
		const path = prefix + method;
		const form = Object.assign(args, this.sign);
		const doLoad = () => load(path, {form});
		return doLoad().catch(catchError(doLoad));
	}
}



const printResult = v => v.then(data => console.log(JSON.stringify(data)));
