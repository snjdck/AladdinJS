
const crypto = require('crypto');
const fs = require('fs');
const load = require('../net/load');


class SimpleCache
{
	constructor(){
		this.data = Object.create(null);
	}
	getItem(key){
		return this.data[key];
	}
	setItem(key, value){
		this.data[key] = value;
	}
}

const tokenFactory = (cache, client_id, client_secret) => callback => {
	if(cache.getItem('token') && Date.now() < cache.getItem('expires_at')){
		callback(null, cache.getItem('token'));
		return;
	}
	get_token(client_id, client_secret).then(({access_token, expires_in}) => {
		console.log('do load token');
		cache.setItem('token', access_token);
		cache.setItem('expires_at', Date.now() + expires_in * 1000);
		callback(null, access_token);
	});
}

function get_token(client_id, client_secret){
	return load('https://aip.baidubce.com/oauth/2.0/token', {
		method: 'POST',
		query: {
			grant_type: 'client_credentials',
			client_id,
			client_secret,
		}
	});
}

function text2audio(tok, cuid, tex){
	return load('http://tsn.baidu.com/text2audio', {search:{
		tex, tok, cuid,
		ctp: 1,
		lan: 'zh',
	}});
}

function audio2text(token, cuid, data){
	return load('http://vop.baidu.com/server_api', {
		method: 'POST',
		headers: {'Content-Type':'audio/pcm;rate=16000'},
		query: {token, cuid},
		body: data
	});
}

function invoke(tokenFn, method, ...args){
	return new Promise(resolve => tokenFn((error, token) => {
		resolve(method(token, ...args));
	}));
}

const translateFactory = (appid, appsecret) => (text, language) => {
	const salt = Date.now();
	return load('http://api.fanyi.baidu.com/api/trans/vip/translate', {search:{
		q: text,
		from: 'auto',
		to: language,
		appid,
		salt,
		sign: crypto.createHash('md5').update(appid+text+salt+appsecret).digest('hex')
	}});
}



