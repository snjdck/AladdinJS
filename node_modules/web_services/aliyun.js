'use strict';

const load = require('../net/load');

const {sha1, md5} = function(crypto){
	const sha1 = (k, v) => crypto.createHmac('sha1', k).update(v).digest('base64');
	const md5 = v => crypto.createHash('md5').update(v).digest('hex');
	return {sha1, md5};
}(require('crypto'));

const makeNonce = function(prefix, lastValue, counter){
	return function(){
		const value = Math.floor(Math.random() * 1000000000000);
		counter = (value === lastValue) ? (counter + 1) : 0;
		lastValue = value;
		return md5(prefix + value + counter);
	}
}(require('os').hostname() + process.pid, 0, 0);

const timestamp = function(){
	const format = v => v.toString().padStart(2, '0');
	return function(){
		const date = new Date();
		const YYYY = date.getUTCFullYear();
		const MM = format(date.getUTCMonth() + 1);
		const DD = format(date.getUTCDate());
		const HH = format(date.getUTCHours());
		const mm = format(date.getUTCMinutes());
		const ss = format(date.getUTCSeconds());
		return `${YYYY}-${MM}-${DD}T${HH}:${mm}:${ss}Z`;//删除掉毫秒部分
	}
}();

const canonicalize = v => Object.keys(v).sort().map(k => encode(k) + '=' + encode(v[k])).join('&');
const encode = v => encodeURIComponent(v).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/\*/g, '%2A');

function UserFactory(AccessKeyId, AccessKeySecret){
	const baseArgs = {
		AccessKeyId,
		Format: 'JSON',
		SignatureMethod: 'HMAC-SHA1',
		SignatureVersion: '1.0',
	};
	return (server, Version) => function(Action, args){
		const search = Object.assign({
			Action, Version,
			SignatureNonce: makeNonce(),
			Timestamp: timestamp(),
		}, baseArgs, args);
		search.Signature = sha1(`${AccessKeySecret}&`, `POST&${encode('/')}&${encode(canonicalize(search))}`);
		return load(server, {search});
	}
}

function ImageRecogFactory(user){
	const fn = user('https://imagerecog.cn-shanghai.aliyuncs.com', '2019-09-30');
	const result = {};
	const define = (a, k) => result[a] = v => fn(a, {[k]:v});
	define('ClassifyingRubbish', 'ImageURL');
	define('DetectFruits', 'ImageURL');
	define('RecognizeVehicleType', 'ImageURL');
	define('RecognizeScene', 'ImageURL');
	define('TaggingImage', 'ImageURL');
	define('DetectImageElements', 'Url');
	define('RecognizeImageColor', 'Url');
	define('RecognizeImageStyle', 'Url');
	define('RecognizeLogo', 'Tasks.1.ImageURL');
	return result;
}

exports.UserFactory = UserFactory;
exports.ImageRecogFactory = ImageRecogFactory;
