
const crypto = require('crypto');
const fs = require('fs');
const https = require('https');

function load(path){
	return new Promise(resolve => {
		https.get(path, response => {
			const list = [];
			response.on('data', v => list.push(v));
			response.on('end', () => resolve(Buffer.concat(list)));
		});
	});
}

function keyIv(i){
	let v = new Uint8Array(16);
	v[14] = i >> 8;
	v[15] = i & 0xFF;
	return v;
}

function decrypt(key, iv, data){
	const decipher = crypto.createDecipheriv('aes-128-cbc', key, iv);
	return Buffer.concat([decipher.update(data),decipher.final()]);
}
const removeComment = v => v.replace(/#.*/g, '').trim();

function getHost(v){
	let a = v.indexOf('//');
	let b = v.indexOf('/', a + 2);
	return v.slice(0, b);
}

async function saveFile(title, id, url){
	const host = getHost(url);
	const indexA = removeComment((await load(url)).toString());
	const index = (await load(host + indexA)).toString();
	key = await load(host + index.match(/URI="(.+?)"/)[1]);
	let list = removeComment(index).split(/\s+/);
	let result = [];
	for(let i=0; i<list.length; ++i){
		let data = await load(host + list[i]);
		result.push(decrypt(key, keyIv(i), data));
		console.clear();
		console.log(`${id} : ${(100 * i / (list.length - 1)).toFixed(2)}%`);
	}
	const tempPath = `./output/${id}.mp4`;
	fs.writeFileSync(tempPath, Buffer.concat(result));
	fs.renameSync(tempPath, `./output/${title}.mp4`);
}

const getFileIds = datax => [datax.video.id, datax.video.self_cdn_path || datax.video.sl];
async function main(url){
	const data = (await load(url)).toString();
	const title = data.match(/<div class="video-title">(.+?)<\/div>/)[1];
	const datax = data.match(/<script>\s*(function getFileIds\(\)\{.+?\})\s*<\/script>/s);
	saveFile(title, ...getFileIds(eval(`(${datax[1]})()`)));
}

main(process.argv[2]);
