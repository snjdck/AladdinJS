'use strict';

const dgram = require('dgram');

const encode = function(){
	const crypto = require('crypto');
	const iv = Buffer.from([0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3, 0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58, 0x56, 0x2e]);
	return (key, value) => crypto.createCipheriv('aes-128-cbc', key, iv).update(value, 'utf8', 'hex');
}();

const gateway_port = 9898;
let gateway_ip;
let gateway_token;
let key = '2491300867594075';

const socket = dgram.createSocket('udp4').on('error', function(error){
	console.log(`server error:\n${error.stack}`);
	this.close();
}).on('message', function(message, info){
	const msg = JSON.parse(message);
	if(msg.cmd == 'heartbeat'){
		if(msg.model == 'acpartner.v3'){
			gateway_token = msg.token;
		}else{
			console.log(message.toString())
		}
	}else if(msg.cmd == 'report'){
		this.emit('report', msg);
	}
}).on('listening', function(){
	const multicast_ip = '224.0.0.50';
	this.addMembership(multicast_ip);
	sendAndWait({cmd:'whois'}, 4321, multicast_ip, 'iam', function(msg){
		gateway_ip = msg.ip;
		doDiscovery(function(msg){
			gateway_token = msg.token;
			msg.dev_list.forEach(v => {
				doRead(v.sid, console.log)
			});
		});
	});
}).bind(gateway_port);

socket.on('report', function(msg){
	if(msg.model != 'plug')return;
	const value = msg.params[0].channel_0 == 'on' ? 'off' : 'on';
	setTimeout(doWrite, 3000, {
		model:'plug',
		sid: msg.sid,
		params: [{channel_0: value}]
	}, function(msg){
		console.log('write rsp', msg)
	});
})

function sendAndWait(data, port, ip, cmd, handler){
	socket.on('message', function callback(message, info){
		const msg = JSON.parse(message);
		if(msg.cmd != cmd)return;
		if(data.sid && data.sid != msg.sid)return;
		socket.off('message', callback);
		handler.call(this, msg, info);
	});
	socket.send(JSON.stringify(data), port, ip);
}

function doDiscovery(handler){
	sendAndWait({cmd:'discovery'}, gateway_port, gateway_ip, 'discovery_rsp', handler);
}

function doRead(sid, handler){
	sendAndWait({cmd:'read', sid}, gateway_port, gateway_ip, 'read_rsp', handler);
}

function doWrite(data, handler){
	data.cmd = 'write';
	data.key = encode(key, gateway_token);
	sendAndWait(data, gateway_port, gateway_ip, 'write_rsp', handler);
}
