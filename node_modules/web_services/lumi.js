'use strict';

const dgram = require('dgram');

const encode = function(){
	const crypto = require('crypto');
	const iv = Buffer.from([0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3, 0xba, 0x69, 0x5a, 0x2e, 0x6f, 0x58, 0x56, 0x2e]);
	return (key, value) => crypto.createCipheriv('aes-128-cbc', key, iv).update(value, 'utf8', 'hex');
}();

const gateway_port = 9898;

function createSocket(gatewayKeyDict){
	const socket = dgram.createSocket('udp4').on('error', function(error){
		console.log(`server error:\n${error.stack}`);
		this.close();
	}).on('message', function(message, info){
		console.log(message.toString())
		const msg = JSON.parse(message);
		if(msg.cmd.endsWith('_rsp')){
			this.emit('response', msg, info);
		}else if(msg.cmd == 'heartbeat' && msg.model == 'acpartner.v3'){
			const gateway = this._gatewayDict[info.address];
			if(gateway)gateway.token = msg.token;
		}else if(msg.cmd == 'heartbeat' || msg.cmd == 'report'){
			this.emit(msg.cmd, msg);
		}else if(msg.cmd == 'iam'){
			const address = msg.ip;
			this._gatewayDict[address] = {};
			this._doDiscovery(function(msg){
				this._gatewayDict[address] = msg;
				this.emit('gateway', msg, address);
			}, address);
		}
	}).on('listening', function(){
		const multicast_ip = '224.0.0.50';
		this.addMembership(multicast_ip);
		this.setMulticastTTL(255);
		this._gatewayDict = {};
		this.send(JSON.stringify({cmd:'whois'}), 4321, multicast_ip);
	}).bind(gateway_port);
	socket._gatewayKeyDict = gatewayKeyDict;
	return Object.assign(socket, SocketPrototype);
}

const SocketPrototype = {
	_getGatewayAddress(gatewayID){
		if(!gatewayID){
			return Object.keys(this._gatewayDict)[0];
		}
		return Object.entries(this._gatewayDict).find(([address, {sid}]) => gatewayID == sid)[0];
	},
	_doSendAndWait(data, handler, address){
		if(handler){
			this.on('response', function callback(msg, info){
				if(info.address != address)return;
				if(msg.cmd != `${data.cmd}_rsp`)return;
				if(data.sid && data.sid != msg.sid)return;
				this.off('response', callback);
				handler.call(this, msg);
			});
		}
		this.send(JSON.stringify(data), gateway_port, address);
	},
	_doDiscovery(handler, address){
		this._doSendAndWait({cmd:'discovery'}, handler, address);
	},
	doRead(sid, handler, gatewayID){
		this._doSendAndWait({cmd:'read', sid}, handler, this._getGatewayAddress(gatewayID));
	},
	doWrite(sid, params, handler, gatewayID){
		const address = this._getGatewayAddress(gatewayID);
		const {sid:gateway_sid, token, dev_list} = this._gatewayDict[address];
		const device = dev_list.find(v => v.sid == sid);
		const key = this._gatewayKeyDict[gateway_sid];
		this._doSendAndWait(Object.assign({
			cmd: 'write',
			key: encode(key, token),
			params
		}, device), function(msg){
			if(msg.params.length == 1 && msg.params[0]['error'] == 'Invalid key'){
				console.log(data.params[0]['error']);
				this._doDiscovery(function(msg){
					this._gatewayDict[address] = msg;
					this.doWrite(sid, params, handler, gatewayID);
				}, address);
			}else{
				handler.call(this, msg);
			}
		}, address);
	},
};

module.exports = createSocket;
