
function createDepthTexture(device, width, height){
	return device.createTexture({
		size: [width, height, 1],
		format: 'depth24plus-stencil8',
		usage: GPUTextureUsage.RENDER_ATTACHMENT
	});
}

function createTexture(device, width, height, depthOrArrayLayers=1){
	return device.createTexture({
		size: [width, height, depthOrArrayLayers],
		format: 'rgba8unorm',
		usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,
	});
}

function createTextureWithImage(device, image){
	const texture = createTexture(device, image.width, image.height);
	device.queue.copyExternalImageToTexture(
		{source: image, origin:[0, 0], flipY:false},
		{texture, mipLevel: 0, origin: [0, 0, 0]},
		[image.width, image.height, 1]
	);
	return texture;
}

async function createTextureArray(device, imageList){
	const width = Math.max(...imageList.map(v => v.naturalWidth));
	const height = Math.max(...imageList.map(v => v.naturalHeight));
	const arrayLayerCount = imageList.length;
	const resizeOption = {resizeWidth: width, resizeHeight: height, resizeQuality: 'high'};
	const texture = createTexture(device, width, height, arrayLayerCount);
	for(let i=0; i<arrayLayerCount; ++i){
		device.queue.copyExternalImageToTexture(
			{source: await createImageBitmap(imageList[i], resizeOption)},
			{texture, origin: [0, 0, i]},
			[width, height, 1]
		);
	}
	return texture;
}

const createBuffer = (device, usage, size, mappedAtCreation=false) => device.createBuffer({usage, size, mappedAtCreation});

function createBufferWith(device, usage, data){
	const buffer = createBuffer(device, usage, data.byteLength, true);
	const mapping = buffer.getMappedRange();
	new data.constructor(mapping).set(data);
	buffer.unmap();
	return buffer;
}

function setViewport(renderPassEncoder, rect, minDepth=0, maxDepth=1){
	renderPassEncoder.setViewport(rect.x, rect.y, rect.width, rect.height, minDepth, maxDepth);
}

exports.createTexture = createTextureWithImage;
exports.createTextureArray = createTextureArray;
exports.createDepthTexture = createDepthTexture;
exports.createBuffer = createBuffer;
exports.createBufferWith = createBufferWith;
exports.setViewport = setViewport;
