
const {waitWhen} = require('utils/events');
const {composeFactory} = require('net/packet');

async function reset(serial){
	await serial.setControlSignals({dtr:false});
	await serial.setControlSignals({dtr:true});
}

const checker = function(){
	function checksum(buffer){
		let result = 0;
		const n = buffer.length - 1;
		for(let i=0; i<n; ++i){
			result += buffer[i];
		}
		return (result & 0xFF) == buffer[n];
	}
	const replyFn = composeFactory(
		(v, buffer) => buffer.push(...Buffer.from(v)),
		v => v.length >= 6 && v[0] == 82 && v[2] == v.length && v[v.length-2] == 0xA && checksum(v),
		v => {
			switch(v[3]){
				case 1: return v[4];
				case 2: return v[4] << 8 | v[5];
				case 3: return v.slice(4, v[2]-2);
			}
		}
	);
	return () => replyFn([]);
}();

async function send(serial, buffer){
	await serial.send_buffer(buffer);
	const timeout = buffer[3] == 8 ? buffer.readUInt16LE(7) + 50 : 300;
	return await waitWhen(serial, 'data', timeout, checker());
}

exports.reset = reset;
exports.send = send;
