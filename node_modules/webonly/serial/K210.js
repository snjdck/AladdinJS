
const {waitWhen} = require('utils/events');
const crypto = require('crypto');
const crc32 = require('fileformats/crc32');
const {delay, ints_to_buffer, align_data, encode_c0db, checker_c0db, text_checker} = require('./helper');

const ISP_PROG = require('./K210_bin');

async function reset(serial, rts){
	await serial.setControlSignals({dtr:true, rts:false});
	await delay(20);
	await serial.setControlSignals({dtr:false, rts});
	await delay(20);
}

async function upload(serial, data, offset=0, progressFn=null){
	await reset(serial, true);
	await write_bootloader(serial, progressFn);
	await change_bitrate(serial, 1500000);
	await select_chip(serial, 1);//chipType=1(on-board), 0(in-chip)
	await erase_flash(serial, 0, 0xFFFFFFEE);
	await write_flash(serial, data, offset, progressFn);
	await serial.update(115200);
	await reset(serial, false);
}

async function change_bitrate(serial, bitrate){
	await send_cmd(serial, 0xd6, ints_to_buffer(0, 4, bitrate), -1);
	await waitWhen(serial, 'data', 20, Boolean);
	await serial.update(bitrate);
}

async function write_dataframe(serial, cmd, frameSize, data, offset, progressFn=null){
	for(let i=0, n=data.length; i<n; i+=frameSize){
		const packet = data.slice(i, i+frameSize);
		const payload = Buffer.concat([ints_to_buffer(offset+i, packet.length), packet]);
		await send_cmd(serial, cmd, payload);
		progressFn?.((i + packet.length) / data.length);
	}
}

async function write_bootloader(serial, progressFn=null){
	const address = 0x80000000;
	await write_dataframe(serial, 0xc3, 1024, ISP_PROG, address, progressFn);
	await send_cmd(serial, 0xc5, ints_to_buffer(address, 0), -1);//reboot
	await waitWhen(serial, 'data', 50, text_checker(v => v.endsWith('\n[DEBUG] FlashMode: loop\n')));
}

async function write_flash(serial, data, offset=0, progressFn=null){
	if(offset == 0){
		const dataNew = Buffer.concat([Buffer.alloc(5), data]);
		dataNew.writeUInt32LE(data.length, 1);
		const sha256 = crypto.createHash('sha256').update(dataNew).digest();
		data = Buffer.concat([dataNew, sha256]);
	}
	data = align_data(data, 4096);
	await write_dataframe(serial, 0xd4, 65536, data, offset, progressFn);
}

const select_chip = (serial, type) => send_cmd(serial, 0xd7, ints_to_buffer(type, 0));
const erase_flash = (serial, address, length) => send_cmd(serial, 0xd3, ints_to_buffer(address, length), 90000);

async function send_cmd(serial, op, data, timeout=1000){
	const head = ints_to_buffer(op, crc32(data));
	await serial.send_buffer(encode_c0db(Buffer.concat([head, data])));
	if(timeout < 0)return;
	const result = await waitWhen(serial, 'data', timeout, checker_c0db());
	if(result.length === 2 && result[0] === op && result[1] === 0xE0)return;
	return Promise.reject();
}

async function isK210(serial){
	await reset(serial, true);
	try{
		await send_cmd(serial, 0xc2, Buffer.alloc(0), 20);
	}catch{
		return false;
	}
	await reset(serial, false);
	return true;
}

exports.upload = upload;
exports.isK210 = isK210;
