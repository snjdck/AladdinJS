'use strict';

const {listenData} = require('../net/packet');
const {limitSend} = require('../utils/sender');

async function check(){
	const {bluetooth} = navigator;
	if(!bluetooth)return 1;
	if(!await bluetooth.getAvailability())return 2;
	return 0;
}

function requestDevice(option){
	const {bluetooth} = navigator;
	return bluetooth.requestDevice(option).catch(error => {
		if(error instanceof DOMException){
			if(error.code == DOMException.NOT_FOUND_ERR){
				return;//user cancel select
			}
		}
		throw error;
	});
}

function getService(server, serviceID, characteristicIDs){
	return server.getPrimaryService(serviceID).then(
		service => Promise.all(characteristicIDs.map(id => service.getCharacteristic(id)))
	);
}

function listenNotifications(characteristic, checker, handler){
	listenData(characteristic, 'characteristicvaluechanged', checker, handler);
}

function writeValue(characteristic, arrayBuffer, callback){
	limitSend((v, c) => characteristic.writeValue(v).then(c), arrayBuffer, callback);
}

exports.check = check;
exports.requestDevice = requestDevice;
exports.getService = getService;
exports.listenNotifications = listenNotifications;
exports.writeValue = writeValue;
