'use strict';
const EventEmitter = require('EventEmitter');
const {Stream} = require('./stream');

/*
reillyeon.github.io/serial/
option = {filters:[{usbVendorId,usbProductId}]}
//*/
function requestPort(option){
	const {serial} = navigator;
	return serial.requestPort(option).catch(error => {
		if(error instanceof DOMException){
			if(error.code == DOMException.NOT_FOUND_ERR){
				return;//user cancel select
			}
		}
		throw error;
	});
}

function listenEvent(target, event, handler){
	target.addEventListener(event, handler);
	return () => target.removeEventListener(event, handler);
}

const isInfoEquals = (a, b) => a.usbVendorId == b.usbVendorId && a.usbProductId == b.usbProductId;

function reconnect(lastPort){
	return evt => {
		if(!isInfoEquals(lastPort, evt.target.getInfo()))return;
		this.connect(evt.target);
	}
}

class Serial extends EventEmitter
{
	constructor(){
		super();
		this.stream = new Stream();
	}

	isConnected(){
		return this.port != null;
	}

	async connect(port){
		navigator.serial.onconnect = null;
		await port.open({baudRate:115200});
		await port.setSignals({dataTerminalReady:false, requestToSend:false});
		this.cancelEventDisconnect = listenEvent(port, 'disconnect', evt => {
			this.cancelEventDisconnect();
			this.port = null;
			this.emit('disconnect');
			navigator.serial.onconnect = reconnect.call(this, evt.target.getInfo());
		});
		this.port = port;
		this.stream.read(this.port.readable, v => this.emit('data', v));
		this.emit('connect');
	}

	async disconnect(silentFlag=false){
		this.cancelEventDisconnect();
		await this.stream.close();
		await this.port.close();
		this.port = null;
		if(!silentFlag)this.emit('disconnect');
	}

	send_buffer(data){
		return this.stream.write(this.port.writable, data);
	}

	async update(baudRate){
		await this.stream.close();
		await this.port.close();
		await this.port.open({baudRate});
		this.stream.read(this.port.readable, v => this.emit('data', v));
	}

	async setControlSignals({dtr, rts}){
		const signals = {};
		if(dtr != null)signals.dataTerminalReady = dtr;
		if(rts != null)signals.requestToSend = rts;
		await this.port.setSignals(signals);
	}
}

module.exports = Serial;