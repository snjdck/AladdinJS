'use strict';

const EventEmitter = require('events');
const {readStream, writeStream} = require('net/packet');

/*
reillyeon.github.io/serial/
option = {filters:[{usbVendorId,usbProductId}]}
//*/
function requestPort(option){
	const {serial} = navigator;
	return serial.requestPort(option).catch(error => {
		if(error instanceof DOMException){
			if(error.code == DOMException.NOT_FOUND_ERR){
				return;//user cancel select
			}
		}
		throw error;
	});
}

class Serial extends EventEmitter
{
	constructor(port){
		super();
		this.port = port;
		navigator.serial.ondisconnect = evt => console.log('disconnect', evt.port);
	}

	async connect(baudRate){
		await this.port.open({baudRate});
		this.listen();
	}

	async listen(){
		for await(let data of readStream(this.port.readable)){
			this.emit('data', data);
		}
	}

	setControlSignals({dtr}){
		return this.port.setSignals({dataTerminalReady:dtr});
	}

	send_buffer(value){
		return writeStream(this.port.writable, value);
	}
}

exports.requestPort = requestPort;
exports.Serial = Serial;
