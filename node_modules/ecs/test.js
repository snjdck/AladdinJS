'use strict';

const {Engine, Entity, Component, System, ListIterSystem, ComponentSelector} = require('./');
//const Animation = require('./test/asteroids/components/Animation');


const PositionComponent = Component('position', (x=0, y=0) => ({x, y}));

//console.log(Object.getOwnPropertyDescriptor(Animation, 'name'), Animation.name);
//console.log(Object.getOwnPropertyDescriptor(PositionComponent, 'name'), PositionComponent.name);


const PositionSelector = ComponentSelector(PositionComponent);
const DisplaySelector = ComponentSelector();

const RenderSystem = ListIterSystem(PositionSelector, function(positionEntityList){
	console.log("engine init", this);
	positionEntityList.listen(entity => console.log(entity, 'added'))
	return function({position}){
		position.x++;
		console.log(this, position, position.x, position.y)
	}
})


/*
const RenderSystem = function(engine){
	let positionEntityList = engine.findEntities(PositionSelector);
	forEachEntityDo(positionEntityList, value => console.log(value, 'added'))
	//positionEntityList.events.on('added', value => console.log(value, 'added'))
	return function(){
		for(let entity of positionEntityList){
			let pos = entity.getComponent(PositionComponent);
			pos.x++;
			console.log(pos)
		}
	}
}
*/



let entity = new Entity();
entity.addComponent(PositionComponent, [1, 2]);

let entity2 = new Entity();
entity2.addComponent(PositionComponent);

let entity3 = new Entity();

let engine = new Engine();
engine.addEntity(entity);
engine.addEntity(entity2);
engine.addEntity(entity3);
engine.addSystem(RenderSystem);
//engine.addSystem(RenderSystem);
//*
setInterval(() => engine.update(), 1000);
setTimeout(()=>{
	entity3.addComponent(PositionComponent);
}, 2000)
//setInterval(_=>_)
//setInterval($=>$)


//*/
/*
let a = {name:'a'};
let b = {name:'b', parent:a};
let c = {name:'c', parent:a};
let d = {name:'d', parent:b};
let queue = [b, a, d, c];
function sort(queue){
	return queue
}
console.log(sort(queue).map(v => v.name))
//*/
