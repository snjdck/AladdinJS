'use strict';

const EvtSet = require('./EvtSet');

class Engine
{
	constructor(){
		Object.defineProperty(this, 'systemList', {value: new Set()});
		Object.defineProperty(this, 'entityList', {value: new EvtSet()});
		Object.defineProperty(this, 'selectDict', {value: new Map()});
		Object.defineProperty(this, 'entityDict', {value: Object.create(null)});
	}

	addSystem(system){
		this.systemList.add(system(this));
		return this;
	}

	update(){
		this.systemList.forEach(v => v(this));
	}

	addEntity(entity){
		let {entityDict, entityList, selectDict} = this;
		entityDict[entity.id] = entity;
		entityList.add(entity);
		entity.engine = this;
		selectDict.forEach(entity.addEntityToSet, entity);
		return this;
	}

	removeEntity(entity){
		let {entityDict, entityList, selectDict} = this;
		delete entityDict[entity.id];
		entityList.delete(entity);
		entity.engine = null;
		selectDict.forEach(entity.removeEntityFromSet, entity);
		return this;
	}

	getEntity(id){
		return this.entityDict[id];
	}

	onComponentAdded(entity, componentType){
		for(let [componentTypes, entitySet] of this.selectDict){
			if(!componentTypes.includes(componentType))continue;
			entity.addEntityToSet(entitySet, componentTypes);
		}
	}

	onComponentRemoved(entity, componentType){
		for(let [componentTypes, entitySet] of this.selectDict){
			if(!componentTypes.includes(componentType))continue;
			entity.removeEntityFromSet(entitySet);
		}
	}

	findEntities(componentTypes){
		let {entityList, selectDict} = this;
		if(!componentTypes || componentTypes.length === 0){
			return entityList;
		}
		if(!selectDict.has(componentTypes)){
			let entitySet = new EvtSet();
			for(let entity of entityList){
				entity.addEntityToSet(entitySet, componentTypes);
			}
			selectDict.set(componentTypes, entitySet);
		}
		return selectDict.get(componentTypes);
	}
}

module.exports = Engine;