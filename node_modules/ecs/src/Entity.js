'use strict';

class Entity
{
	constructor(id){
		Object.defineProperty(this, 'id', {value: id});
		Object.defineProperty(this, 'engine', {writable: true});
		Object.defineProperty(this, 'componentDict', {value: new Map()});
	}

	addComponent(componentType, args){
		let {componentDict, engine} = this;
		componentDict.set(componentType, componentType.apply(null, args));
		engine && engine.onComponentAdded(this, componentType);
		return this;
	}

	removeComponent(componentType){
		let {componentDict, engine} = this;
		componentDict.delete(componentType);
		engine && engine.onComponentRemoved(this, componentType);
		return this;
	}

	hasComponent(componentType){
		return this.componentDict.has(componentType);
	}

	getComponent(componentType){
		return this.componentDict.get(componentType);
	}

	match(componentTypes){
		return componentTypes.every(this.hasComponent, this);
	}

	addEntityToSet(entitySet, componentTypes){
		if(this.match(componentTypes)){
			entitySet.add(this);
		}
	}

	removeEntityFromSet(entitySet){
		entitySet.delete(this);
	}

	[Symbol.iterator](){
		return this.componentDict.keys();
	}

	get[Symbol.toStringTag](){
		let {id, componentDict} = this;
		let desc = Array.from(componentDict.entries()).map(([type, data]) => `${type.name}:${JSON.stringify(data)}`);
		return `(id:${id}, ${desc.join(', ')})`;
	}
}

module.exports = Entity;