"use strict";

const {createMeshIndices} = require("../utils/geometry");
const VertexArray = require("./VertexArray");

class VertexArray2D extends VertexArray{
	onCreate(gl){
		this.uniformBuffer = gl.createBuffer();
		this.vertexBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();

		gl.bindBuffer(gl.UNIFORM_BUFFER, this.uniformBuffer);
		
		gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
			0, 0, 0, 0, 0, 0,
			0, 0, 1, 0, 0, 0,
			1, 0, 0,-1, 0, 0,
			1, 0, 0, 0, 0, 0,
			
			0, 0, 0, 0, 1, 0,
			0, 0, 1, 0, 1, 0,
			1, 0, 0,-1, 1, 0,
			1, 0, 0, 0, 1, 0,
			
			0, 1, 0, 0, 0,-1,
			0, 1, 1, 0, 0,-1,
			1, 1, 0,-1, 0,-1,
			1, 1, 0, 0, 0,-1,
			
			0, 1, 0, 0, 0, 0,
			0, 1, 1, 0, 0, 0,
			1, 1, 0,-1, 0, 0,
			1, 1, 0, 0, 0, 0
		]), gl.STATIC_DRAW);

		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint8Array(createMeshIndices(4, 4)), gl.STATIC_DRAW);

		gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 24, 0);
		gl.vertexAttribPointer(1, 4, gl.FLOAT, false, 24, 8);

		gl.enableVertexAttribArray(0);
		gl.enableVertexAttribArray(1);
	}

	onDispose(gl){
		gl.deleteBuffer(this.uniformBuffer);
		gl.deleteBuffer(this.vertexBuffer);
		gl.deleteBuffer(this.indexBuffer);
		this.uniformBuffer = null;
		this.vertexBuffer = null;
		this.indexBuffer = null;
	}

	onActive(gl){
		gl.bindBufferBase(gl.UNIFORM_BUFFER, 0, this.uniformBuffer);
	}

	draw(gl){
		gl.drawElements(gl.TRIANGLES, 54, gl.UNSIGNED_BYTE, 0);
	}
}

module.exports = VertexArray2D;