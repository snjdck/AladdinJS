"use strict";

const {VertexArray2D} = require("./vertexarrays");
const {UniformBuffer} = require("./uniformbuffers");

class Render2D
{
	constructor(gl){
		this.gl = gl;
		this.mouseMgr = gl.mouseMgr;
		this.vertexArray = new VertexArray2D();
		this.uniformBuffer = new UniformBuffer(6, 1, 10);
		this.uniformData = this.uniformBuffer.data;
		this.uniformData.set([-1, 1], 2);
	}

	drawBegin(width, height, mode){
		const {gl, uniformData, vertexArray, uniformBuffer} = this;

		var program = gl.__program__[`shader2d&${mode}`];
		gl.useProgram(program);

		vertexArray.active(gl);
		uniformBuffer.active(gl);

		uniformData[0] =  2 / width;
		uniformData[1] = -2 / height;

		gl.activeTexture(gl.TEXTURE0);
		gl.uniform1i(gl.getUniformLocation(program, "sampler0"), 0);

		gl.disable(gl.DEPTH_TEST);
		if(mode == "pick"){
			this.uidLocation = gl.getUniformLocation(program, "uid");
			gl.disable(gl.BLEND);
		}else{
			gl.enable(gl.BLEND);
			gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
		}
	}

	drawBitmap(target, mode){
		const {worldTransform, texture, width, height} = target;
		const {gl, uniformData, vertexArray, uniformBuffer} = this;

		worldTransform.copyToArray(uniformData, 4);
		uniformData.set(texture.xyuvMul, 12);
		uniformData.set(texture.xyuvAdd, 16);
		uniformData.set(texture.scale9grid, 24);

		uniformData[20] = width;
		uniformData[21] = texture.width;
		uniformData[22] = height;
		uniformData[23] = texture.height;

		uniformBuffer.upload(gl);
		gl.bindTexture(gl.TEXTURE_2D, texture.getRawAsset(gl));

		if(mode == "pick"){
			gl.uniform1i(this.uidLocation, this.mouseMgr.pickRegister(target));
		}

		vertexArray.draw(gl);
	}
}

module.exports = Render2D;