"use strict";

const {VertexArray2D} = require("./vertexarrays");
const {UniformBuffer} = require("./uniformbuffers");

const MAX_INSTANCE_COUNT = 10;

class Render2D
{
	constructor(gl){
		this.gl = gl;
		this.vertexArray = new VertexArray2D();
		this.uniformBuffer = new UniformBuffer(6, 1, MAX_INSTANCE_COUNT);

		this.targetList = [];
		this.activeTexture = null;
		this.mode = null;
	}

	isPickMode(){
		return this.mode == "pick";
	}

	viewport(width, height){
		this.uniformBuffer.setFloats(0, 2 / width, -2 / height);
	}

	drawBegin(){
		const {gl, vertexArray, uniformBuffer} = this;

		let program = gl.programMgr.fetch(`shader2d&${this.mode}`);
		gl.useProgram(program);

		uniformBuffer.active(gl);
		vertexArray.active(gl);

		gl.activeTexture(gl.TEXTURE0);
		gl.uniform1i(gl.getUniformLocation(program, "sampler0"), 0);

		gl.disable(gl.DEPTH_TEST);
		if(this.isPickMode()){
			gl.disable(gl.BLEND);
		}else{
			gl.enable(gl.BLEND);
			gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
		}
	}

	drawBitmap(target){
		let texture = target.texture.getRawAsset(this.gl);
		if(texture != this.activeTexture){
			this.drawEnd();
		}
		this.targetList.push(target);
		this.activeTexture = texture;
	}

	drawEnd(){
		const targetCount = this.targetList.length;
		if(targetCount <= 0)return;
		const isPickMode = this.isPickMode();
		const {gl, vertexArray, uniformBuffer, targetList} = this;
		gl.bindTexture(gl.TEXTURE_2D, this.activeTexture);
		let instanceIndex = 0;
		let drawCount = Math.ceil(targetCount / MAX_INSTANCE_COUNT);
		while(drawCount--){
			if(isPickMode){
				uniformBuffer.setInts(2, gl.mouseMgr.nextPickID);
			}
			const instanceCount = Math.min(MAX_INSTANCE_COUNT, targetCount - instanceIndex);
			let offset = 4;
			for(let i=0; i<instanceCount; ++i){
				const target = targetList[instanceIndex+i];
				const {worldTransform, texture, width, height} = target;
				
				worldTransform.copyToArray(uniformBuffer.floatView, offset);
				uniformBuffer.setFloatv(offset+8 , texture.xyuvMul);
				uniformBuffer.setFloatv(offset+12, texture.xyuvAdd);
				uniformBuffer.setFloatv(offset+20, texture.scale9grid);
				uniformBuffer.setFloats(offset+16, width, texture.width, height, texture.height);

				offset += 24;

				if(isPickMode){
					gl.mouseMgr.pickRegister(target);
				}
			}
			instanceIndex += instanceCount;
			uniformBuffer.upload(gl, instanceCount);
			vertexArray.draw(gl, instanceCount);
		}
		targetList.length = 0;
		this.activeTexture = null;
	}
}

module.exports = Render2D;