"use strict";

const {VertexArray2D} = require("./vertexarrays");

class Render2D
{
	constructor(gl){
		this.gl = gl;
		this.mouseMgr = gl.mouseMgr;
		this.uniformData = new Float32Array(7 * 4);
		this.vertexArray = new VertexArray2D();
	}

	drawBegin(width, height, mode){
		const {gl, uniformData, vertexArray} = this;

		var program = gl.__program__[`shader2d&${mode}`];
		gl.useProgram(program);

		vertexArray.active(gl);

		uniformData[0] =  2 / width;
		uniformData[1] = -2 / height;
		uniformData[2] = -1;
		uniformData[3] =  1;

		gl.activeTexture(gl.TEXTURE0);
		gl.uniform1i(gl.getUniformLocation(program, "sampler0"), 0);

		gl.disable(gl.DEPTH_TEST);
		if(mode == "pick"){
			this.uidLocation = gl.getUniformLocation(program, "uid");
			gl.disable(gl.BLEND);
		}else{
			gl.enable(gl.BLEND);
			gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
		}
	}

	drawBitmap(target, mode){
		const {worldTransform, texture, width, height} = target;
		const {gl, uniformData, vertexArray} = this;

		worldTransform.copyToArray(uniformData, 4);

		uniformData[12] = 1;
		uniformData[13] = 1;
		uniformData[14] = 1;
		uniformData[15] = 1;

		uniformData[16] = 0;
		uniformData[17] = 0;
		uniformData[18] = 0;
		uniformData[19] = 0;

		uniformData[20] = width;
		uniformData[21] = texture.width;
		uniformData[22] = height;
		uniformData[23] = texture.height;

		for(let i=0; i<4; ++i){
			uniformData[24+i] = texture.scale9grid[i];
		}

		vertexArray.uploadUniformData(uniformData);

		gl.bindTexture(gl.TEXTURE_2D, texture);

		if(mode == "pick"){
			gl.uniform1i(this.uidLocation, this.mouseMgr.pickRegister(target));
		}

		gl.drawElements(gl.TRIANGLES, 54, gl.UNSIGNED_BYTE, 0);
	}
}

module.exports = Render2D;