function createMeshIndices(numVertexPerRow, numVertexPerCol, result=[])
{
	const numGridPerRow = numVertexPerRow - 1;
	const numGridPerCol = numVertexPerCol - 1;
	for(var row=0; row<numGridPerCol; ++row){
		for(var col=0; col<numGridPerRow; ++col){
			var a = col + numVertexPerRow * row;
			var b = col + numVertexPerRow * (row + 1);
			//三角形1, 三角形2
			result.push(a, a+1, b+1, a, b+1, b);
		}
	}
	return result;
}

class Render2D
{
	constructor(gl){
		this.gl = gl;
		this.vertexBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		this.vao = gl.createVertexArray();
		
		gl.bindVertexArray(this.vao);
		
		gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
			0, 0, 0, 0, 0, 0,
			0, 0, 1, 0, 0, 0,
			1, 0, 0,-1, 0, 0,
			1, 0, 0, 0, 0, 0,
			
			0, 0, 0, 0, 1, 0,
			0, 0, 1, 0, 1, 0,
			1, 0, 0,-1, 1, 0,
			1, 0, 0, 0, 1, 0,
			
			0, 1, 0, 0, 0,-1,
			0, 1, 1, 0, 0,-1,
			1, 1, 0,-1, 0,-1,
			1, 1, 0, 0, 0,-1,
			
			0, 1, 0, 0, 0, 0,
			0, 1, 1, 0, 0, 0,
			1, 1, 0,-1, 0, 0,
			1, 1, 0, 0, 0, 0
		]), gl.STATIC_DRAW);

		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint8Array(createMeshIndices(4, 4)), gl.STATIC_DRAW);

		gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 24, 0);
		gl.vertexAttribPointer(1, 4, gl.FLOAT, false, 24, 8);

		gl.enableVertexAttribArray(0);
		gl.enableVertexAttribArray(1);

		gl.bindVertexArray(null);
	}

	drawBegin(){
		var gl = this.gl;
		gl.disable(gl.DEPTH_TEST);
		gl.enable(gl.BLEND);
		gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

		var program = gl.__program__["shader2d"];
		gl.useProgram(program);

		gl.bindVertexArray(this.vao);

		var address = gl.getUniformLocation(program, "screenMatrix");
		gl.uniform4f(address, 2 / gl.drawingBufferWidth, -2 / gl.drawingBufferHeight, -1, 1);

		gl.activeTexture(gl.TEXTURE0);
		gl.uniform1i(gl.getUniformLocation(program, "texture"), 0);
	}

	drawEnd(){
		//this.gl.bindVertexArray(null);
	}

	drawBitmap({worldTransform, texture, width, height}){
		var gl = this.gl;
		var program = gl.getParameter(gl.CURRENT_PROGRAM);
		gl.uniform4f(gl.getUniformLocation(program, "rectSize"), width, texture.width, height, texture.height);
		gl.uniform3f(gl.getUniformLocation(program, "worldMatrixX"), worldTransform.a, worldTransform.c, worldTransform.tx);
		gl.uniform3f(gl.getUniformLocation(program, "worldMatrixY"), worldTransform.b, worldTransform.d, worldTransform.ty);
		gl.uniform4f(gl.getUniformLocation(program, "textureMul"), 1, 1, 1, 1);
		gl.uniform4f(gl.getUniformLocation(program, "textureAdd"), 0, 0, 0, 0);

		gl.bindTexture(gl.TEXTURE_2D, texture);

		var scale9gridAddress = gl.getUniformLocation(program, "scale9grid");

		if(texture.scale9grid != null){
			gl.uniform4f(scale9gridAddress, ...texture.scale9grid);
			gl.drawElements(gl.TRIANGLES, 54, gl.UNSIGNED_BYTE, 0);
		}else{
			gl.uniform4f(scale9gridAddress, 0, 0, 0, 0);
			gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_BYTE, 24);
		}
	}
}

module.exports = Render2D;