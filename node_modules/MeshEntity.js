const DisplayObject3D = require("./DisplayObject3D");

const Matrix3D = require("Matrix3D");
var worldMatrix = new Matrix3D();

class MeshEntity extends DisplayObject3D
{
	constructor(){
		super();
	}

	set mesh(value){
		console.log(value);
		this._mesh = value;
		var subMesh = this._mesh.subMeshList[0];

		this.vertexData = subMesh.vertexData;
		this.byteSizePerVertex = subMesh.data32PerVertex << 2;
		this.vertexCount = this.vertexData.byteLength / this.byteSizePerVertex;

		this.indexData = subMesh.indexData;
		this.indexCount = this.indexData.byteLength >> 1;
	}

	init(gl){
		this.vao = gl.createVertexArray();
		gl.bindVertexArray(this.vao);

		this.vertexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER, this.vertexData, gl.STATIC_DRAW);

		if(this.indexCount > 0){
			this.indexBuffer = gl.createBuffer();
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
			gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indexData, gl.STATIC_DRAW);
		}

		gl.vertexAttribPointer(0, 3, gl.FLOAT, false, this.byteSizePerVertex, 0);
		gl.vertexAttribPointer(1, 2, gl.FLOAT, false, this.byteSizePerVertex, 24);

		gl.enableVertexAttribArray(0);
		gl.enableVertexAttribArray(1);

		gl.bindVertexArray(null);
	}

	collectDrawUnits(collector, gl, mode){
		if(mode == "pick"){
			if(!this.mouseEnabled){
				return;
			}
			var uid = gl.mouseMgr.pickRegister(this);
		}
		if(null == this.vao){
			this.init(gl);
		}
		let {vao, texture, vertexCount, indexCount} = this;
		let shader = `shader3d&${mode}`;
		collector.addDrawUnit({shader, worldMatrix, vao, texture, indexCount, vertexCount, uid}, mode);
	}
}

module.exports = MeshEntity;