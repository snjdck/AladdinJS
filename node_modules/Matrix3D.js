class Matrix3D extends Float32Array
{
	static concat(va, vb, output){
		var va00 = va[0 ], vb00 = vb[0 ];
		var va01 = va[1 ], vb01 = vb[1 ];
		var va02 = va[2 ], vb02 = vb[2 ];
		var va03 = va[3 ], vb03 = vb[3 ];
		var va04 = va[4 ], vb04 = vb[4 ];
		var va05 = va[5 ], vb05 = vb[5 ];
		var va06 = va[6 ], vb06 = vb[6 ];
		var va07 = va[7 ], vb07 = vb[7 ];
		var va08 = va[8 ], vb08 = vb[8 ];
		var va09 = va[9 ], vb09 = vb[9 ];
		var va10 = va[10], vb10 = vb[10];
		var va11 = va[11], vb11 = vb[11];
		var va12 = va[12], vb12 = vb[12];
		var va13 = va[13], vb13 = vb[13];
		var va14 = va[14], vb14 = vb[14];
		var va15 = va[15], vb15 = vb[15];
		
		output[0 ] = (va00 * vb00) + (va01 * vb04) + (va02 * vb08);
		output[4 ] = (va04 * vb00) + (va05 * vb04) + (va06 * vb08);
		output[8 ] = (va08 * vb00) + (va09 * vb04) + (va10 * vb08);
		output[12] = (va12 * vb00) + (va13 * vb04) + (va14 * vb08) + vb12;
		
		output[1 ] = (va00 * vb01) + (va01 * vb05) + (va02 * vb09);
		output[5 ] = (va04 * vb01) + (va05 * vb05) + (va06 * vb09);
		output[9 ] = (va08 * vb01) + (va09 * vb05) + (va10 * vb09);
		output[13] = (va12 * vb01) + (va13 * vb05) + (va14 * vb09) + vb13;
		
		output[2 ] = (va00 * vb02) + (va01 * vb06) + (va02 * vb10);
		output[6 ] = (va04 * vb02) + (va05 * vb06) + (va06 * vb10);
		output[10] = (va08 * vb02) + (va09 * vb06) + (va10 * vb10);
		output[14] = (va12 * vb02) + (va13 * vb06) + (va14 * vb10) + vb14;
		
		output[3 ] = (va00 * vb03) + (va01 * vb07) + (va02 * vb11);
		output[7 ] = (va04 * vb03) + (va05 * vb07) + (va06 * vb11);
		output[11] = (va08 * vb03) + (va09 * vb07) + (va10 * vb11);
		output[15] = (va12 * vb03) + (va13 * vb07) + (va14 * vb11) + vb15;
	}

	constructor(){
		super(16);
		this[0] = this[5] = this[10] = this[15] = 1;
	}

	identity(){
		for(var i=0; i<16; ++i){
			this[i] = i % 5 > 0 ? 0 : 1;
		}
	}

	concat(other){
		Matrix3D.concat(this, other, this);
	}

	copyFrom(other){
		for(var i=0; i<16; ++i){
			this[i] = other[i];
		}
	}

	clone(){
		var matrix = new Matrix3D();
		matrix.copyFrom(this);
		return matrix;
	}
}

module.exports = Matrix3D;