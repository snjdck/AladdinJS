
import safeCall from 'utils/function/safeCall';
import collectAllTypes from 'utils/class/collectAllTypes';
import ArrayKeyMap from 'ds/ArrayKeyMap';

import InjectionTypeValue from './InjectionTypeValue';
import InjectionTypeClass from './InjectionTypeClass';
import InjectionTypeSingleton from './InjectionTypeSingleton';

class Injector
{
	constructor(parent=null){
		Object.defineProperty(this, 'parent', {value: parent, writable: true});
		Object.defineProperty(this, '_ruleDict', {value: new ArrayKeyMap(2)});
	}

	mapValue(key, value, realInjector=this){
		this.mapRule(key, new InjectionTypeValue(realInjector, value));
	}

	mapClass(key, value=null, realInjector=null){
		this.mapRule(key, new InjectionTypeClass(realInjector || this, value || fetchType(key)));
	}

	mapSingleton(key, value=null, realInjector=null){
		this.mapRule(key, new InjectionTypeSingleton(realInjector || this, value || fetchType(key)));
	}

	mapRule(key, rule){
		this._ruleDict.set(key, rule);
	}

	mapMetaRule(key, rule){
		this._ruleDict.set([key, KeyMeta], rule);
	}

	unmap(key){
		this._ruleDict.delete(key);
	}

	getRule(key, inherit=true){
		if(!inherit)return this._ruleDict.get(key);
		for(let injector=this; injector; injector=injector.parent){
			let rule = injector.getRule(key, false);
			if (rule)return rule;
		}
	}

	getInstance(type, id){
		if(id === undefined && Array.isArray(type))
			[type, id] = type;
		let rule = this.getRule([type, id]) || this.getRule([type, KeyMeta]);
		return rule && rule.getValue(this, [type, id]);
	}

	getInstanceAll(...keys){
		return keys.map(key => this.getInstance(key));
	}

	inject(target){
		let queue = Array.from(collectAllTypes(target)).filter(v => v.hasOwnProperty(InjectTag)).map(v => v[InjectTag]);
		if(queue.length > 0)
			for(let [k, v] of Object.entries(Object.assign(Object.create(null), ...queue.reverse())))
				target[k] = this.getInstance(v);
		safeCall(target, InjectTag, this);
		return target;
	}
}

const fetchType = key => Array.isArray(key) ? key[0] : key;
const KeyMeta	= Symbol('KeyMeta');
const InjectTag	= Symbol('InjectTag');

export {
	InjectTag,
	Injector
};