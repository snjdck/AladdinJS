import isString from 'utils/object/isString';

class MsgName
{
	static ModuleStartup = Symbol('ModuleStartup');

	static create(moduleName, nameList){
		console.assert(isString(moduleName), 'module name must be string! but get: %o', moduleName);
		console.assert(Array.isArray(nameList) && nameList.every(isString), 'name list must be array of string! but get: %o', nameList);
		let target = Object.create(null);
		for(let name of nameList)
			Object.defineProperty(target, name, {value: new MsgName(`${moduleName}/${name}`), enumerable:true});
		return target;
	}

	static [Symbol.hasInstance](instance){
		if(this.prototype.isPrototypeOf(instance)){
			return true;
		}
		switch(typeof instance){
			case 'symbol':
			case 'string':
				return true;
		}
		return false;
	}

	static assert(value){
		console.assert(value instanceof this, "msg.name must be 'symbol' or 'string'! but get: %o", value);
	}

	constructor(desc){
		this._desc = desc;
		this._value = Symbol(desc);
	}

	[Symbol.toPrimitive](hint){
		return this._value;
	}

	valueOf(){
		return this._value;
	}

	get reply(){
		if(!this._reply){
			this._reply = Symbol(`${this._desc}#reply`);
		}
		return this._reply;
	}
}

export default MsgName;