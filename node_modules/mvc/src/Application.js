
import {Injector} from 'ioc';
import Module from './Module';
import Msg from './Msg';
import MsgName from './MsgName';
import Activator from './helper/Activator';
import Router from './helper/Router';

class Application
{
	_injector = new Injector();
	_moduleDict = Object.create(null);
	_activator = new Activator();
	_router = new Router();

	constructor(){
		this._injector.mapValue(Application, this, null);
		this._injector.mapValue(Injector, this._injector, null);
	}

	regRole(role, injector){
		this._activator.register(role, injector);
	}

	route(msgName, msgData, dispatcher){
		this._router.dispatch(msgName, msgData, dispatcher);
	}

	regModule(meta){
		let module = new Module(meta, this._injector, this);
		this._router.register(module, meta.message);
		console.assert(!(this.hasStartup || (module.name in this._moduleDict)));
		this._moduleDict[module.name] = module;
		return this;
	}

	getModule(name){
		return this._moduleDict[name];
	}

	notifyAll(msgName, msgData){
		for(let module of Object.values(this._moduleDict)){
			module.notify(new Msg(msgName, msgData, module));
		}
	}

	startup(...args){
		if(this.hasStartup)return;
		Object.defineProperty(this, "hasStartup", {value:true});
		this.onStartup(...args);
		this.notifyAll(MsgName.ModuleStartup);
	}

	onStartup(){
		let moduleList = Object.values(this._moduleDict);
		moduleList.forEach(initAllModels);
		this._activator.activate();
		moduleList.forEach(initAllServices);
		this._activator.activate();
		moduleList.forEach(initAllControllers);
	}
}

function initAllModels(module){
	for(let v of module.collectAllModels()){
		if(Array.isArray(v)){
			if(v.length == 2){
				module.regModel(v[1], v[0]);
				continue;
			}else if(v.length == 1){
				v = v[0];
			}else{
				throw new Error(v);
			}
		}
		if(v.prototype){
			module.regModel(new v());
		}else{
			module.regModel(v);
		}
	}
}

function initAllServices(module){
	for(let v of module.collectAllServices()){
		if(!Array.isArray(v)){
			module.regService(v, v);
		}else if(v.length == 3){
			module.regService(...v);
		}else if(v.length == 2){
			if(typeof v[1] == "boolean"){
				module.regService(v[0], ...v);
			}else{
				module.regService(...v);
			}
		}else if(v.length == 1){
			module.regService(v[0], v[0]);
		}else{
			throw new Error(v);
		}
	}
}

function initAllControllers(module){
	for(let v of module.collectAllControllers()){
		module.regController(v);
	}
}

export default Application;
