import Msg from '../Msg';

import addIfNotExist from 'utils/object/addIfNotExist';
import * as valueSet from 'utils/object/valueSet';

class Router
{
	_msgDispatched = Object.create(null);
	_msgInterested = Object.create(null);

	register(module, {dispatched, interested}){
		let {_msgDispatched, _msgInterested} = this;
		for(let v of new Set(dispatched)){
			if(_msgDispatched[v]){
				console.warn('msg %s from %s has been dispatched by %s!', v.valueOf(), module.name, _msgDispatched[v].name);
			}else{
				_msgDispatched[v] = module;
			}
		}
		for(let v of new Set(interested)){
			if(_msgDispatched[v] !== module){
				valueSet.add(_msgInterested, v, module);
				addIfNotExist(_msgDispatched, v);
			}
		}
	}

	needDispatch(msgName){
		return msgName in this._msgDispatched;
	}

	canDispatch(msgName, module){
		return module === this._msgDispatched[msgName];
	}

	dispatch(msgName, msgData, dispatcher){
		if(!this.needDispatch(msgName)){
			return;
		}
		if(!this.canDispatch(msgName, dispatcher)){
			console.warn("%s can't notify global msg %s!", dispatcher.name, msgName.valueOf());
			return;
		}
		let moduleList = this._msgInterested[msgName];
		if(!moduleList)return;
		for(let module of moduleList){
			module.notify(new Msg(msgName, msgData, dispatcher));
		}
	}
}

export default Router;