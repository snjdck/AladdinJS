
import {Injector} from 'ioc';
import Msg from './Msg';
import MsgName from './MsgName';
import safeCall from 'utils/function/safeCall';
import compose from 'utils/function/compose';

class Module
{
	_controllerDict = Object.create(null);
	_viewSet = new Set();

	constructor(meta, injector, application){
		Object.defineProperty(this, "name", {value: meta.name});
		this._application = application;
		this._injector = new Injector(injector);
		this._injector.mapValue(Module, this, null);
		this._injector.mapValue(Injector, this._injector, null);
		installPlugins(this, meta.plugins);
		this.meta = meta;
	}

	notify(msg){
		console.assert(msg instanceof Msg, 'invalid message!', msg);
		const msgName = msg.name;
		MsgName.assert(msgName);
		if(this.hasController(msgName)){
			let controller = this._controllerDict[msgName];
			controller.exec(msg);
		}
		for(let view of this._viewSet.values()){
			if(msg.isProcessCanceled())break;
			safeCall(view, msgName, msg);
		}
		if(msg.isFromInternal()){
			this._application.route(msgName, msg.data, this);
		}
		return !msg.isDefaultPrevented();
	}

	regService(serviceInterface, serviceClass, asLocal=false){
		let injector = asLocal ? this._injector : this._injector.parent;
		injector.mapSingleton(serviceInterface, serviceClass, this._injector);
		this._application.regRole(serviceInterface, injector);
	}

	regModel(model, modelType=null){
		if(!modelType)modelType = model.constructor;
		this._injector.mapValue(modelType, model);
		this._application.regRole(modelType, this._injector);
	}

	delModel(modelType){
		this._injector.ummap(modelType);
	}

	regView(view){
		if(this._viewSet.has(view))return;
		this._viewSet.add(view);
		this._injector.inject(view);
		safeCall(view, "onReg");
	}

	delView(view){
		safeCall(view, "onDel");
		this._viewSet.delete(view);
	}

	regController(controllerType){
		let msgName = controllerType.id;
		MsgName.assert(msgName);
		if(this.hasController(msgName)){
			let before = this._controllerDict[msgName].constructor.name;
			console.warn('%s.regController(%s) again! before:%s, willset:%s', this.name, msgName.valueOf(), before, controllerType.name);
		}
		this._controllerDict[msgName] = this._injector.inject(new controllerType());
	}

	delController(msgName){
		delete this._controllerDict[msgName];
	}

	hasController(msgName){
		return msgName in this._controllerDict;
	}

	collectAllModels(){return this.meta.models;}
	collectAllServices(){return this.meta.services;}
	collectAllControllers(){return this.meta.controllers;}
}

function installPlugins(module, plugins){
	if(!plugins || plugins.length <= 0)return;
	module.notify = compose(...plugins.map(fn => fn(module)))(module.notify.bind(module));
}

export default Module;