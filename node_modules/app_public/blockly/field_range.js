'use strict';

Blockly.fieldRegistry.register('field_range', class extends Blockly.Field {
	static fromJson({value=0, min=0, max=100, step=1, width=200, markers=[]}){
		let result = new this(value);
		result.min = min;
		result.max = max;
		result.step = step;
		result.width = width;
		result.markers = markers;
		return result;
	}

	constructor(value){
		super(value);
		this.SERIALIZABLE = true;
	}

	showEditor_(){
		const dropDownDiv = Blockly.DropDownDiv;
		dropDownDiv.hideWithoutAnimation();
		dropDownDiv.clearContent();
		const root = dropDownDiv.getContentDiv();

		const datalist = document.createElement('datalist');
		for(let i of this.markers){
			let option = document.createElement('option')
			option.setAttribute('value', i)
			datalist.appendChild(option);
		}

		const range = document.createElement('input');
		range.style.width = this.width + 'px';
		range.setAttribute('type', 'range');
		range.setAttribute('min', this.min);
		range.setAttribute('max', this.max);
		range.setAttribute('step', this.step);
		range.setAttribute('value', this.getValue());
		range.addEventListener('input', evt => this.setValue(evt.target.valueAsNumber));

		datalist.setAttribute('id', 'tickmarks');
		range.setAttribute('list', 'tickmarks');

		root.appendChild(datalist);
		root.appendChild(range);

		const block = this.getSourceBlock();
		dropDownDiv.setColour(block.getColour(), block.getColourTertiary());
		dropDownDiv.showPositionedByField(this);
	}
});

