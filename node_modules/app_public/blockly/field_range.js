'use strict';

Blockly.fieldRegistry.register('field_range', class extends Blockly.FieldNumber {
	static fromJson(options){
		return new this(options.value, options);
	}

	constructor(opt_value, opt_config){
		super(opt_value, null, null, null, null, opt_config);
	}

	configure_(config){
		super.configure_({min: 0, max: 100, precision: 1, ...config});
		this._step = config.step ?? 1;
		this._width = config.width ?? 200;
		this._markers = config.markers ?? [];
	}

	onHtmlInputChange_(evt){
		super.onHtmlInputChange_(evt);
		this._rangeInput.value = evt.target.value;
	}

	showInlineEditor_(quietInput){
		super.showInlineEditor_(quietInput);
		const dropDownDiv = Blockly.DropDownDiv;
		dropDownDiv.hideWithoutAnimation();
		dropDownDiv.clearContent();
		const root = dropDownDiv.getContentDiv();

		const datalist = document.createElement('datalist');
		for(let i of this._markers){
			let option = document.createElement('option')
			option.setAttribute('value', i)
			datalist.appendChild(option);
		}

		const range = document.createElement('input');
		range.style.width = this._width + 'px';
		range.setAttribute('type', 'range');
		range.setAttribute('min', this.min_);
		range.setAttribute('max', this.max_);
		range.setAttribute('step', this._step);
		range.setAttribute('value', this.getValue());
		range.addEventListener('input', evt => this.setEditorValue_(evt.target.value));

		datalist.setAttribute('id', 'tickmarks');
		range.setAttribute('list', 'tickmarks');

		root.appendChild(datalist);
		root.appendChild(range);

		const block = this.getSourceBlock();
		dropDownDiv.setColour(block.getColour(), block.getColourTertiary());
		dropDownDiv.showPositionedByField(this);

		this._rangeInput = range;
	}
});

