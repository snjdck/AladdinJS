'use strict';

Blockly.fieldRegistry.register('field_colour_picker', class extends Blockly.FieldTextInput {
	static fromJson(options){
		return new this(options['value'], options);
	}

	constructor(opt_value, opt_config){
		super(opt_value, null, opt_config);
		this._datalistID = 'tickmarks';
	}

	configure_(config){
		super.configure_(config);
		this.spellcheck_ = false;
		this._markers = config.markers ?? [];
	}

	initView(){
		this.createBorderRect_();
		this.borderRect_.style.fillOpacity = 1;
	}

	applyColour(){
		if(!this.borderRect_)return;
		this.borderRect_.style.fill = this.getValue();
	}

	doValueUpdate_(newValue){
		super.doValueUpdate_(newValue);
		this.applyColour();
	}

	widgetCreate_(){
		Blockly.WidgetDiv.getDiv().appendChild(this._createDatalist(this._markers, this._datalistID));

		const htmlInput = super.widgetCreate_();
		htmlInput.setAttribute('type', 'color');
		htmlInput.setAttribute('list', this._datalistID);
		htmlInput.style.opacity = 0;
		return htmlInput;
	}

	updateSize_(){
		super.updateSize_(16);
	}

	showInlineEditor_(quietInput){
		super.showInlineEditor_(quietInput);
		if(!quietInput)this.htmlInput_.click();
	}

	_createDatalist(data, id){
		const datalist = document.createElement('datalist');
		datalist.setAttribute('id', id);
		for(let i of data){
			let option = document.createElement('option');
			option.setAttribute('value', i);
			datalist.appendChild(option);
		}
		return datalist;
	}
});

