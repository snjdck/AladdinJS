'use strict';

void function(){

function matchList(list, size, valueFn, headFlag=true){
	while(list.length < size){
		list[headFlag ? 'unshift' : 'push'](valueFn());
		headFlag = !headFlag;
	}
	return list;
}

const str2list = function(){
	const valueFn = () => '0';
	return function(v, w, h){
		return matchList(v.split(':'), h, valueFn).map(v => matchList(v.split(''), w, valueFn));
	}
}();

const list2str = v => v.map(v => v.join('')).join(':');
const getByIndex = (list, i, w) => list[Math.floor(i / w)][i % w];
const setByIndex = (list, i, w, v) => list[Math.floor(i / w)][i % w] = v;

Blockly.fieldRegistry.register('field_matrix', class extends Blockly.Field {
	static fromJson(options){
		return new this(options['value'] ?? '', options);
	}

	constructor(value, opt_config){
		super(value, v => list2str(str2list(v, this._w, this._h)), opt_config);
		this.SERIALIZABLE = true;
	}

	doValueUpdate_(newValue){
		super.doValueUpdate_(newValue);
		this.updateMatrix_();
	}

	configure_(config){
		super.configure_(config);
		this._w = config.width;
		this._h = config.height;

		this.zero = '0';
		this.one = Array.from({length:this._h}, () => '1'.repeat(this._w)).join(':');

		this.ledButtons_ = [];
		this.ledThumbNodes_ = [];

		this.THUMBNAIL_NODE_SIZE = 4;
		this.THUMBNAIL_NODE_PAD = 1;
		this.MATRIX_NODE_SIZE = 18;
		this.MATRIX_NODE_PAD = 5;
		this.BORDER_PAD = 2;
	}

	_calcSize(size, pad, count, border){
		return (size + pad) * count - pad + border * 2;
	}

	updateSize_(){
		const {THUMBNAIL_NODE_SIZE:nodeSize, THUMBNAIL_NODE_PAD:nodePad, BORDER_PAD:border} = this;
		this.size_.width = this._calcSize(nodeSize, nodePad, this._w, border);
		this.size_.height = this._calcSize(nodeSize, nodePad, this._h, border);
		this.positionBorderRect_();
	}

	createTextElement_(){
		const {THUMBNAIL_NODE_SIZE:nodeSize, THUMBNAIL_NODE_PAD:nodePad, BORDER_PAD:border} = this;

		let thumbnail = Blockly.utils.dom.createSvgElement('g', {
			'transform': `translate(${border}, ${border})`,
			'pointer-events': 'bounding-box',
			'style': 'cursor: default;'
			}, this.fieldGroup_
		);
		this.ledThumbNodes_ = [];
		let attr = {
			'width': nodeSize, 'height': nodeSize,
			'fill': this.getSourceBlock().getColour()
		};
		for(let y=0; y < this._h; ++y){
			for(let x=0; x < this._w; ++x){
				attr.x = (nodeSize + nodePad) * x;
				attr.y = (nodeSize + nodePad) * y;
				this.ledThumbNodes_.push(
					Blockly.utils.dom.createSvgElement('rect', attr, thumbnail)
				);
			}
		}
	}

	showEditor_(){
		Blockly.DropDownDiv.hideWithoutAnimation();
		Blockly.DropDownDiv.clearContent();
		const div = Blockly.DropDownDiv.getContentDiv();

		this.matrixStage_ = this.createMatrix_(this._w, this._h, this.MATRIX_NODE_SIZE, this.MATRIX_NODE_PAD);
		this.ledButtons_ = Array.from(this.matrixStage_.children);
		// Div for lower button menu
		let buttonDiv = document.createElement('div');
		buttonDiv.style = 'display: flex; justify-content: space-around; align-items: center; margin-top:6px';
		// Button to clear matrix
		let clearButton = this.createButton_(this.getSourceBlock().getColourSecondary());
		let fillButton = this.createButton_('#FFFFFF');
		buttonDiv.appendChild(clearButton);
		buttonDiv.appendChild(fillButton);
		div.appendChild(this.matrixStage_);
		div.appendChild(buttonDiv);

		Blockly.DropDownDiv.setColour(this.sourceBlock_.getColour(), this.sourceBlock_.getColourTertiary());
		Blockly.DropDownDiv.showPositionedByField(this);

		this.matrixTouchWrapper_ = Blockly.browserEvents.bind(this.matrixStage_, 'mousedown', this, this.onMouseDown);
		this.clearButtonWrapper_ = Blockly.browserEvents.bind(clearButton, 'mousedown', this, this.clearMatrix_);
		this.fillButtonWrapper_ = Blockly.browserEvents.bind(fillButton, 'mousedown', this, this.fillMatrix_);

		this.updateMatrix_();

		let iconList = FaceData;

		for(let i=0, n=Math.ceil(iconList.length * 0.5); i<n; ++i){
			let iconDiv = document.createElement('div');
			iconDiv.setAttribute('style', `gap:3px;display:flex;flex-direction: column;`);
			buttonDiv.insertBefore(iconDiv, buttonDiv.lastChild);
			for(let j=0; j<2; ++j){
				let icon = iconList[i+j*n];
				if(!icon)continue;
				let testBtn = this.createButton2(icon);
				iconDiv.appendChild(testBtn);
				Blockly.browserEvents.bind(testBtn, 'mousedown', null, () => this.setValue(icon))
			}
		}
	}

	createButton_(fill){
		const button = this.createMatrix_(3, 3, 6, 3);
		for(let i=0, n=button.children.length; i<n; ++i){
			const child = button.children[i];
			child.setAttribute('style', `background-color:${fill};`);
		}
		return button;
	}

	createButton2(icon){
		const button = this.createMatrix_(this._w, this._h, 2, 1);
		for(let i=0, n=button.children.length; i<n; ++i){
			const child = button.children[i];
			const list = str2list(icon, this._w, this._h);
			let fill = getByIndex(list, i, this._w) === '1' ? '#FFFFFF' : this.getSourceBlock().getColourSecondary();
			child.setAttribute('style', `background-color:${fill};`);
		}
		return button;
	}

	createMatrix_(nx, ny, size, gap){
		const div = document.createElement('div');
		div.setAttribute('style', `display:grid;grid-template-columns:repeat(${nx}, ${size}px);grid-template-rows:repeat(${ny}, ${size}px);gap:${gap}px;`);
		for(let i=0, n=nx*ny; i<n; ++i){
			div.appendChild(document.createElement('div'));
		}
		return div;
	}

	updateMatrix_(){
		const block = this.getSourceBlock();
		if(!block)return;
		const list = str2list(this.getValue(), this._w, this._h);
		for(let i=0, n=this._w*this._h; i<n; ++i){
			//getColour()
			const value = getByIndex(list, i, this._w);
			const fill = value === '0' ? block.getColourSecondary() : '#FFF';
			this.ledButtons_[i]?.setAttribute('style', `background-color:${fill}`);
			this.ledThumbNodes_[i]?.setAttribute('fill', fill);
		}
	}

	onMouseDown(evt){
		this.matrixMoveWrapper_ = Blockly.browserEvents.bind(document.body, 'mousemove', this, this.onMouseMove);
		this.matrixReleaseWrapper_ = Blockly.browserEvents.bind(document.body, 'mouseup', this, this.onMouseUp);

		const index = this.ledButtons_.indexOf(evt.target);
		if(index < 0){
			this.paintStyle_ = 'fill';
			return;
		}

		const list = str2list(this.getValue(), this._w, this._h);
		const value = getByIndex(list, index, this._w);
		this.paintStyle_ = value === '0' ? 'fill' : 'clear';
		setByIndex(list, index, this._w, value == '0' ? '1' : '0');
		this.setValue(list2str(list));
	}

	onMouseUp(){
		Blockly.browserEvents.unbind(this.matrixMoveWrapper_);
		Blockly.browserEvents.unbind(this.matrixReleaseWrapper_);
		this.paintStyle_ = null;
	}

	onMouseMove(evt){
		evt.preventDefault();
		if(!this.paintStyle_)return;
		const index = this.ledButtons_.indexOf(evt.target);
		if(index < 0)return;
		const list = str2list(this.getValue(), this._w, this._h);
		setByIndex(list, index, this._w, this.paintStyle_ === 'fill' ? '1' : '0');
		this.setValue(list2str(list));
	}

	clearMatrix_(e){
		if(e.button != 0)return;
		this.setValue(this.zero);
	}

	fillMatrix_(e){
		if(e.button != 0)return;
		this.setValue(this.one);
	}
});

const FaceData = function(){
	const IconList = [
	[
		' OO      OO ',
		'O  O    O  O',
		'            ',
		'    OOOO    ',
		'     OO     ',
	],
	[
		'OOO      OOO',
		'O O      O O',
		'OOO O  O OOO',
		'     OO     ',
	],
	[
		'O            O',
		' O          O ',
		'  O        O  ',
		'   O      O   ',
		'O   O    O   O',
	],
	[
		'OOO      OOO',
		' O   OO   O ',
		' O  O  O  O ',
	],
	[
		'O  O    O  O ',
		'O O O O O O O',
		'O  O    O  O ',
		'O O   O O O  ',
		'O OOO   O OOO',
	],
	[
		'O  O O',
		'O  O  ',
		'OOOO O',
		'O  O O',
		'O  O O',
	],
	[
		'OOOOOO ',
		'  O O  ',
		' O  O  ',
		'O   O  ',
		'    OOO',
	],
	[
		'OOO  O  O',
		'O O  O O ',
		'O O  OO  ',
		'O O  O O ',
		'OOO  O  O',
	],
	];

	function _replaceIcon(value){
		return value === 'O' ? 1 : 0;
	}
	return IconList.map(v => v.map(line => line.replace(/[O\x20]/g, _replaceIcon)).join(':'))
}();

}();
