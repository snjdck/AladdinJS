
'use strict';

Blockly.fieldRegistry.register('field_note', class extends Blockly.FieldNumber {
	static fromJson(options){
		return new this(options['note'] ?? 0, options);
	}

	constructor(opt_value, opt_validator){
		super(opt_value, 0, 0xFFFF, 1, null, opt_validator);
	}

	configure_(config){
		super.configure_(config);
		this.spellcheck_ = false;
		//基准为440，然后每个值等比数列，2 ** (1 / 12)
		this.NOTE_LIST = [
			16, 17, 18, 19, 21, 22, 23, 24, 26, 28, 29, 31,
			33, 35, 37, 39, 41, 44, 46, 49, 52, 55, 58, 62,
			65, 69, 73, 78, 82, 87, 93, 98, 104, 110, 117, 123,
			131, 139, 147, 156, 165, 175, 185, 196, 208, 220, 233, 247,
			262, 277, 294, 311, 330, 349, 370, 392, 415, 440, 466, 494,
			523, 554, 587, 622, 659, 698, 740, 784, 831, 880, 932, 988,
			1047, 1109, 1175, 1245, 1319, 1397, 1480, 1568, 1661, 1760, 1865, 1976,
			2093, 2217, 2349, 2489, 2637, 2794, 2960, 3136, 3322, 3520, 3729, 3951,
			4186, 4435, 4699, 4978, 5274, 5588, 5920, 6272, 6645, 7040, 7459, 7902
		];
		this.KEY_INFO = [
			{name: 'C', pitch: 0},
			{name: 'C♯', pitch: 1, isBlack: true},
			{name: 'D', pitch: 2},
			{name: 'E♭', pitch: 3, isBlack: true},
			{name: 'E', pitch: 4},
			{name: 'F', pitch: 5},
			{name: 'F♯', pitch: 6, isBlack: true},
			{name: 'G', pitch: 7},
			{name: 'G♯', pitch: 8, isBlack: true},
			{name: 'A', pitch: 9},
			{name: 'B♭', pitch: 10, isBlack: true},
			{name: 'B', pitch: 11}
		];
	}

	widgetCreate_(){
		const htmlInput = super.widgetCreate_();
		//htmlInput.setAttribute('readonly', 'true');
		htmlInput.setAttribute('type', 'number');
		return htmlInput;
	}

	updateSize_(){
		super.updateSize_(16);
	}

	_onFocus(){
		if(!this._root){
			return;
		}
		if(this._focus){
			this._focus.style.backgroundColor = this._focus.dataset.color;
		}
		let index = this.NOTE_LIST.indexOf(this.getValue());
		if(index < 0){
			return;
		}
		let item = this._root.children[Math.floor(index / 12)].children[index % 12];
		item.style.backgroundColor = '#b0d6ff';
		this._focus = item;
	}

	doValueUpdate_(newValue){
		super.doValueUpdate_(newValue);
		this._onFocus();
	}

	showInlineEditor_() {
		super.showInlineEditor_(true);

		const block = this.getSourceBlock();
		const dropdownDiv = Blockly.DropDownDiv;

		dropdownDiv.hideWithoutAnimation();
		dropdownDiv.clearContent();

		this._itemList = [];

		let div = document.createElement('div');
		this._root = div;
		div.setAttribute('style', `display:grid;grid-template-columns:repeat(3,auto);gap:4px 1px;`);
		for(let i=0; i<9; ++i){
			div.appendChild(this.createGroup(i));
		}
		dropdownDiv.getContentDiv().appendChild(div);
		dropdownDiv.setColour(block.getColour(), block.getColourTertiary());
		dropdownDiv.showPositionedByField(this);

		this._onFocus();
	}

	createGroup(note){
		let g = document.createElement('div');
		g.setAttribute('style', `display:flex;gap:1px;`);
		for(let info of this.KEY_INFO){
			let e = document.createElement('div');
			if(info.pitch == 0){
				e.appendChild(document.createTextNode('C' + note))
			}
			let color = info.isBlack ? '#323133' : '#fff';
			if(info.isBlack){
				e.setAttribute('style', 'margin:0 -9px;z-index:1;width:17px;height:30px;')
			}else{
				e.setAttribute('style', 'user-select:none;display:flex;justify-content:center;align-items:end;width:22px;height:50px;')
			}
			e.dataset.color = color;
			e.dataset.index = note * 12 + info.pitch;
			e.style.backgroundColor = color;
			e.style.borderRadius = '0 0 4px 4px';
			g.appendChild(e);

			this._itemList.push(e);

			Blockly.browserEvents.bind(e, 'mousedown', this, this._onMouseDown);
		}
		return g;
	}

	_onMouseDown(evt){
		this.setEditorValue_(this.NOTE_LIST[evt.target.dataset.index]);
		this._onMouseUp(evt);
		this._mouseMoveWrapper = Blockly.browserEvents.bind(document, 'mousemove', this, this._onMouseMove);
		this._mouseUpWrapper = Blockly.browserEvents.bind(document, 'mouseup', this, this._onMouseUp);
	}

	_onMouseMove(evt){
		evt.preventDefault();
		let index = this._itemList.indexOf(evt.target);
		if(index < 0)return;
		this.setEditorValue_(this.NOTE_LIST[evt.target.dataset.index]);
	}

	_onMouseUp(evt){
		if(this._mouseMoveWrapper){
			Blockly.browserEvents.unbind(this._mouseMoveWrapper);
			this._mouseMoveWrapper = null;
		}
		if(this._mouseUpWrapper){
			Blockly.browserEvents.unbind(this._mouseUpWrapper);
			this._mouseUpWrapper = null;
		}
	}
})
