#include <node.h>
#include <windows.h>

namespace demo {

using v8::FunctionCallbackInfo;
using v8::Isolate;
using v8::Context;
using v8::Local;
using v8::Object;
using v8::String;
using v8::Number;
using v8::Value;
using v8::ArrayBuffer;
using v8::ArrayBufferCreationMode;

void toggleMouse(const FunctionCallbackInfo<Value>& args){
	Isolate* isolate = args.GetIsolate();
	Local<Context> context = isolate->GetCurrentContext();

	INPUT mouseInput;
	memset(&mouseInput, 0, sizeof(INPUT));
	mouseInput.type = INPUT_MOUSE;
	mouseInput.mi.dwFlags = args[0]->NumberValue(context).FromMaybe(0);
	mouseInput.mi.dx = args[1]->NumberValue(context).FromMaybe(0);
	mouseInput.mi.dy = args[2]->NumberValue(context).FromMaybe(0);
	SendInput(1, &mouseInput, sizeof(INPUT));
}

void getMousePos(const FunctionCallbackInfo<Value>& args){
	POINT point;
	GetCursorPos(&point);

	Isolate* isolate = args.GetIsolate();
	Local<Context> context = isolate->GetCurrentContext();

	Local<Object> obj = Object::New(isolate);
	obj->Set(context, String::NewFromUtf8(isolate, "x").ToLocalChecked(), Number::New(isolate, point.x));//.FromJust();
	obj->Set(context, String::NewFromUtf8(isolate, "y").ToLocalChecked(), Number::New(isolate, point.y));//.FromJust();
	args.GetReturnValue().Set(obj);
}

void getSystemInfo(const FunctionCallbackInfo<Value>& args){
	Isolate* isolate = args.GetIsolate();
	Local<Context> context = isolate->GetCurrentContext();

	args.GetReturnValue().Set(Number::New(isolate, GetSystemMetrics(args[0]->NumberValue(context).FromMaybe(0))));
}

void onGetDesktopWindow(const FunctionCallbackInfo<Value>& args){
	Isolate* isolate = args.GetIsolate();
	args.GetReturnValue().Set(Number::New(isolate, (unsigned long)GetDesktopWindow()));
}

BYTE* createBitmap(size_t w, size_t h){
	BITMAPFILEHEADER bfh;
	memset(&bfh, 0, sizeof(BITMAPFILEHEADER));
	bfh.bfType = 0x4D42;
	bfh.bfOffBits = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);
	bfh.bfSize = bfh.bfOffBits + w * h * 4;

	BITMAPINFOHEADER bih;
	memset(&bih, 0, sizeof(BITMAPINFOHEADER));
	bih.biSize = sizeof(BITMAPINFOHEADER);
	bih.biWidth = w;
	bih.biHeight = h;
	bih.biPlanes = 1;
	bih.biBitCount = 32;
	
	BYTE* pt = new BYTE[bfh.bfSize];
	memcpy(pt, &bfh, sizeof(BITMAPFILEHEADER));
	memcpy(pt + sizeof(BITMAPFILEHEADER), &bih, sizeof(BITMAPINFOHEADER));
	return pt;
}

void onCaptureWindow(const FunctionCallbackInfo<Value>& args){
	HWND hWin = (HWND)(unsigned long)args[0].As<Number>()->Value();
	HDC hDC;
	RECT rect;
	if(args[1]->IsTrue()){
		hDC = GetWindowDC(hWin);
		GetWindowRect(hWin, &rect);
	}else{
		hDC = GetDC(hWin);
		GetClientRect(hWin, &rect);
	}

	long w = rect.right - rect.left;
	long h = rect.bottom - rect.top;

	HDC hMemDC = CreateCompatibleDC(hDC);
	HBITMAP hBmp = CreateCompatibleBitmap(hDC, w, h);
	SelectObject(hMemDC, hBmp);
	BitBlt(hMemDC, 0, 0, w, h, hDC, 0, 0, SRCCOPY);
	
	BYTE* file = createBitmap(w, h);
	GetDIBits(hDC, hBmp, 0, h,
		file + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER),
		(BITMAPINFO*)(file + sizeof(BITMAPFILEHEADER)),
		DIB_RGB_COLORS
	);

	DeleteObject(hBmp);
	DeleteDC(hMemDC);
	ReleaseDC(hWin, hDC);

	args.GetReturnValue().Set(
		ArrayBuffer::New(args.GetIsolate(), file, *(DWORD*)(file+2), ArrayBufferCreationMode::kInternalized)
	);
}

void onFindWindow(const FunctionCallbackInfo<Value>& args){
	Isolate* isolate = args.GetIsolate();
	uint16_t* lpClassName = NULL;
	uint16_t* lpWindowName = NULL;
	if(args[0]->IsString()){
		Local<String> arg0 = args[0].As<String>();
		lpClassName = new uint16_t[arg0->Length() + 1];
		arg0->Write(isolate, lpClassName);
	}
	if(args[1]->IsString()){
		Local<String> arg1 = args[1].As<String>();
		lpWindowName = new uint16_t[arg1->Length() + 1];
		arg1->Write(isolate, lpWindowName);
	}
	args.GetReturnValue().Set(Number::New(isolate, (unsigned long)FindWindowW((LPCWSTR)lpClassName, (LPCWSTR)lpWindowName)));
	if(lpClassName)delete[] lpClassName;
	if(lpWindowName)delete[] lpWindowName;
}

void Initialize(Local<Object> exports)
{
	NODE_SET_METHOD(exports, "toggleMouse", toggleMouse);
	NODE_SET_METHOD(exports, "getMousePos", getMousePos);
	NODE_SET_METHOD(exports, "getSystemInfo", getSystemInfo);
	NODE_SET_METHOD(exports, "GetDesktopWindow", onGetDesktopWindow);
	NODE_SET_METHOD(exports, "CaptureWindow", onCaptureWindow);
	NODE_SET_METHOD(exports, "FindWindow", onFindWindow);
}

NODE_MODULE(NODE_GYP_MODULE_NAME, Initialize)

}//namespace demo