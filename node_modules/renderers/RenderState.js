"use strict";

/*

15 * 15 * 5
gl.blendEquation(mode);
gl.FUNC_ADD
gl.FUNC_SUBTRACT source - dest
gl.FUNC_REVERSE_SUBTRACT dest - source
gl.MIN
gl.MAX

gl.blendFunc(sfactor, dfactor);
gl.ZERO
gl.ONE
gl.SRC_COLOR
gl.ONE_MINUS_SRC_COLOR
gl.DST_COLOR
gl.ONE_MINUS_DST_COLOR
gl.SRC_ALPHA
gl.ONE_MINUS_SRC_ALPHA
gl.DST_ALPHA
gl.ONE_MINUS_DST_ALPHA

gl.CONSTANT_COLOR
gl.ONE_MINUS_CONSTANT_COLOR
gl.CONSTANT_ALPHA
gl.ONE_MINUS_CONSTANT_ALPHA

gl.SRC_ALPHA_SATURATE	
min(AS, 1 - AD), min(AS, 1 - AD), min(AS, 1 - AD), 1

Multiplies the RGB colors by the smaller of either the source alpha value or the value of 1 minus the destination alpha value.
*/

class RenderState
{
	constructor(){
		this.blendEnabled = false;
		this.blendEquation = WebGLRenderingContext.FUNC_ADD;
		this.blendFuncSource = WebGLRenderingContext.ONE;
		this.blendFuncDest = WebGLRenderingContext.ZERO;

		this.depthTestEnabled = false;
		this.depthMask = true;
		this.depthFunc = WebGLRenderingContext.LESS;
	}

	load(gl){
		this.blendEnabled = gl.isEnabled(gl.BLEND);
		this.blendEquation = gl.getParameter(gl.BLEND_EQUATION_RGB);
		this.blendFuncSource = gl.getParameter(gl.BLEND_SRC_RGB);
		this.blendFuncDest = gl.getParameter(gl.BLEND_DST_RGB);

		this.depthTestEnabled = gl.isEnabled(gl.DEPTH_TEST);
		this.depthMask = gl.getParameter(gl.DEPTH_WRITEMASK);
		this.depthFunc = gl.getParameter(gl.DEPTH_FUNC);

		return this;
	}

	isBlendFuncEqual(other){
		return this.blendFuncSource == other.blendFuncSource && this.blendFuncDest == other.blendFuncDest;
	}

	merge(gl, other){
		if(this == other)return;
		depthTestSet(gl, this, other);
		blendSet(gl, this, other);
		if(other.depthTestEnabled){
			depthMaskSet(gl, this, other);
			depthFuncSet(gl, this, other);
		}
		if(other.blendEnabled){
			blendEquationSet(gl, this, other);
			if(!this.isBlendFuncEqual(other)){
				this.blendFuncSource = other.blendFuncSource;
				this.blendFuncDest = other.blendFuncDest;
				gl.blendFunc(this.blendFuncSource, this.blendFuncDest);
			}
		}
	}
}

const propSetFn = (key, updateFn) => (gl, source, dest) => {
	let v = dest[key];
	if(source[key] != v){
		source[key] = v;
		updateFn(gl, v);
	}
};

const blendSet = propSetFn("blendEnabled", (gl, v) => v ? gl.enable(gl.BLEND) : gl.disable(gl.BLEND));
const blendEquationSet = propSetFn("blendEquation", (gl, v) => gl.blendEquation(v));

const depthTestSet = propSetFn("depthTestEnabled", (gl, v) => v ? gl.enable(gl.DEPTH_TEST) : gl.disable(gl.DEPTH_TEST));
const depthMaskSet = propSetFn("depthMask", (gl, v) => gl.depthMask(v));
const depthFuncSet = propSetFn("depthFunc", (gl, v) => gl.depthFunc(v));

module.exports = RenderState;