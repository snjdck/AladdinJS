
/** lines intersect, but their segments do not */
const LINES_INTERSECT		 = 0x01;

/** both line segments bisect each other */
const SEGMENTS_INTERSECT	 = 0x02;

/** line segment B is crossed by line A */
const A_BISECTS_B			 = 0x04;

/** line segment A is crossed by line B */
const B_BISECTS_A			 = 0x08;

/** the lines are paralell */
const PARALELL			 = 0x10;

/** both lines are parallel and overlap each other */
const COLLINEAR			 = 0x20;

/**
 * @param pa line1A
 * @param pb line1B
 * @param pc line2A
 * @param pd line2B
 * @param outputIntersectPoint 交点(如果有)
 * @return see class const of this
 */		
function Judge(pa, pb, pc, pd, outputIntersectPoint=null){
	var ab = pb.subtract(pa);
	var cd = pd.subtract(pc);
	var ac = pc.subtract(pa);
	
	var denom = crossProd(ab, cd);
	var u0 = crossProd(ac, cd);
	var u1 = crossProd(ac, ab);
	
	if(0 == denom){
		if(0 == u0 && 0 == u1){
			return COLLINEAR;
		}
		return PARALELL;
	}
	
	/** |ap| / |ab| */
	u0 /= denom;
	
	/** |cp| / |cd| */
	u1 /= denom;
	
	var x = pa.x + u0 * ab.x;
	var y = pa.y + u0 * ab.y;
	
	if(null != outputIntersectPoint){
		outputIntersectPoint.x = x;
		outputIntersectPoint.y = y;
	}
	
	var isU0Valid = (0 <= u0 && u0 <= 1);
	var isU1Valid = (0 <= u1 && u1 <= 1);
	
	if(isU0Valid && isU1Valid){
		return SEGMENTS_INTERSECT;
	}
	
	if (isU1Valid) return A_BISECTS_B;
	if (isU0Valid) return B_BISECTS_A;
	
	return LINES_INTERSECT;
}