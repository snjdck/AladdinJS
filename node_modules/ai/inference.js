
const {range, arrangement, permutation, combination} = require('utils/combination');

function* arrangementTest(stateCount, condList, resultTest){
	if(resultTest == null){
		resultTest = condList.length;
	}
	if(typeof resultTest == 'number'){
		let value = resultTest;
		resultTest = v => v == value;
	}
	for(let info of arrangement(range(stateCount))){
		if(resultTest(condList.reduce((sum, f) => sum + f(info), 0), info)){
			yield info;
		}
	}
}

function* permutationTest(stateCount, condList, resultTest){
	if(resultTest == null){
		resultTest = condList.length;
	}
	if(typeof resultTest == 'number'){
		let value = resultTest;
		resultTest = v => v == value;
	}
	for(let info of permutation(condList.slice().fill(range(stateCount)))){
		if(resultTest(condList.reduce((sum, f) => sum + f(info), 0))){
			yield info;
		}
	}
}

console.log(...permutationTest(2, [
	v => v[0] != (v.slice(1).reduce((a, b) => a + b, 0) == 1),
	v => v[1] != (v.slice(1).reduce((a, b) => a + b, 0) == 2),
	v => v[2] != (v.reduce((a, b) => a + b, 0) < 5),
	v => v[3] != (v[0] == 1 && v[1] == 1),
	v => v[4] != (v[2] == 1 && v[0] == 0)
]))

console.log(...arrangementTest(4, [
	v => v[0] % 2 != (v[1] < v[2]),
	v => v[1] % 2 != (v[1] < v[0]),
	v => v[2] % 2 != (v[1] != 1),
	v => v[3] % 2 != (v[3] == 3),
]))

console.log(...arrangementTest(6, [
	v => v[5] == 2,
	v => v[4] != 5,
	v => v[0] == 4,
	v => v[3] >= 2 && v[3] <= 3,
	v => v[2] > 0 && v[2] < 5,
]))
//[4,5,1,3,0,2]
console.log(...permutationTest(2, [
	v => v[1] + v[2] == 1,
	v => v[2] + v[3] < 2,
	v => v[4] + v[3] == 1 && v[0] + v[3] == 1,
	v => v[2] + v[4] > 1,
	v => v[0] + v[1] == 1,
], 4))
//[01010]
console.log(...permutationTest(2, [//ç”·1å¥³0
	v => v.slice(1).reduce((a,b)=>a+b,0) == 3,
	v => v[0] == 1,
	v => v[2] == 0 && v.slice(3).reduce((a,b)=>a+b,0) == 2,
	v => v.slice(4).reduce((a,b)=>a+b,0) == 2,
	v => v.slice(0, 4).reduce((a,b)=>a+b,0) == 2,
	v => v[5] == 0,
	v => v[6] == 1
]))
//[1100101]
console.log(...arrangementTest(3, [//wise=0
	v => v[0] ? 0x1000 : 0x01,
	v => v[1] ? 0x0200 : 0x20,
	v => v[2] ? 0x4000 : 0x40,
], (v, info) => {
	console.log(info,v.toString(16))
	for(let t of [1,2,4]){
		if((v >> 12) == t && (v & 0xf) == t){
			return true
		}
		if((v >> 8) == t && (v >> 4 & 0xf) == t){
			return true
		}
	}
}))
