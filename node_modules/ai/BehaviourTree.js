'use strict';
//https://www.behaviac.com/tutorial_2_more_nodes/
var tree = {
	"name": "",
	"indexchild": 1,
	"height": 50,
	"textwidth": 28,
	"width": 56,
	"children": [{
		"name": "Selector_1",
		"indexchild": 1,
		"height": 50,
		"textwidth": 54,
		"width": 82,
		"children": [
			{
				"name": "Filter_1",
				"indexchild": 1,
				"height": 50,
				"textwidth": 55,
				"width": 83,
				"children": [{
					"name": "Sequence_1",
					"indexchild": 1,
					"height": 50,
					"textwidth": 62,
					"width": 90,
					"children": [{
							"name": "Action_2",
							"indexchild": 1,
							"height": 50,
							"textwidth": 51,
							"width": 79,
							"level": 5,
							"func": "BuySugar",
							"y": 384,
							"selected": false,
							"valid": true,
							"x": 213.15972180497,
							"sleep": false,
							"id": "node8",
							"sim": "",
							"textlines": 3,
							"type": "Action",
							"levelindex": 5
						},
						{
							"name": "Action_3",
							"indexchild": 2,
							"height": 50,
							"textwidth": 44,
							"width": 72,
							"level": 5,
							"func": "BuyCar",
							"y": 384,
							"selected": false,
							"valid": true,
							"x": 328.65972180497,
							"sleep": false,
							"id": "node9",
							"sim": "",
							"textlines": 3,
							"type": "Action",
							"levelindex": 6
						}
					],
					"level": 4,
					"func": "",
					"y": 288,
					"selected": false,
					"valid": true,
					"x": 261.90972180497,
					"sleep": false,
					"id": "node7",
					"sim": "",
					"textlines": 3,
					"type": "Sequence",
					"levelindex": 4
				}],
				"level": 3,
				"func": "HasMoney",
				"y": 192,
				"selected": false,
				"valid": true,
				"x": 265.40972180497,
				"sleep": false,
				"id": "node2",
				"sim": "",
				"textlines": 3,
				"type": "Filter",
				"levelindex": 3
			},
			{
				"name": "Sleepy",
				"indexchild": 2,
				"height": 50,
				"textwidth": 49,
				"width": 117,
				"level": 3,
				"func": "Rest",
				"y": 192,
				"selected": false,
				"valid": true,
				"x": 363.75957639191,
				"sleep": false,
				"id": "node6",
				"sim": "",
				"textlines": 3,
				"type": "Condition",
				"levelindex": 7
			},
			{
				"name": "Action_3",
				"indexchild": 3,
				"height": 50,
				"textwidth": 47,
				"width": 75,
				"level": 3,
				"func": "GoHome",
				"y": 192,
				"selected": true,
				"valid": true,
				"x": 515.59027819503,
				"sleep": false,
				"id": "node5",
				"sim": "",
				"textlines": 3,
				"type": "Action",
				"levelindex": 8
			}
		],
		"level": 2,
		"func": "",
		"y": 96,
		"selected": false,
		"valid": true,
		"x": 387,
		"sleep": false,
		"id": "node1",
		"sim": "",
		"textlines": 3,
		"type": "Selector",
		"levelindex": 2
	}],
	"level": 1,
	"func": "",
	"selected": false,
	"valid": true,
	"y": 0,
	"x": 400,
	"id": "__start__",
	"sleep": false,
	"textlines": 3,
	"type": "Start",
	"levelindex": 1
};

const exec = (dict => (node, ctx) => dict[node.type](node, ctx))({
	Start(node, ctx){
		return exec(node.children[0], ctx);
	},
	Selector(node, ctx){
		for(let child of node.children){
			if(exec(child, ctx)){
				return true;
			}
		}
		return false;
	},
	Sequence(node, ctx){
		for(let child of node.children){
			if(!exec(child, ctx)){
				return false;
			}
		}
		return true;
	},
	Parallel(node, ctx){
		let result = false;
		for(let child of node.children){
			result = exec(child, ctx);
		}
		return result;
	},
	RandomSelector(node, ctx){
		const children = node.children.slice();
		while(children.length > 0){
			const index = Math.floor(Math.random() * children.length);
			const child = children.splice(index, 1)[0];
			if(exec(child, ctx))return true;
		}
		return false;
	},
	Loop(node, ctx){
		return true;
	},
	Filter(node, ctx){
		if(!ctx[node.func]())return false;
		exec(node.children[0], ctx);
		return true;
	},
	Condition(node, ctx){
		if(!ctx[node.name]())return false;
		ctx[node.func]();
		return true;
	},
	Action(node, ctx){
		ctx[node.func]();
		return true;
	},
	Successor(node, ctx){
		exec(node.children[0], ctx);
		return true;
	},
	Failure(node, ctx){
		exec(node.children[0], ctx);
		return false;
	},
	Negate(node, ctx){
		return !exec(node.children[0], ctx);
	},
});

exec(tree, {HasMoney(){
	return true;
},Sleepy(){
	return false;
},Rest(){
	console.log('rest')
},GoHome(){
	console.log('go home')
}, BuyCar() {
 console.log('buy car') 
}, BuySugar() {
 console.log('buy sugar') },
})
