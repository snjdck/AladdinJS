"use strict";

class ItemSlot{
	constructor(){
		this.itemList = [];
		this.price = 0;
	}

	clear(){
		this.itemList.length = 0;
		this.price = 0;
	}

	add(item){
		this.itemList.push(item);
		this.price += item.price;
	}

	copyFrom(target){
		this.itemList.length = 0;
		this.itemList.push(...target.itemList);
		this.price = target.price;
	}
}

const slotList = [];

function Pack(itemList, capacity){
	if(null == itemList || itemList.length < 1){
		return null;
	}
	for(let i=slotList.length-1; i>=0; --i){
		slotList[i].clear();
	}
	for(let i=slotList.length; i<=capacity; ++i){
		slotList[i] = new ItemSlot();
	}
	for(let item of itemList){
		this.call(slotList, item, capacity);
	}
	return slotList[capacity].itemList.slice();
}

function onZeroOne(item, capacity){
	for(var totalWeight=capacity; totalWeight>=item.weight; --totalWeight){
		var itemSlotNotUse = this[totalWeight];
		var itemSlotUse = this[totalWeight-item.weight];
		if(itemSlotNotUse.price < itemSlotUse.price + item.price){
			itemSlotNotUse.copyFrom(itemSlotUse);
			itemSlotNotUse.add(item);
		}
	}
}

function onUnbounded(item, capacity){
	for(var totalWeight=item.weight; totalWeight<=capacity; ++totalWeight){
		var itemSlotNotUse = this[totalWeight];
		var itemSlotUse = this[totalWeight-item.weight];
		if(itemSlotNotUse.price < itemSlotUse.price + item.price){
			itemSlotNotUse.copyFrom(itemSlotUse);
			itemSlotNotUse.add(item);
		}
	}
}

exports.ZeroOnePack   = Pack.bind(onZeroOne);
exports.UnboundedPack = Pack.bind(onUnbounded);
