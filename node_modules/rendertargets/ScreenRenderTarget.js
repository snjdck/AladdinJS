"use strict";

const RenderTarget = require("./RenderTarget");

class ScreenRenderTarget extends RenderTarget{
	onDispose(gl){
		gl.deleteTexture(this.colorBuffer);
		gl.deleteTexture(this.depthBuffer);
		this.colorBuffer = null;
		this.depthBuffer = null;
	}

	onCreate(gl){
		this.colorBuffer = gl.createTexture();
		this.depthBuffer = gl.createTexture();

		gl.bindTexture(gl.TEXTURE_2D, this.colorBuffer);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		
		gl.bindTexture(gl.TEXTURE_2D, this.depthBuffer);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT32F, this.width, this.height, 0, gl.DEPTH_COMPONENT, gl.FLOAT, null);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

		gl.bindTexture(gl.TEXTURE_2D, null);

		this.attachTexture2D(gl.COLOR_ATTACHMENT0, this.colorBuffer);
		this.attachTexture2D(gl.DEPTH_ATTACHMENT,  this.depthBuffer);
	}
}

module.exports = ScreenRenderTarget;