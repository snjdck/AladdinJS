
const listenPacket = require('../listenPacket');
const {doAsyncWait} = require('../doAsyncWait');

const factory = (nextReqId, init, match) => (socket, codec, timeout, packet) => {
	init(packet, nextReqId);
	socket.write(packet.toBytes(codec.encode));
	return doAsyncWait(socket, 'packet', timeout,
		v => match(packet, v, nextReqId) && v.payload && codec.decode(v.payload)
	);
};

const config = [[
	(reqId = 0) => () => reqId = reqId % 0xFFFF + 1,
	(packet, nextReqId) => packet.reqId = nextReqId(),
	(packet,   {reqId}) => packet.reqId === reqId
],[
	() => new Map(),
	(packet, nextReqId) => {
		packet.reqId = nextReqId.get(packet.msgId) || 0;
		nextReqId.set(packet.msgId, packet.reqId + 1);
	},
	(packet, {msgId}, nextReqId) => {
		if(packet.msgId !== msgId)
			return false;
		if(packet.reqId !== 0){
			--packet.reqId;
			return false;
		}
		nextReqId.set(msgId, nextReqId.get(msgId) - 1);
		return true;
	}
]];

module.exports = function(socket, Packet, codec='json', type=0, timeout=10){
	codec = require(`../codec/${codec}`);
	listenPacket(socket, Packet);
	socket.on('packet', ({reqId, msgId, payload}) => {
		if(reqId !== 0)return;
		socket.emit('notify', msgId, payload && codec.decode(payload));
	});
	const [nextReqId, init, match] = config[type];
	const request = factory(nextReqId(), init, match);
	return (...args) => request(socket, codec, timeout, new Packet(...args));
};
