
function listenPacket(socket, Packet){
	let buffer = Buffer.alloc(0);
	socket.on('data', data => {
		buffer = Buffer.concat([buffer, data]);
		let offset = 0;
		for(;;){
			let packet = Packet.cut(buffer, offset);
			if(!packet)break;
			offset += packet.length;
			socket.emit('packet', Packet.decode(packet));
		}
		if(offset == 0)return;
		buffer = buffer.slice(offset);
	});
}

const nextReqId = (reqId => () => reqId = reqId % 0xFFFF + 1)(0);

function request(socket, codec, timeout, packet){
	packet.reqId = nextReqId();
	socket.write(packet.toBytes(codec.encode));
	return new Promise((resolve, reject) => {
		const timer = setTimeout(() => {
			socket.off('packet', onPacket);
			reject('request timeout!');
		}, timeout * 1000);
		const onPacket = ({reqId, payload}) => {
			if(reqId !== packet.reqId)
				return;
			socket.off('packet', onPacket);
			clearTimeout(timer);
			resolve(payload && codec.decode(payload));
		};
		socket.on('packet', onPacket);
	});
}

module.exports = function(socket, Packet, codec='json', timeout=10){
	codec = require(`../codec/${codec}`);
	listenPacket(socket, Packet);
	socket.on('packet', ({reqId, msgId, payload}) => {
		if(reqId !== 0)return;
		socket.emit('notify', msgId, payload && codec.decode(payload));
	});
	return (...args) => request(socket, codec, timeout, new Packet(...args));
};
