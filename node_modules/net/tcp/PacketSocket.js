import {Socket} from 'net';
import EventEmitter from 'events';

function listenPacket(socket, Packet){
	let buffer = Buffer.alloc(0);
	socket.on('data', data => {
		buffer = Buffer.concat([buffer, data]);
		let offset = 0;
		for(;;){
			let packet = Packet.cut(buffer, offset);
			if(!packet)break;
			offset += packet.length;
			socket.emit('packet', packet);
		}
		if(offset == 0)return;
		buffer = buffer.slice(offset);
	});
}

function* reqIdGen(initValue=1){
	let reqId = initValue;
	for(;;){
		yield reqId;
		reqId = (reqId < 0xFFFF) ? reqId + 1 : initValue;
	}
}

async function request(socket, packet, timeout=10){
	if(!socket.__reqId__){
		socket.__reqId__ = reqIdGen();
	}
	packet.reqId = socket.__reqId__.next().value;
	socket.write(packet.toBytes());
	return new Promise((resolve, reject) => {
		const timer = setTimeout(() => {
			socket.off('packet', onPacket);
			reject();
		}, timeout * 1000);
		function onPacket(result){
			if(result.reqId !== packet.reqId){
				return;
			}
			socket.off('packet', onPacket);
			clearTimeout(timer);
			resolve(result);
		}
		socket.on('packet', onPacket);
	});
}

export {
	listenPacket,
	request
};