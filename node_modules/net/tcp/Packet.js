
class Packet
{
	static cut(buffer, offset=0){
		let count = buffer.length - offset;
		if(count < 2)return;
		let packetLen = buffer.readUInt16LE(offset);
		if(count < packetLen)return;
		return buffer.slice(offset, offset+packetLen);
	}

	static decode(buffer){
		let reqId = buffer.readUInt16LE(2);
		let usrId = buffer.readUInt16LE(4);
		let msgId = buffer.readUInt16LE(6);
		let msgData = buffer.slice(8);
		let packet = new this(msgId, msgData, usrId);
		packet.reqId = reqId;
		return packet;
	}

	constructor(msgId, msgData, usrId=0){
		this.usrId = usrId;
		this.msgId = msgId;
		this.msgData = msgData;
		this.reqId = 0;
	}

	toBytes(){
		let buffer = Buffer.alloc(8);
		buffer.writeUInt16LE(this.reqId, 2);
		buffer.writeUInt16LE(this.usrId, 4);
		buffer.writeUInt16LE(this.msgId, 6);
		if(this.msgData){
			let data = Buffer.isBuffer(this.msgData) ? this.msgData : Buffer.from(JSON.stringify(this.msgData));
			buffer = Buffer.concat([buffer, data]);
		}
		buffer.writeUInt16LE(buffer.length, 0);
		return buffer;
	}

	jsonData(){
		return this.msgData && JSON.parse(this.msgData);
	}
}

export default Packet;