
const EventEmitter = require('events');
const net = require('net');
const url = require('url');
const Packet = require('./Packet');
const encode = require('./encode');
const listenPacket = require('net/listenPacket');

function onPacket(data){
	if(data == null)return;
	let evt = (typeof data == 'number') ? 'close' : 'message';
	this.emit(evt, data);
}

const createRequest = (request => info => {
	request[0] = `GET ${info.href} HTTP/1.1`;
	request[1] = `Host: ${info.host}`;
	return request.join('\r\n');
})([null, null, 'Pragma: no-cache', 'Cache-Control: no-cache', 'Connection: Upgrade', 'Upgrade: websocket', 'Sec-WebSocket-Version: 13', 'Sec-WebSocket-Key: Wr3bIGaaV2FrjvYSeRK5yQ==', '', '']);

class WebSocketClient extends EventEmitter
{
	static connect(path, callback){
		let info = url.parse(path);
		net.connect(info.port, info.hostname, function(){
			this.once('data', data => callback(new WebSocketClient(this, true)));
			this.write(createRequest(info));
		});
	}

	constructor(socket, useMask){
		super();
		this.socket = socket;
		this.useMask = useMask;
		listenPacket(socket, Packet, onPacket.bind(this));
		socket.on('error', error => {});
	}

	send(data){
		this.socket.write(encode(data, this.useMask));
	}

	ping(){
		this.socket.write(ping);
	}

	pong(){
		this.socket.write(pong);
	}
}

const ping = Buffer.from([0x89, 0]);
const pong = Buffer.from([0x8A, 0]);

module.exports = WebSocketClient;