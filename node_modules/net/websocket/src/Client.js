import EventEmitter from 'events';
import encode from './encode';

class WebSocketClient extends EventEmitter
{
	constructor(socket){
		super();
		this.socket = socket;
		handleSockRecv.call(this);
	}

	send(data){
		this.socket.write(encode(data));
	}
}

function handleSockRecv(){
	let buffer = Buffer.alloc(0);
	let begin = 0;
	this.socket.on('data', chunk => {
		const end = buffer.length + chunk.length;
		buffer = Buffer.concat([buffer, chunk], end);
		for(;;){
			if(end - begin < 2)
				break;
			const byte1 = buffer.readUInt8(begin);
			const byte2 = buffer.readUInt8(begin+1);

			this.finFlag	= byte1 >> 7 == 1;
			this.opCode		= byte1 & 0x0F;
			const hasMask	= byte2 >> 7 == 1;
			let payloadLen	= byte2 & 0x7F;

			const headLen = calcHeadLen(hasMask, payloadLen);
			if(end - begin < headLen)
				break;
			payloadLen = readPayloadLen(buffer, payloadLen, begin);
			if(end - begin < headLen + payloadLen)
				break;
			begin += headLen;

			if(hasMask)
				decodePayload(buffer, begin, payloadLen);
			parsePayload.call(this, buffer, begin, payloadLen);
			begin += payloadLen;
		}
		if(begin > 0){
			buffer = buffer.slice(begin);
			begin = 0;
		}
	});
}

function calcHeadLen(hasMask, payloadLen){
	let headLen = (payloadLen < 126) ? 2 : (payloadLen > 126) ? 10 : 4;
	return hasMask ? headLen + 4 : headLen;
}

function readPayloadLen(packet, payloadLen, offset){
	if(payloadLen <  126)	return payloadLen;
	if(payloadLen == 126)	return packet.readUInt16BE(offset+2);
	return packet.readUInt32BE(offset+6);
}

function decodePayload(packet, offset, payloadLen){
	let maskOffset = offset - 4;
	for(let i=0; i<payloadLen; ++i){
		packet[offset + i] ^= packet[maskOffset + i % 4];
	}
}

function parsePayload(buffer, begin, payloadLen){
	switch(this.opCode){
		case 0:
			break;
		case 1://text
			this.emit('message', buffer.toString('utf8', begin, begin + payloadLen));
			break;
		case 2://binary
			this.emit('message', buffer.slice(begin, begin + payloadLen));
			break;
		case 8://close
			this.emit("close", buffer.readUInt16BE(begin));
			break;
		case 9://ping
			break;
		case 10://pong
			break;
		default:
			console.error(`opCode "${opCode}" not accept!`);
	}
}

export default WebSocketClient;