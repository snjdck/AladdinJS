
const EventEmitter = require('events');
const http = require('http');
const crypto = require('crypto');
const WebSocketClient = require('./Client');

class WebSocketServer extends EventEmitter
{
	constructor(){
		super();
		this.server = new http.Server();
		this.server.on('upgrade', onUpgrade.bind(this));
	}

	listen(port, host){
		this.server.listen(port, host || '127.0.0.1');
	}
}

function onUpgrade(request, socket, head){
	console.log(request.url, request.headers);
	if(request.method !== 'GET'){
		return;
	}
	const headers = request.headers;
	if(headers.connection !== 'Upgrade' || headers.upgrade !== 'websocket'){
		return;
	}
	let key = headers['sec-websocket-key'] + '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';
	key = crypto.createHash('sha1').update(key).digest('base64');
	response[3] = `sec-websocket-accept: ${key}`;
	socket.write(response.join('\r\n'));
	this.emit('connection', new WebSocketClient(socket));
}

const response = [
	'HTTP/1.1 101 Switching Protocols',
	'connection: Upgrade',
	'upgrade: websocket',
	null,
	'',
	''
];

module.exports = WebSocketServer;