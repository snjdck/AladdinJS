
function encode(data){
	const isBuffer = Buffer.isBuffer(data);
	const payloadLen = isBuffer ? data.length : Buffer.byteLength(data);
	const headLen = calcHeadLen(payloadLen);
	const packet = Buffer.allocUnsafe(headLen + payloadLen);
	writePayloadLen(packet, payloadLen);
	if(isBuffer){
		packet.writeUInt8(0x82, 0);
		data.copy(packet, headLen);
	}else{
		packet.writeUInt8(0x81, 0);
		packet.write(data, headLen);
	}
	return packet;
}

function calcHeadLen(payloadLen, hasMask=false){
	let headLen = (payloadLen < 126) ? 2 : (payloadLen < 0x10000) ? 4 : 10;
	return hasMask ? headLen + 4 : headLen;
}

function writePayloadLen(packet, payloadLen){
	if(payloadLen < 126){
		packet.writeUInt8(payloadLen, 1);
	}else if(payloadLen < 0x10000){
		packet.writeUInt8(126, 1);
		packet.writeUInt16BE(payloadLen, 2);
	}else{
		packet.writeUInt8(127, 1);
		packet.writeUInt32BE(0, 2);
		packet.writeUInt32BE(payloadLen, 6);
	}
}

module.exports = encode;