'use strict';

const {URL} = require('url');
const {sendCookie, recvCookie} = require('./cookie');

function listenEvt(target, callback){
	let result = [];
	target.on('data', chunk => result.push(chunk));
	target.on('end', () => callback(Buffer.concat(result)));
}

const castType = function(){
	const self = v => v;
	const text = v => v.toString();
	const json = v => JSON.parse(v.toString());
	const dict = {text, json};
	return v => dict[v] || self;
}()

const castBody = function(){
	const self = v => v;
	const dict = {
		'application/json': JSON.stringify,
		'application/x-www-form-urlencoded': v => new URLSearchParams(v).toString(),
	};
	return v => dict[v] || self;
}()

function load(url, {method, body, headers, query, responseType='text'}={}){
	if(headers && body && !Buffer.isBuffer(body) && typeof body != 'string'){
		body = castBody(headers['Content-Type'])(body);
	}
	return new Promise(function(resolve, reject){
		const info = new URL(url);
		for(let k in query)info.searchParams.append(k, query[k]);
		const http = require(info.protocol.slice(0, -1));
		const request = http.request({method, headers,
			path: info.pathname + info.search,
			host: info.hostname,
			port: info.port
		}, response => {
			if(response.statusCode == 200){
				recvCookie(response, info);
				listenEvt(response, resolve);
			}else{
				reject(response.statusMessage);
			}
		});
		sendCookie(request, info);
		request.on('error', reject);
		request.end(body);
	}).then(castType(responseType));
}

module.exports = load;
