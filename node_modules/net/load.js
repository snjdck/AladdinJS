'use strict';

const {URL} = require('url');
const {sendCookie, recvCookie} = require('./cookie');

function listenEvt(target, callback){
	let result = [];
	target.on('data', chunk => result.push(chunk));
	target.on('end', () => callback(Buffer.concat(result)));
}

const castType = function(){
	const self = v => v;
	const text = v => v.toString();
	const json = v => JSON.parse(v.toString());
	const dict = {text, json};
	return v => dict[v] || self;
}()

const castBody = function(){
	const BOUNDARY = '----WebKitFormBoundaryJogJuHTlZmoELETx';
	const newFormBody = function(FORM_BEGIN, FORM_END, FORM_RETURN){
		function* gen(form){
			for(let k in form){
				let v = form[k];
				yield FORM_BEGIN;
				if(Buffer.isBuffer(v)){
					yield Buffer.from(`Content-Disposition: form-data; name="${k}"; filename="blob"\nContent-Type: image/jpeg\n\n`);
					yield v;
					yield FORM_RETURN;
				}else{
					yield Buffer.from(`Content-Disposition: form-data; name="${k}"\n\n${v}\n`);
				}
			}
			yield FORM_END;
		}
		return form => Buffer.concat(Array.from(gen(form)));
	}(Buffer.from(`--${BOUNDARY}\n`), Buffer.from(`--${BOUNDARY}--`), Buffer.from('\n'));
	return function(headers, body){
		const contentType = headers['Content-Type'];
		if(contentType == 'application/json')return JSON.stringify(body);
		if(contentType == 'application/x-www-form-urlencoded')return new URLSearchParams(body).toString();
		if(contentType == 'multipart/form-data'){
			headers['Content-Type'] = `multipart/form-data; boundary=${BOUNDARY}`;
			return newFormBody(body);
		}
		return body;
	}
}()

function load(url, {method, body, headers, query, responseType='text'}={}){
	if(headers && body && !Buffer.isBuffer(body) && typeof body != 'string'){
		body = castBody(headers, body);
	}
	return new Promise(function(resolve, reject){
		const info = new URL(url);
		for(let k in query)info.searchParams.append(k, query[k]);
		const http = require(info.protocol.slice(0, -1));
		const request = http.request({method, headers,
			path: info.pathname + info.search,
			host: info.hostname,
			port: info.port
		}, response => {
			if(response.statusCode == 200){
				recvCookie(response, info);
				listenEvt(response, resolve);
			}else{
				reject(response.statusMessage);
			}
		});
		sendCookie(request, info);
		request.on('error', reject);
		request.end(body);
	}).then(castType(responseType));
}

module.exports = load;
