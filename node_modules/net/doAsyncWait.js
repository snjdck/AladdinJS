'use strict';

const {once} = require('events');

const doAsyncWait = (target, event, timeout, match, callback) => new Promise((resolve, reject) => {
	const timer = setTimeout(() => {
		target.off(event, onCall);
		reject('timeout');
	}, timeout * 1000);
	const onCall = (...args) => {
		if(!match(...args))return;
		target.off(event, onCall);
		clearTimeout(timer);
		resolve(callback(...args));
	};
	target.on(event, onCall);
});

function waitOnce(target, event, timeout=1000){
	const ac = new AbortController();
	const timer = setTimeout(() => ac.abort(), timeout);
	return once(target, event, {signal:ac.signal}).then(v => clearTimeout(timer) || v);
}

exports.doAsyncWait = doAsyncWait;
exports.waitOnce = waitOnce;
