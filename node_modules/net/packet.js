'use strict';

const composeFactory = (concatFn, checkFn, valueFn) => (...args) => data => {
	concatFn(data, ...args);
	if(!checkFn(...args))return false;
	return valueFn ? valueFn(...args) : args[0];
}

function listenData(target, evtType, checker, handler){
	target.addEventListener(evtType, function callback(evt){
		const result = checker(evt);
		if(!result)return;
		target.removeEventListener(evtType, callback);
		handler(result);
	});
}

async function listenReadableStream(stream, handler){
	const reader = stream.getReader();
	try{
		for(;;){
			const {done, value} = await reader.read();
			if(done)throw new Error();
			const result = handler(value);
			if(result)return result;
		}
	}finally{
		reader.releaseLock();
	}
}

function writeWritableStream(stream, value){
	const writer = stream.getWriter();
	return writer.write(value).finally(() => writer.releaseLock());
}

exports.composeFactory = composeFactory;
exports.listenData = listenData;
exports.listenReadableStream = listenReadableStream;
exports.writeWritableStream = writeWritableStream;
