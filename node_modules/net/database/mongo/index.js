
const bson = require('net/codec/bson');
const net = require('net');

function connect(host='127.0.0.1', port=27017){
	return new Promise(resolve => {
		net.connect(port, host, function(){
			listenSocket(this);
			resolve(this);
		});
	});
}

function listenSocket(socket){
	let buffer = Buffer.allocUnsafe(0);
	socket.on('data', data => {
		buffer = Buffer.concat([buffer, data]);
		let remain = buffer.length;
		let offset = 0;
		while(remain >= 4){
			const size = buffer.readInt32LE(offset);
			if(remain < size)break;
			socket.emit('packet', buffer.slice(offset, offset + size));
			offset += size;
			remain -= size;
		}
		if(offset > 0){
			buffer = buffer.slice(offset);
		}
	});
}
/*
function createHeader(opCode, requestID=0){
	let header = Buffer.allocUnsafe(16);
	header.writeInt32LE(requestID, 4);
	header.writeInt32LE(opCode, 12);
	return header;
}

function createPacket(packet, opCode, requestID=0){
	packet.unshift(createHeader(opCode, requestID));
	packet = Buffer.concat(packet.filter(Boolean));
	packet.writeInt32LE(packet.length, 0);
	return packet;
}

function castInt32(...values){
	let buffer = Buffer.allocUnsafe(values.length << 2);
	for(let i=values.length-1; i>=0; --i){
		buffer.writeInt32LE(values[i], i << 2);
	}
	return buffer;
}

function db_kill_cursors(...cursors){
	return createPacket([
		castInt32(0, cursors.length),
		...cursors
	], OP_KILL_CURSORS);
}

function db_query(path, numberToSkip, numberToReturn, query, returnFieldsSelector, requestID){
	return createPacket([
		castInt32(0),
		Buffer.from(path),
		Buffer.allocUnsafe(1).fill(0),
		castInt32(numberToSkip, numberToReturn),
		bson.encode(query),
		returnFieldsSelector && bson.encode(returnFieldsSelector)
	], OP_QUERY, requestID);
}

function db_delete(path, selector, singleRemoveFlag=false){
	return createPacket([
		castInt32(0),
		Buffer.from(path),
		Buffer.allocUnsafe(1).fill(0),
		castInt32(singleRemoveFlag ? 1 : 0),
		bson.encode(selector)
	], OP_DELETE);
}
//*/

const db_query = function(){
	let requestID = 0;
	return function(query){
		requestID = (requestID + 1) % 0x80000000;
		let packet = Buffer.concat([
			Buffer.allocUnsafe(21).fill(0),
			bson.encode(query)
		]);
		packet.writeInt32LE(packet.length, 0);
		packet.writeInt32LE(requestID, 4);
		packet.writeInt32LE(2013, 12);
		this.write(packet);
		return new Promise(resolve => {
			const callback = data => {
				if(packet.readInt32LE(4) !== data.readInt32LE(8))return;
				this.off('packet', callback);
				resolve(bson.decode(data.slice(21)));
			}
			this.on('packet', callback);
		});
	}
}();

function db_delete(path, deletes){
	let [db, name] = path.split('.');
	let query = {'delete': name, '$db': db, deletes};
	return db_query.call(this, query);
}

function db_insert(path, ...documents){
	let [db, name] = path.split('.');
	let query = {'insert': name, '$db': db, documents};
	return db_query.call(this, query);
}

function db_update(path, ...updates){
	let [db, name] = path.split('.');
	let query = {'update': name, '$db': db, updates};
	return db_query.call(this, query);
}

function db_find(){

}

function db_getMore(){

}


async function main(){
	let socket = await connect();
	let response = await db_query.call(socket, {"find":'users','$db':'test'});
	console.log(JSON.stringify(response));
}
//main();