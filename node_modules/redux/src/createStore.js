
function createStore(reducer, initState, enhancer)
{
	if(initState instanceof Function && enhancer === undefined){
		enhancer = initState;
		initState = undefined;
	}
	if(enhancer){
		return enhancer(createStore)(reducer, initState);
	}

	const listenerList = new Set();
	let currState = initState;
	let isDispatching = false;

	function getState(){
		return currState;
	}

	function subscribe(listener){
		listenerList.add(listener);
		let unsubscribeFlag = false;
		return function(){
			if(unsubscribeFlag)return;
			unsubscribeFlag = true;
			listenerList.delete(listener);
		};
	}

	function dispatch(action){
		console.assert(!isDispatching, 'Reducers may not dispatch actions!');
		try{
			isDispatching = true;
			currState = reducer(currState, action);
		}finally{
			isDispatching = false;
		}
		Array.from(listenerList).forEach(fn => fn());
		return action;
	}

	dispatch({type: '@redux/init'});

	return {
		getState,
		subscribe,
		dispatch
	};
}

export default createStore;