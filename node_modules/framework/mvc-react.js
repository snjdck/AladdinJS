import {Component} from 'react';
import ReactDOM from 'react-dom';
import {Application} from './mvc';

class ReactApplication extends Application
{
	startup(element, container){
		super.startup();
		let self = this;
		ReactDOM.render(element, container, function(){
			registerViews(self, this);
		});
	}
}

class ViewComponent extends Component
{
	componentDidMount(){}
	componentWillUnmount(){
		this.module.delView(this);
	}
	notify(msgName, msgData){
		return this.module.notify(msgName, msgData);
	}
}

class ModuleComponent extends ViewComponent{}

const walk = (function(){
	function* _walk(fiber){
		for(;fiber;fiber=fiber.sibling){
			let isComponent = fiber.stateNode instanceof Component;
			if(isComponent){
				yield fiber.stateNode;
			}
			yield* _walk(fiber.child);
			if(isComponent){
				yield;
			}
		}
	}
	return component => _walk(component._reactInternalFiber);
})();

function registerViews(application, component){
	let moduleStack = [];
	let module;
	for(let node of walk(component)){
		if(node === undefined){
			module = moduleStack.pop();
			continue;
		}
		if(node instanceof ModuleComponent){
			moduleStack.push(module);
			module = application.getModuleByRootViewName(node.constructor.name);
		}
		if(node instanceof ViewComponent){
			node.module = module;
			module.regView(node);
		}
	}
}

export {
	ModuleComponent,
	ViewComponent,
	ReactApplication
};