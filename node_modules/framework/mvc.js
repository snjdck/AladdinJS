"use strict";

function handleMsg(dict, msg){
	for(let target of dict.values()){
		if(msg.isProcessCanceled())break;
		safeCall(target, msg.name, msg);
	}
}

function safeCall(target, name, ...args){
	if(target[name] instanceof Function)
		return target[name](...args);
}

function isBaseClass(v, base){
	if(!v.prototype)
		return v instanceof base;
	for(;v;v=Object.getPrototypeOf(v))
		if(v === base)return true;
}

const initComponents = (filter, initFn) => module => initFn(module, module.collectComponents().filter(filter));

const initAllModels = initComponents(function(v){
	if(!Array.isArray(v))
		return isBaseClass(v, Model);
	if(v.length == 2)
		return isBaseClass(v[1], Model)
	if(v.length == 1)
		return isBaseClass(v[0], Model)
}, function(module, set){
	for(let v of set){
		if(Array.isArray(v)){
			if(v.length == 2){
				module.regModel(v[1], v[0]);
				continue;
			}else if(v.length == 1){
				v = v[0];
			}else{
				throw new Error(v);
			}
		}
		if(v.prototype){
			module.regModel(new v());
		}else{
			module.regModel(v);
		}
	}
});

const initAllServices = initComponents(function(v){
	if(!Array.isArray(v))
		return isBaseClass(v, Service);
	if(v.length == 3)
		return true;
	if(v.length == 1)
		return isBaseClass(v[0], Service);
	if(v.length == 2){
		return (typeof v[1] == "boolean") || isBaseClass(v[1], Service);
	}
	throw new Error(v);
}, function(module, set){
	for(let v of set){
		if(!Array.isArray(v)){
			module.regService(v, v);
		}else if(v.length == 3){
			module.regService(...v);
		}else if(v.length == 2){
			if(typeof v[1] == "boolean"){
				module.regService(v[0], ...v);
			}else{
				module.regService(...v);
			}
		}else if(v.length == 1){
			module.regService(v[0], v[0]);
		}else{
			throw new Error(v);
		}
	}
});

const initAllViews = initComponents(
	v => isBaseClass(v, View),
	(module, set) => set.forEach(v => module.regView(v))
);

const initAllControllers = initComponents(
	v => isBaseClass(v, Controller),
	(module, set) => set.forEach(v => module.regController(v))
);

function startupModules(moduleList){
	for(let module of moduleList) initAllModels(module);
	for(let module of moduleList) initAllServices(module);
	for(let module of moduleList) initAllViews(module);
	for(let module of moduleList) initAllControllers(module);
	for(let module of moduleList) safeCall(module, "onStartup");
}

const Injector = require("./ioc");

class Application
{
	constructor(){
		Object.defineProperties(this, {
			injector: {value: new Injector()},
			moduleDict: {value: new Map()},
			hasStartup: {value:false, writable:true}
		});
		this.injector.mapValue(Application, this, null, null);
		this.injector.mapValue(Injector, this.injector, null, null);
	}

	regModule(...moduleList){
		for(let module of moduleList){
			console.assert(!this.moduleDict.has(module.constructor));
			this.moduleDict.set(module.constructor, module);
			module.injector.parent = this.injector;
		}
		if(this.hasStartup){
			startupModules(moduleList);
		}
	}

	getModule(moduleType){
		return this.moduleDict.get(moduleType);
	}

	getModuleByRootViewName(rootViewName){
		if(!rootViewName)return;
		for(let module of this.moduleDict.values()){
			if(module.rootViewName == rootViewName){
				return module;
			}
		}
	}

	startup(){
		if(this.hasStartup)return;
		this.hasStartup = true;
		startupModules(Array.from(this.moduleDict.values()));
	}
}

class Module
{
	constructor(){
		Object.defineProperties(this, {
			injector: {value: new Injector()},
			controllerDict: {value: new Map()},
			viewSet: {value: new Set()}
		});
		this.injector.mapValue(Module, this, null, null);
		this.injector.mapValue(Injector, this.injector, null, null);
	}

	notify(msgName, msgData=null){
		let msg = new Msg(msgName, msgData);
		handleMsg(this.controllerDict, msg);
		handleMsg(this.viewSet, msg);
		return !msg.isDefaultPrevented();
	}

	regService(serviceInterface, serviceClass, asLocal=false){
		let injector = asLocal ? this.injector : this.injector.parent;
		injector.mapSingleton(serviceInterface, serviceClass, null, this.injector);
	}

	regModel(model, modelType=null){
		this.injector.mapValue(modelType || model.constructor, model);
	}

	delModel(modelType){
		this.injector.ummap(modelType);
	}

	regView(view){
		console.assert(!this.viewSet.has(view));
		this.viewSet.add(view);
		this.injector.injectInto(view);
		safeCall(view, "onReg");
	}

	delView(view){
		safeCall(view, "onDel");
		this.viewSet.delete(view);
	}

	regController(controllerType){
		console.assert(!this.controllerDict.has(controllerType));
		let controller = new controllerType();
		this.controllerDict.set(controllerType, controller);
		this.injector.injectInto(controller);
		safeCall(controller, "onReg");
	}

	delController(controllerType){
		let controller = this.controllerDict.get(controllerType);
		safeCall(controller, "onDel");
		this.controllerDict.delete(controllerType);
	}

	collectComponents(){return [];}
}

class Notifier
{
	notify(msgName, msgData=null){
		return this.module.notify(msgName, msgData);
	}
}
Notifier[Injector.Tag] = {module: Module};

class Msg
{
	constructor(name, data){
		this.name = name;
		this.data = data;
		this.defaultPreventedFlag = false;
		this.processCanceledFlag = false;
		switch(typeof name){
			case "symbol":
			case "string":
				break;
			default:
				console.assert(false, "msg.name must be 'symbol' or 'string'!", name);
		}
	}

	cancelProcess(){
		this.processCanceledFlag = true;
	}

	isProcessCanceled(){
		return this.processCanceledFlag;
	}

	preventDefault(){
		this.defaultPreventedFlag = true;
	}

	isDefaultPrevented(){
		return this.defaultPreventedFlag;
	}
}

function createMsgNames(...nameList){
	return Object.defineProperties(
		Object.create(null),
		nameList.reduce(
			(dict, name) => (dict[name] = {value:Symbol(name),enumerable:true}, dict),
			Object.create(null)
		)
	);
}

class Model extends Notifier {}
class Service extends Notifier {}
class Controller extends Notifier {}
class View extends Notifier {}

module.exports = {
	Application,
	Module,
	Model,
	Service,
	View,
	Controller,
	Msg,
	createMsgNames
};