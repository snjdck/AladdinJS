"use strict";

const Injector = require("./ioc");

class Application
{
	constructor(){
		Object.defineProperties(this, {
			injector: {value: new Injector()},
			moduleDict: {value: new Map()}
		});
		this.injector.mapValue(Application, this, null, null);
		this.injector.mapValue(Injector, this.injector, null, null);
	}

	regModule(module){
		console.assert(!this.moduleDict.has(module.constructor));
		this.moduleDict.set(module.constructor, module);
		module.injector.parent = this.injector;
	}

	startup(){
		let moduleList = Array.from(this.moduleDict.values());
		for(let module of moduleList) module.initAllModels();
		for(let module of moduleList) module.initAllServices();
		/*for(let module of moduleList) module.activateServices();*/
		for(let module of moduleList) module.initAllControllers();
		for(let module of moduleList) module.onStartup();
	}
}

class Module
{
	constructor(){
		Object.defineProperties(this, {
			injector: {value: new Injector()},
			controllerDict: {value: new Map()}
		});
		this.injector.mapValue(Module, this, null, null);
		this.injector.mapValue(Injector, this.injector, null, null);
	}

	notify(msgName, msgData=null){
		let msg = new Msg(msgName, msgData);
		for(let handler of this.controllerDict.values()){
			if(msg.isProcessCanceled()) break;
			handler.handleMsg(msg);
		}
		return !msg.isDefaultPrevented();
	}

	regService(serviceInterface, serviceClass, asLocal=false){
		let injector = asLocal ? this.injector : this.injector.parent;
		injector.mapSingleton(serviceInterface, serviceClass, null, this.injector);
	}

	regModel(model, modelType=null){
		this.injector.mapValue(modelType || model.constructor, model);
	}

	delModel(modelType){
		this.injector.ummap(modelType);
	}

	regController(controllerType){
		console.assert(!this.controllerDict.has(controllerType));
		let controller = new controllerType();
		this.injector.injectInto(controller);
		this.controllerDict.set(controllerType, controller);
	}

	delController(controllerType){
		this.controllerDict.delete(controllerType);
	}

	/*activateServices(){}*/
	initAllModels(){}
	initAllServices(){}
	initAllControllers(){}
	onStartup(){}
}

class Notifier
{
	notify(msgName, msgData=null){
		return this.module.notify(msgName, msgData);
	}
}
Notifier[Injector.Tag] = {module: Module};

class Model extends Notifier {}
class Service extends Notifier {}
class Controller extends Notifier
{
	handleMsg(msg){
		let handler = this[msg.name];
		if(handler) handler.call(this, msg);
	}
}

class Msg
{
	constructor(name, data){
		this.name = name;
		this.data = data;
		this.defaultPreventedFlag = false;
		this.processCanceledFlag = false;
	}

	cancelProcess(){
		this.processCanceledFlag = true;
	}

	isProcessCanceled(){
		return this.processCanceledFlag;
	}

	preventDefault(){
		this.defaultPreventedFlag = true;
	}

	isDefaultPrevented(){
		return this.defaultPreventedFlag;
	}
}

function createMsgNames(...nameList){
	return Object.defineProperties(
		Object.create(null),
		nameList.reduce(
			(dict, name) => (dict[name] = {value:Symbol(name),enumerable:true}, dict),
			Object.create(null)
		)
	);
}

module.exports = {
	Application,
	Module,
	Model,
	Service,
	Controller,
	Msg,
	createMsgNames
};