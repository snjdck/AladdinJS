"use strict";

function castStringToDom(html){
	let div = document.createElement("div");
	div.innerHTML = html;
	return div.childNodes;
}

class Subscription
{
	constructor(fn){
		this.fn = fn;
		this.children = new Set();
	}
	unsubscribe(){
		if(!this.fn)return;
		let fn = this.fn;
		this.fn = null;
		fn();
		for(let child of this.children){
			child.unsubscribe();
		}
		this.children.clear();
	}
	add(child){
		this.children.add(child);
	}
	remove(child){
		this.children.delete(child);
	}
}

class Observer
{
	constructor(fn){
		if(typeof fn == "function"){
			this.next = fn;
		}else{
			Object.assign(this, fn);
		}
		this.isComplete = false;
	}
	next(v){
		if(this.isComplete)return;
		if(this.next){
			this.next(v);
		}
	}
	error(v){
		if(this.isComplete)return;
		this.isComplete = true;
		if(this.error){
			this.error(v);
		}
	}
	complete(){
		if(this.isComplete)return;
		this.isComplete = true;
		if(this.complete){
			this.complete();
		}
	}
}

class Subject extends Observer
{
	constructor(){
		let next = v => {
			for(let fn of this.fnSet){
				fn.next(v);
			}
		};
		super({next});
		this.fnSet = new Set();
	}

	subscribe(fn){
		this.fnSet.add(new Observer(fn));
	}
}

class Observable
{
	static From(list){
		return new this(observer => {
			for(let v of list){
				observer.next(v);
			}
		});
	}

	static Interval(value){
		return new this(observer => {
			let count = 0;
			let timerID = setInterval(() => observer.next(count++), value);
			return () => clearInterval(timerID);
		});
	}

	constructor(fn){
		this.fn = fn;
	}

	subscribe(fn){
		let unsubscribe = this.fn(new Observer(fn));
		return new Subscription(unsubscribe);
	}
}
/*
var foo = new Observable(function (observer) {
  console.log('Hello');
  observer.next(42);
  observer.next(100);
  observer.next(200);
  setTimeout(() => {
    observer.next(300); // 异步执行
  }, 1000);
});

console.log('before');
foo.subscribe(function (x) {
  console.log(x);
});
console.log('after');

let test = Observable.Interval(1000);
let sub = test.subscribe(v => console.log(v));

//setTimeout(()=>sub.unsubscribe(), 5000);
*/
var subject = new Subject();

subject.subscribe({
  next: (v) => console.log('observerA: ' + v)
});
subject.subscribe({
  next: (v) => console.log('observerB: ' + v)
});

var observable = Observable.From([1, 2, 3]);

observable.subscribe(subject); // 你可以提供一个 Subject 进行订阅