'use strict';

const acorn_vm = require('./acorn_vm.js');


let code = `
/*
function aaa(a, b, c){
	let array = [1,2,3], obj = {a:1, b:2, ['c']:3};
	console.log(array, obj, {}, new Array(5), new Array, typeof 5, 5 instanceof Number, array instanceof Array);
	for(let key in obj){
		console.log(key, obj[key], obj, array, obj.a, obj.b, obj.c)

	}
	for(var j=0, n=20;j<n; ++j){
		console.log(j*10)
	}
	if(false){
		console.log('test true')
	}else{
		console.log('test false')
	}
	let i=0;
	loop:
	while(i<10){
		console.log('while',i++);
		continue
	}
	loop2:
	do{
		console.log('do while', i--)
	}while(i > 0);
	return a+b+c;
	console.log('can not reach');
};let aa = 1, bb=2, dd;console.log(aa+bb, -1, ~1, aaa(aa,bb,'cc'));

let array = [5,6,7];
console.log(array, ...array, void 10)

void function(...args){
	console.log(...args)
}(6,5,4)

for(let v of [1,2,3]){
	console.log(v)
}

*/

async function aaa(){
	console.log('--')
	await new Promise(function(resolve){
		setTimeout(resolve, 1000)
	})
	console.log('==', this, (1,2,3));
	let a = 5;
	a = 6
	debugger;
}

aaa();

switch(100){
	case 100:
	console.log(100)
		break;
	default:
		console.log(200)
}
try{
	throw 1+3
}catch(e){
	console.log('catch', e)
}finally{
	console.log('fff')
}
console.log(e, new Array(...[1,2,3]))
`;

acorn_vm.exec(code);