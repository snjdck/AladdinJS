'use strict';

function collectArgs(node, ctx){
	return node.arguments.map(v => this(v, ctx));
}

function getProperty(node, ctx){
	return node.computed ? '[' + this(node.property, ctx) + ']' : '.' + node.property.name;
}

function addTab(code){
	return code.replace(/^/gm, ' '.repeat(4));
}

const handler = {
	Program(node, ctx){
		//console.log(JSON.stringify(node.body))
		return node.body.map(v => this(v, ctx)).join('\n');
	},
	BlockStatement(node, ctx, handler){
		return handler.Program.call(this, node, ctx, handler);
	},
	Identifier(node, ctx){
		return node.name;
	},
	FunctionDeclaration(node, ctx){
		const body = this(node.body, ctx);
		return `${node.async ? 'async ': ''}function ${node.id.name}(){\n${addTab(body)}}`
	},
	ArrowFunctionExpression(node, ctx){

		ctx.pushFn(node);
		this(node.body, ctx);
	},
	FunctionExpression(node, ctx){
		const body = this(node.body, ctx);
		return `function(){\n${body}\n}`
	},
	AwaitExpression(node, ctx){
		return `await ` + this(node.argument, ctx);
	},
	YieldExpression(node, ctx){
		console.log(node.delegate)
		return `yield ` + this(node.argument, ctx);
	},
	ExpressionStatement(node, ctx){
		return this(node.expression, ctx) + ';';
	},
	CallExpression(node, ctx){
		return this(node.callee, ctx) + '(' + collectArgs.call(this, node, ctx) + ')';
	},
	SpreadElement(node, ctx){
		return '...' + this(node.argument, ctx);
	},
	MemberExpression(node, ctx){
		return this(node.object, ctx) + getProperty.call(this, node, ctx);
	},
	EmptyStatement(node, ctx){
		return '';
	},
	UnaryExpression(node, ctx){
		return node.operator + ' ' + this(node.argument, ctx);
	},
	BinaryExpression(node, ctx){
		return this(node.left, ctx) + ' ' + node.operator + ' ' + this(node.right, ctx);
	},
	AssignmentExpression(node, ctx){
		return this(node.left, ctx) + node.operator + this(node.right, ctx);
	},
	LogicalExpression(node, ctx){
		return this(node.left, ctx) + node.operator + this(node.right, ctx);
	},
	Literal(node, ctx){
		return node.raw;
	},
	VariableDeclaration(node, ctx){
		return node.kind + ' ' + node.declarations.map(v => this(v, ctx));
	},
	VariableDeclarator(node, ctx){
		if(node.init){
			return this(node.id, ctx) + '=' + this(node.init, ctx);
		}
		return this(node.id, ctx);
	},
	ReturnStatement(node, ctx){
		if(node.argument){
			return 'return ' + this(node.argument, ctx);
		}
		return 'return';
	},
	ConditionalExpression(node, ctx){
		return this(node.test, ctx) + '?' + 
		this(node.consequent, ctx) + ':' + 
		this(node.alternate, ctx);
	},
	IfStatement(node, ctx){
		let result =  `if(${this(node.test, ctx)}){\n` + addTab(this(node.consequent, ctx)) + `\n}`;
		if(node.alternate){
			return result + `else{\n` + addTab(this(node.alternate, ctx)) + '\n}';
		}
		return result;
	},
	WhileStatement(node, ctx){
		return `while(${this(node.test, ctx)}){\n${addTab(this(node.body, ctx))}\n}`
	},
	DoWhileStatement(node, ctx){
		return `do{\n${addTab(this(node.body, ctx))}\n}while(${this(node.test, ctx)});`
	},
	ForStatement(node, ctx){
		return `for(${this(node.init, ctx)}${this(node.test, ctx)};${this(node.update, ctx)}){\n${addTab(this(node.body, ctx))}\n}`;
	},
	ForInStatement(node, ctx){
		return `for(${this(node.left, ctx)} in ${this(node.right, ctx)}){\n${addTab(this(node.body, ctx))}\n}`;
	},
	ForOfStatement(node, ctx){
		return `for(${this(node.left, ctx)} of ${this(node.right, ctx)}){\n${addTab(this(node.body, ctx))}\n}`;
	},
	BreakStatement(node, ctx){
		return node.label ? 'break ' + node.label : 'break';
	},
	ContinueStatement(node, ctx){
		return node.label ? 'continue ' + node.label : 'continue';
	},
	LabeledStatement(node, ctx){
		return this(node.label, ctx) + ':\n' + this(node.body, ctx);
	},
	UpdateExpression(node, ctx){
		let result = this(node.argument, ctx);
		if(node.prefix){
			return node.operator + result;
		}
		return result + node.operator;
	},
	ArrayExpression(node, ctx){
		return '[' + node.elements.map(v => this(v, ctx)) + ']';
	},
	ObjectExpression(node, ctx){
		return '{' + node.properties.map(v => (v.key.type =='Identifier' ? this(v.key) : `[${this(v.key)}]`) + ':' + this(v.value, ctx)) + '}';
	},
	NewExpression(node, ctx, handler){
		return 'new ' + handler.CallExpression.call(this, node, ctx, handler);
	},
	DebuggerStatement(node, ctx){
		return 'debugger';
	},
	ThisExpression(node, ctx){},
	SequenceExpression(node, ctx){
		node.expressions.reduce((r, v) => this(v, ctx));
	},
	SwitchStatement(node, ctx){
		this(node.discriminant, ctx);
		for(let item of node.cases){
			if(item.test){
				this(item.test, ctx)
			}
			item.consequent.forEach(v => this(v, ctx));
		}
	},
	ThrowStatement(node, ctx){
		this(node.argument, ctx);
	},
	TryStatement(node, ctx){
		this(node.block, ctx);
		if(node.handler){
			this(node.handler, ctx);
		}
		if(node.finalizer){
			this(node.finalizer, ctx);
		}
	},
	CatchClause(node, ctx){
		this(node.body, ctx);
	},
	TemplateLiteral(node, ctx){
		node.expressions.map(v => this(v, ctx));
	},
	TemplateElement(node, ctx){},
	TaggedTemplateExpression(node, ctx){
		this(node.tag, ctx);
		node.quasi.expressions.map(v => this(v, ctx))
	}
};

function walk(node, ctx){
	return handler[node.type].call(walk, node, ctx, handler);
}


module.exports = walk;
