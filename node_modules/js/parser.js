
const NodeType = require('./NodeType');
const testRule = require('./RuleList');
const Node = require('./Node');
const NodeList = require('./NodeList');
const buildTree = require('./buildTree');

function lexer(input){
	const outputNodeList = new NodeList();
	const spaceRegExp = /^\s+/;
	while(input.length > 0){
		const spaceTest = spaceRegExp.exec(input);
		if(spaceTest){
			input = input.slice(spaceTest[0].length);
			continue;
		}
		let result = testRule(input);
		if(!result){
			console.log('not matched');
			break;
		}
		outputNodeList.add(new Node(...result));
		input = input.slice(result[1].length);
	}
	outputNodeList.add(new Node(NodeType.EOF));
	return outputNodeList;
}

function readStatement(nodeList){
	if(nodeList.expect(NodeType.BRACES_LEFT)){
		nodeList.accept(NodeType.BRACES_LEFT);
		let result = readStatementList(nodeList);
		nodeList.accept(NodeType.BRACES_RIGHT);
		return result;
	}
	if(nodeList.matchAny([NodeType.KEYWORD_IF, NodeType.KEYWORD_WHILE])){
		let op = nodeList.next();
		nodeList.accept(NodeType.PARENTHESES_LEFT);
		let condition = buildTree(nodeList);
		nodeList.accept(NodeType.PARENTHESES_RIGHT);
		condition.nextSibling = readStatement(nodeList);
		op.firstChild = condition;
		return op;
	}
	if(nodeList.matchAny([NodeType.SEMICOLON])){
		return nodeList.next();
	}
	return buildTree(nodeList);
}

function readStatementList(nodeList){
	if(nodeList.matchAny([NodeType.EOF, NodeType.BRACES_RIGHT]))return;
	const op = readStatement(nodeList);
	op.nextSibling = readStatementList(nodeList);
	return op;
}

//console.log(buildTree(lexer("1 = ((2 = 3) = 5) = 4")).calcute())
//console.log(buildTree(lexer("1 + a.name.length (100) + 3 + 4")).calcute())
console.log(buildTree(lexer("7 + a.name.length (100, 200 + 400, 300) + (2)")).calcute())
console.log(buildTree(lexer("a.name.length (100, 200 + 400, 300).f(d)[a]()[b][c](d)(e)")).calcute())
console.log(buildTree(lexer("a.name.length [name].f")).calcute())
console.log(buildTree(lexer("a.b.c")).calcute())
console.log(buildTree(lexer("a[b][c]")).calcute())
console.log(buildTree(lexer("a(b)(c)[d][e][f]()(g)")).calcute())
console.log(buildTree(lexer("a.b.c(20,30).d")).calcute())
/*

*/
let nodeList = lexer(`
	if(5 > 0)
		console.log(100, 200, 300)
	while(0){
		console.log(2)
	}
	if(5 < 7){
		console.log(200)
	}
`);
//return console.log(nodeList);
let tree = readStatementList(nodeList);
while(tree){
	console.log(tree.calcute());
	tree = tree.nextSibling;
}
