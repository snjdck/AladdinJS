const NodeType = require('./NodeType');

function castNodeToList(node){
	let list = [];
	while(node){
		list.push(node.calcute());
		node = node.nextSibling;
	}
	return list;
}

const castNodeToArgList = node => castNodeToList(node).join(', ');
const castNodeToStatements = node => castNodeToList(node).map(v => v + ';\n').join('');

module.exports = class{
	constructor(type, value){
		this.type = type;
		this.value = value;
		this.realValue = value;
	}

	get leftChild(){
		return this.firstChild;
	}

	get rightChild(){
		return this.firstChild && this.firstChild.nextSibling;
	}

	calcute(){
		if(this.value == 'if'){
			return `if(${this.firstChild.calcute()}){\n${castNodeToStatements(this.rightChild)}}\n`
		}
		if(this.value == 'while'){
			return `while(${this.firstChild.calcute()}){\n${castNodeToStatements(this.rightChild)}}\n`
		}
		if(this.type == NodeType.CALL_METHOD){
			return this.firstChild.calcute() + '.' + this.rightChild.calcute() + '(' + castNodeToArgList(this.rightChild.nextSibling) + ')'
		}
		if(this.type == NodeType.PARENTHESES_LEFT){
			let list = [];
			let arg = this.firstChild.nextSibling;
			while(arg){
				list.push(arg.calcute());
				arg = arg.nextSibling;
			}
			return this.firstChild.calcute() + '(' + list.join() + ')';
		}
		if(this.type == NodeType.BRACKETS_LEFT){
			let list = [];
			let arg = this.firstChild.nextSibling;
			while(arg){
				list.push(arg.calcute());
				arg = arg.nextSibling;
			}
			return this.firstChild.calcute() + '[' + list.join() + ']';
		}
		if(!this.firstChild)return this.value;
		if(!this.rightChild){
			return '(' + this.value + this.firstChild.calcute() + ')';
		}
		const result = this.firstChild.calcute() + this.value + this.rightChild.calcute();
		if(this.type == NodeType.COMMA){
			return result;
		}
		return '(' + result + ')';
	}
}