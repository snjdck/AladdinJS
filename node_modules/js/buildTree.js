'use strict';

const compose = require('utils/function/compose');
const NodeType = require('./NodeType');

function calcute(op, a, b){
	op.firstChild = a;
	if(b){
		if(a.nextSibling){
			throw new Error("a.nextSibling is not null!");
		}
		a.nextSibling = b;
	}
	return op;
}
/*
function readValueList(nodeList){
	if(nodeList.matchAny([NodeType.PARENTHESES_RIGHT, NodeType.BRACKETS_RIGHT])){
		return;
	}
	const firstNode = this.call(this, nodeList);
	let currentNode = firstNode;
	while(!nodeList.matchAny([NodeType.PARENTHESES_RIGHT, NodeType.BRACKETS_RIGHT])){
		nodeList.accept(NodeType.COMMA);
		currentNode.nextSibling = this.call(this, nodeList);
		currentNode = currentNode.nextSibling;
	}
	return firstNode;
}

function readKeyValue(nodeList){
	const key = nodeList.accept(NodeType.STRING);
	nodeList.accept(NodeType.COLON);
	return calcute(new Node(NodeType.KEY_VALUE), key, this(nodeList));
}
*/
const matchUnitary = opList => nextNode => function self(nodeList){
	if(nodeList.matchAny(opList)){
		return calcute(nodeList.next(), self(nodeList));
	}
	return nextNode(nodeList);
}

const matchLeft = opList => nextNode => function(nodeList){
	let a = nextNode(nodeList);
	while(nodeList.matchAny(opList)){
		const op = nodeList.first();
		if(!op.isPairType())nodeList.next();
		a = calcute(op, a, nextNode(nodeList));
	}
	return a;
}

const matchRight = opList => nextNode => function self(nodeList){
	const a = nextNode(nodeList);
	if(nodeList.matchAny(opList)){
		return calcute(nodeList.next(), a, self(nodeList));
	}
	return a;
}

const matchNone = opList => nextNode => function(nodeList){
	if(nodeList.matchAny(opList)){
		return nodeList.next();
	}
	return nextNode(nodeList);
}

const matchQuote = opList => (nextNode, rootNode) => function(nodeList){
	if(nodeList.matchAny(opList)){
		nodeList.next();
		let result = rootNode(nodeList);
		nodeList.next();
		return result;
	}
	return nextNode(nodeList);
}

function createSuperFunc(...ruleList){
	const result = compose(...ruleList.reverse().map(f => v => f(v, v => result(v))))(_ => null);
	return result;
}

module.exports = createSuperFunc(
	matchNone([NodeType.NUM, NodeType.VAR_ID]),
	matchQuote([NodeType.PARENTHESES_LEFT, NodeType.BRACKETS_LEFT]),
	matchLeft([NodeType.PARENTHESES_LEFT, NodeType.BRACKETS_LEFT, NodeType.OP_DOT]),
	matchUnitary([NodeType.OP_SUB, NodeType.OP_ADD, NodeType.OP_BIT_NOT, NodeType.OP_LOGIC_NOT]),
	matchRight([NodeType.OP_POW]),
	matchLeft([NodeType.OP_MUL, NodeType.OP_DIV, NodeType.OP_REMAIN]),
	matchLeft([NodeType.OP_SUB, NodeType.OP_ADD]),
	matchLeft([NodeType.OP_BIT_R_SHIFT, NodeType.OP_BIT_L_SHIFT]),
	matchLeft([NodeType.OP_GREATER, NodeType.OP_GREATER_EQUAL, NodeType.OP_LESS, NodeType.OP_LESS_EQUAL]),
	matchLeft([NodeType.OP_EQUAL, NodeType.OP_NOT_EQUAL]),
	matchLeft([NodeType.OP_BIT_AND]),
	matchLeft([NodeType.OP_BIT_XOR]),
	matchLeft([NodeType.OP_BIT_OR]),
	matchLeft([NodeType.OP_LOGIC_AND]),
	matchLeft([NodeType.OP_LOGIC_OR]),
	matchRight([NodeType.OP_CONDITION]),
	matchRight([NodeType.OP_ASSIGN]),
	matchLeft([NodeType.COMMA]),
);
