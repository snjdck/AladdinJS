
const NodeType = require('./NodeType');

const ruleList = [];

ruleList.push([/^if\b/, NodeType.KEYWORD_IF]);
ruleList.push([/^while\b/, NodeType.KEYWORD_WHILE]);
ruleList.push([/^var\b/, NodeType.KEYWORD_VAR]);
ruleList.push([/^function\b/, NodeType.KEYWORD_FUNC]);
ruleList.push([/^return\b/, NodeType.KEYWORD_RETURN]);

ruleList.push([/^[$_a-zA-Z][$_a-zA-Z0-9]*/, NodeType.VAR_ID]);
ruleList.push([/^(0|[1-9]\d*)(\.\d+)?/, NodeType.NUM]);
ruleList.push([/^".*?"/, NodeType.STRING]);
ruleList.push([/^\./, NodeType.OP_DOT]);
ruleList.push([/^,/, NodeType.COMMA]);
ruleList.push([/^:/, NodeType.COLON]);
ruleList.push([/^;/, NodeType.SEMICOLON]);

ruleList.push([/^&&/, NodeType.OP_LOGIC_AND]);
ruleList.push([/^\|\|/, NodeType.OP_LOGIC_OR]);

ruleList.push([/^==/, NodeType.OP_EQUAL]);
ruleList.push([/^!=/, NodeType.OP_NOT_EQUAL]);

ruleList.push([/^>=/, NodeType.OP_GREATER_EQUAL]);
ruleList.push([/^>/, NodeType.OP_GREATER]);
ruleList.push([/^<=/, NodeType.OP_LESS_EQUAL]);
ruleList.push([/^</, NodeType.OP_LESS]);

ruleList.push([/^\+/, NodeType.OP_ADD]);
ruleList.push([/^-/, NodeType.OP_SUB]);
ruleList.push([/^\*/, NodeType.OP_MUL]);
ruleList.push([/^\//, NodeType.OP_DIV]);
ruleList.push([/^\^/, NodeType.OP_POW]);

ruleList.push([/^=/, NodeType.OP_ASSIGN]);

ruleList.push([/^\(/, NodeType.PARENTHESES_LEFT]);
ruleList.push([/^\)/, NodeType.PARENTHESES_RIGHT]);

ruleList.push([/^\[/, NodeType.BRACKETS_LEFT]);
ruleList.push([/^\]/, NodeType.BRACKETS_RIGHT]);

ruleList.push([/^\{/, NodeType.BRACES_LEFT]);
ruleList.push([/^\}/, NodeType.BRACES_RIGHT]);

module.exports = function(input){
	for(let [pattern, nodeType] of ruleList){
		let result = pattern.exec(input);
		if(!result)continue;
		let value = result[1] || result[0];
		return [nodeType, value];
	}
}
