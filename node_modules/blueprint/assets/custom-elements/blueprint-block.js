const text = `
<style>
blueprint-block {
	[slot="title"] {
		pointer-events: none;
	}

	> :is([slot="input"], [slot="output"]) {
		display: flex;
		align-items: center;
		user-select: none;
	}

	> [slot="input"]::before, > [slot="output"]::after {
		width: 20px;
		height: 12px;
		content: '';
		background-color: #000;
		margin: 2px;
	}

	> [data-valuetype="number"]::before,
	> [data-valuetype="number"]::after {
		background-color: red;
	}

	> [data-valuetype="boolean"]::before,
	> [data-valuetype="boolean"]::after {
		background-color: green;
	}

	> [slot="input"] {
		&[data-type="field"]::before {
			background-color: transparent;
		}
		&[data-type="expression"] {
			&::before {
				mask-image: url(assets/icon-expression.svg);
			}
			&[data-connected="1"]::before {
				mask-image: url(assets/icon-expression-connected.svg);
			}
		}
		&[data-type="statement"] {
			&::before {
				mask-image: url(assets/icon-input-statement.svg);
			}
			&[data-connected="1"]::before {
				mask-image: url(assets/icon-input-statement-connected.svg);
			}
		}
	}

	> [slot="output"] {
		&[data-type="field"]::after {
			background-color: transparent;
		}
		&[data-type="expression"] {
			&::after {
				mask-image: url(assets/icon-expression.svg);
			}
			&[data-connected="1"]::after {
				mask-image: url(assets/icon-expression-connected.svg);
			}
		}
		&[data-type="statement"] {
			&::after {
				mask-image: url(assets/icon-output-statement.svg);
			}
			&[data-connected="1"]::after {
				mask-image: url(assets/icon-output-statement-connected.svg);
			}
		}
	}
}
</style>
<template>
	<style>
		:host {
			position: absolute;
		}
		.card {
			width: max-content;
			min-width: 150px;
			/*height: 220px;*/
			background-color: antiquewhite;
			border-radius: 10px;
			/*box-shadow: 16px 16px 10px black;*/
			/*color: white;*/
			/*--title-display: flex;*/
		}
		.title {
			height: 30px;
			border-radius: 10px 10px 0 0;
			background: linear-gradient(to right top, #84fab0 10%, #8fd3f4);

			display: flex;
			justify-content: center;
			align-items: center;

			cursor: grab;
			user-select: none;

			&:active {
				cursor: grabbing;
			}
		}
		:host([data-title="0"]) :is(.title, .title + .close) {
			/*display: none;*/
		}
		.close {
			display: flex;
			justify-content: center;
			align-items: center;
			width: 20px;
			height: 20px;
			position: absolute;
			top:5px;
			right: 5px;
			user-select: none;

			&:hover {
				outline: 1px solid black;
			}
		}

		.body {
			display: flex;
			justify-content: space-between;
			gap: 2em;
			> * {
				display: flex;
				flex-direction: column;
				gap: 0.5em;
				margin-block: 0.5em;
			}
			> :last-child {
				align-items: end;
			}
		}
	</style>
	<div class="card">
		<slot class="title" name="title"></slot>
		<div class="close">Ã—</div>
		<div class="body">
			<slot name="input"></slot>
			<slot name="output"></slot>
		</div>
	</div>
</template>
`;

const parser = new DOMParser();
const dom = parser.parseFromString(text, 'text/html');
document.head.appendChild(dom.querySelector('style'));
const template = dom.querySelector('template');

customElements.define("blueprint-block", class extends HTMLElement{
	constructor(){
		super();
		const shadowRoot = this.attachShadow({mode:'open'});
		shadowRoot.appendChild(template.content.cloneNode(true));
	}
});