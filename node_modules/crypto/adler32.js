'use strict';

/*
A = 1 + D1 + D2 + ... + Dn (mod 65521)
B = (1 + D1) + (1 + D1 + D2) + ... + (1 + D1 + D2 + ... + Dn) (mod 65521)
  = n×D1 + (n-1)×D2 + (n-2)×D3 + ... + Dn + n (mod 65521)
Adler-32(D) = B × 65536 + A
*/

const MOD_ADLER_32 = 65521;
const MOD_ADLER_16 = 251;

function adler32(data, begin=0, end=data.length){
	let a = 1;
	let b = 0;
	for(let i=begin; i<end; ++i){
		a = (a + data[i]) % MOD_ADLER_32;
		b = (b + a) % MOD_ADLER_32;
	}
	return a | b << 16;
}

function adler16(data, begin=0, end=data.length){
	let a = 1;
	let b = 0;
	for(let i=begin; i<end; ++i){
		a = (a + data[i]) % MOD_ADLER_16;
		b = (b + a) % MOD_ADLER_16;
	}
	return a | b << 8;
}

exports.adler32 = adler32;
exports.adler16 = adler16;
