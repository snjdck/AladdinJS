import ast
import json
import sys

userFuncSet = set()

def castList(nodeList):
	result = []
	for v in map(cast, nodeList):
		if isinstance(v, list):
			result += v
		elif v is not None:
			result.append(v)
	return result

def cast(node):
	if isinstance(node, ast.Expr):
		node = node.value
	if isinstance(node, ast.Call):
		if node.func.id in userFuncSet:
			return {"type":"invoke", "target":{"type":"getVar", "name":node.func.id}, "argList":castList(node.args)}
		return {"type":"function", "method":node.func.id, "argList":castList(node.args)}
	if isinstance(node, ast.Num):
		return {"type":"number", "value":node.n}
	if isinstance(node, ast.Str):
		return {"type":"string", "value":node.s}
	if isinstance(node, (ast.Tuple, ast.List)):
		return {"type":"array",  "value":castList(node.elts)}
	if isinstance(node, ast.Name):
		return {"type":"getVar", "name":node.id}
	if isinstance(node, ast.NameConstant):
		return {"type":"number", "value":node.value}
	if isinstance(node, ast.Pass):
		return None
	if isinstance(node, ast.arguments):
		return [v.arg for v in node.args]
	if isinstance(node, ast.Continue):
		return {"type":"continue"}
	if isinstance(node, ast.Break):
		return {"type":"break"}
	if isinstance(node, ast.Return):
		if node.value is None:
			return {"type":"return"}
		return {"type":"return", "value":cast(node.value)}
	if isinstance(node, ast.Compare):
		if isinstance(node.ops[0], ast.Gt):
			method = ">"
		else: assert False, ast.dump(node)
		return {"type":"function", "method":method, "argList":[cast(node.left), cast(node.comparators[0])], "retCount":1}
	if isinstance(node, ast.BinOp):
		if isinstance(node.op, ast.Add):
			method = "+"
		else: assert False, ast.dump(node)
		return {"type":"function", "method":method, "argList":[cast(node.left), cast(node.right)], "retCount":1}
	if isinstance(node, ast.Assign):
		return {"type":"setVar", "name":node.targets[0].id, "value":cast(node.value)}
	if isinstance(node, ast.If):
		result = [{"type":"if", "condition":cast(node.test), "code":castList(node.body)}]
		if len(node.orelse):
			result.append({"type":"else", "code":castList(node.orelse)})
		return result
	if isinstance(node, ast.While):
		return {"type":"while", "condition":cast(node.test), "code":castList(node.body)}
	if isinstance(node, ast.FunctionDef):
		funcRef = {"type":"newFunction", "argList":cast(node.args), "code":castList(node.body)}
		userFuncSet.add(node.name)
		return {"type":"setVar", "name":node.name, "value":funcRef}
	if isinstance(node, ast.Module):
		return castList(node.body)
	assert False, ast.dump(node)

with open(sys.argv[1]) as f:
	tree = ast.parse(f.read())
	print(ast.dump(tree))
	#info = {"desc":ast.dump(tree), "tree":cast(tree)}
	#print(json.dumps(info))
	