"use strict";

const TweenEase = require("./TweenEase");
const Range = require("./Range");
const {tickByFrame} = require('webonly/timer');

const tweenMap = new WeakMap();

class Tween{
	static KillTweensOf(target){
		let tweenSet = tweenMap.get(target);
		if(tweenSet){
			tweenSet.clear();
		}
	}

	constructor(target, duration, props=null, ease=null, onEnd=null, onUpdate=null){
		this.target = target;
		this._position = 0;
		this.duration = duration;
		this.ease = ease || TweenEase.Linear;
		this._props = props;
		this.onUpdate = onUpdate;
		this.onEnd = onEnd;
	}

	start(){
		const {target} = this;
		let tweenSet = tweenMap.get(target);
		if(tweenSet?.has(this))return;
		if(tweenSet){
			this.createPropInfoDict();
			this.delConflictPropsOnOtherTweens(tweenSet);
			tweenSet.add(this);
		}else{
			tweenSet = new Set([this]);
			tweenMap.set(target, tweenSet);
			this.createPropInfoDict();
		}
		return tickByFrame(
			timeElapsed => this.position += timeElapsed,
			() => this.interruptFlag || this.position >= this.duration
		).then(() => {
			tweenSet.delete(this);
			return this.interruptFlag;
		});
	}

	get position(){
		return this._position;
	}

	set position(value){
		this._position = value;
		if(value >= this.duration){
			this.updateTargetPropValues(1);
		}else if(value > 0){
			this.updateTargetPropValues(this.ease(value / this.duration));
		}else{//value <= 0
			this.updateTargetPropValues(0);
		}
	}

	updateTargetPropValues(ratio){
		const {target, props} = this;
		for(let [key, range] of Object.entries(props)){
			target[key] = range.getValue(ratio);
		}
	}

	createPropInfoDict(){
		this.props = {};
		for(let [key, val] of Object.entries(this._props)){
			this.props[key] = this.calcRange(key, val);
		}
	}

	calcRange(key, value){
		const {target} = this;
		let endValue;
		if(Array.isArray(value)){
			endValue = this.calcValue(key, value[1]);
			target[key] = this.calcValue(key, value[0]);
		}else{
			endValue = this.calcValue(key, value);
		}
		return new Range(target[key], endValue);
	}

	calcValue(key, value){
		if(typeof value != "string"){
			return value;
		}
		return parseNumber(value) + this.target[key];
	}

	delConflictPropsOnOtherTweens(tweenSet){
		loop:
		for(let tween of tweenSet){
			for(let key in this._props){
				delete tween.props[key];
			}
			for(let key in tween.props){
				continue loop;
			}
			tween.interruptFlag = true;
		}
	}
}



module.exports = Tween;