"use strict";

const PowerEase = power => ratio => Math.pow(ratio, power);
const EaseOut = easeIn => ratio => 1 - easeIn(1 - ratio);
const EaseInOut = easeIn => function func(ratio){
	return (ratio <= 0.5) ? (0.5 * easeIn(2 * ratio)) : (1 - func(1 - ratio));
};

const Linear = PowerEase(1);

const QuadIn = PowerEase(2);
const QuadOut = EaseOut(QuadIn);
const QuadInOut = EaseInOut(QuadIn);

const CubicIn = PowerEase(2);
const CubicOut = EaseOut(CubicIn);
const CubicInOut = EaseInOut(CubicIn);

const QuartIn = PowerEase(4);
const QuartOut = EaseOut(QuartIn);
const QuartInOut = EaseInOut(QuartIn);

const QuintIn = PowerEase(5);
const QuintOut = EaseOut(QuintIn);
const QuintInOut = EaseInOut(QuintIn);

const halfPI = Math.PI * 0.5;

const SineIn = ratio => 1 - Math.cos(ratio * halfPI);
const SineOut = EaseOut(SineIn);
const SineInOut = EaseInOut(SineIn);

const CircIn = ratio => 1 - Math.sqrt(1 - ratio * ratio);
const CircOut = EaseOut(CircIn);
const CircInOut = EaseInOut(CircIn);

const ExpoIn = ratio => ratio > 0 ? Math.pow(2, 10 * (ratio - 1)) : 0;
const ExpoOut = EaseOut(ExpoIn);
const ExpoInOut = EaseInOut(ExpoIn);

const BackIn = ratio => ratio * ratio * (1.70158 * (ratio - 1) + ratio);
const BackOut = EaseOut(BackIn);
const BackInOut = EaseInOut(BackIn);

const ElasticIn = ratio => {
	if(0 == ratio || 1 == ratio){
		return ratio;
	}
	ratio -= 1;
	return Math.pow(2, 10*ratio) * Math.sin((0.075-ratio)*Math.PI/0.15);
};
const ElasticOut = EaseOut(ElasticIn);
const ElasticInOut = EaseInOut(ElasticIn);

const BounceOut = ratio => {
	let offset;
	if(ratio < 2/2.75){
		ratio -= 1.5/2.75;
		offset = 0.75;
	}else if(ratio < 2.5/2.75){
		ratio -= 2.25/2.75;
		offset = 0.9375;
	}else{
		ratio -= 2.625/2.75;
		offset = 0.984375;
	}
	return offset + 7.5625 * ratio * ratio;
};
const BounceIn = EaseOut(BounceOut);
const BounceInOut = EaseInOut(BounceIn);

module.exports = {
	Linear,
	QuadIn,QuadOut,QuadInOut,
	CubicIn,CubicOut,CubicInOut,
	QuartIn,QuartOut,QuartInOut,
	QuintIn,QuintOut,QuintInOut,
	SineIn,SineOut,SineInOut,
	CircIn,CircOut,CircInOut,
	ExpoIn,ExpoOut,ExpoInOut,
	BackIn,BackOut,BackInOut,
	ElasticIn,ElasticOut,ElasticInOut,
	BounceIn,BounceOut,BounceInOut
};