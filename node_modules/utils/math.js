"use strict";

function sum(list){
	return list.reduce((a, b) => a + b);
}

function avg(list){
	if(list.length <= 0)
		return 0;
	return sum(list) / list.length;
}

function isOdd(value){
	return (value & 1) == 1;
}

function isPowerOf2(x){
	return (x > 0) && ((x & (x-1)) == 0);
}

function nextPowerOf2(x){
	let value = 1;
	while(value < x)
		value <<= 1;
	return value;
}

function factorial(n){
	let value = 1;
	while(n > 1)
		value *= n--;
	return value;
}

function permutation(m, n){
	if(m < n)return 0;
	let value = 1;
	while(n-- > 0)
		value *= m--;
	return value;
}

function combination(m, n){
	return permutation(m, n) / factorial(n);
}

function gcd(a, b){
	let t;
	while(t = a % b){
		a = b;
		b = t;
	}
	return b;
}

function lcm(a, b){
	return a * b / gcd(a, b);
}

function truncate(value, range1=0, range2=1){
	let min = range1 <= range2 ? range1 : range2;
	let max = range1 >= range2 ? range1 : range2;
	return (value <= min) ? min : (value >= max ? max : value);
}

function calcScaleRatio(oldWidth, oldHeight, newWidth, newHeight){
	return (newHeight / newWidth) >= (oldHeight / oldWidth) ? (newWidth / oldWidth) : (newHeight / oldHeight);
}

function pingpong(value, length){
	let div = value / length;
	let count = Math.floor(div);
	let result = (div - count) * length;
	return (count & 1) > 0 ? (length - result) : result;
}

function calcBitCount(v){
	let n = 0;
	while(1 << n < v)++n;
	return n;
}

module.exports = {
	sum,
	avg,
	isOdd,
	isPowerOf2,
	nextPowerOf2,
	factorial,
	permutation,
	combination,
	gcd,
	lcm,
	truncate,
	calcScaleRatio,
	pingpong,
	calcBitCount,
};