'use strict';

const add = (a, b) => a + b;
const sum = list => list.reduce(add, 0);
const avg = list => list.reduce(add, 0) / list.length;

/*
function variance(list, avg){
	return sum(list.map(v => (v - avg) ** 2)) / list.length;
}
*/
function variance(list, avg){
	const add = (a, b) => a + (b - avg) ** 2;
	return list.reduce(add, 0) / list.length;
}

const isOdd = v => (v & 1) == 1;
const isPowerOf2 = x => (x > 0) && ((x & (x-1)) == 0);

function nextPowerOf2(x){
	let value = 1;
	while(value < x)
		value <<= 1;
	return value;
}

function factorial(n){
	let value = 1;
	while(n > 1)
		value *= n--;
	return value;
}

function permutation(m, n){
	if(m < n)return 0;
	let value = 1;
	while(n-- > 0)
		value *= m--;
	return value;
}

const combination = (m, n) => permutation(m, n) / factorial(n);

function gcd(a, b){
	let t;
	while(t = a % b){
		a = b;
		b = t;
	}
	return b;
}

const lcm = (a, b) => a * b / gcd(a, b);

function truncate(value, min=0, max=1){
	return (value <= min) ? min : (value >= max ? max : value);
}

function calcScaleRatio(oldWidth, oldHeight, newWidth, newHeight){
	return (newHeight / newWidth) >= (oldHeight / oldWidth) ? (newWidth / oldWidth) : (newHeight / oldHeight);
}

function pingpong(value, length){
	let div = value / length;
	let count = Math.floor(div);
	let result = (div - count) * length;
	return (count & 1) > 0 ? (length - result) : result;
}

function calcBitCount(v){
	let n = 0;
	while(1 << n < v)++n;
	return n;
}

function sizeAlign(value, align){
	return value + (align - value % align) % align;
}

const sign = v => (v > 0) ? 1 : (v < 0 ? -1 : 0);

module.exports = {
	sum,
	avg,
	isOdd,
	isPowerOf2,
	nextPowerOf2,
	factorial,
	permutation,
	combination,
	gcd,
	lcm,
	truncate,
	calcScaleRatio,
	pingpong,
	calcBitCount,
	sizeAlign,
	sign,
};