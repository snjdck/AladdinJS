"use strict";

function loadDataNode(url, type, method, body){
	return new Promise(function(resolve, reject){
		const http = require("http");
		const {URL} = require("url");
		const info = new URL(url);
		const options = {host: info.host, path: (info.pathname + info.search), method};
		const request = http.request(options, response => {
			if(response.statusCode != 200){
				reject(response.statusMessage);
				return;
			}
			let buffer = Buffer.alloc(0);
			response.on("data", chunk => buffer = Buffer.concat([buffer, chunk]));
			response.on("end", () => {
				if(type == "arraybuffer"){
					resolve(buffer);
				}else if(type == "json"){
					resolve(JSON.parse(buffer.toString()));
				}else{
					resolve(buffer.toString());
				}
			});
		});
		if(body != null){
			request.write(body);
		}
		request.end();
	});
}

function loadDataWeb(url, type, method, body){
	return new Promise(function(resolve, reject){
		const xmlhttp = new XMLHttpRequest();
		xmlhttp.responseType = type;
		xmlhttp.onreadystatechange = function(){
			if(xmlhttp.readyState != 4){
				return;
			}
			if(xmlhttp.status == 200){
				resolve(xmlhttp.response);
			}else{
				reject(xmlhttp.statusText);
			}
		};
		xmlhttp.open(method, url, true);
		xmlhttp.send(body);
	});
}

async function loadDataFetch(url, type, method, body){
	let response = await fetch(new Request(url, {method, body}));
	if(type == "arraybuffer")	return response.arrayBuffer();
	if(type == "json")			return response.json();
	return response.text();
}

function loadData(url, type="text", method="GET", body=null){
	if(typeof fetch == "function")
		return loadDataFetch(url, type, method, body);
	if(typeof XMLHttpRequest == "function")
		return loadDataWeb(url, type, method, body);
	return loadDataNode(url, type, method, body);
}

module.exports = {
	loadData
};