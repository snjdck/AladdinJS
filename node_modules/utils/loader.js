"use strict";

function loadDataNode(url, type, method){
	const http = require("http");
	const options = {host: url, method};
	return new Promise(function(resolve, reject){
		http.request(options, response => {
			if(response.statusCode != 200){
				reject(response.statusMessage);
				return;
			}
			let buffer = Buffer.alloc(0);
			response.on("data", chunk => buffer = Buffer.concat([buffer, chunk]));
			response.on("end", () => {
				if(type == "text"){
					resolve(buffer.toString());
				}else{
					resolve(buffer);
				}
			});
		}).end();
	});
}

function loadDataWeb(url, type, method){
	return new Promise(function(resolve, reject){
		let xmlhttp = new XMLHttpRequest();
		xmlhttp.responseType = type;
		xmlhttp.onreadystatechange = function(){
			if(xmlhttp.readyState != 4){
				return;
			}
			if(xmlhttp.status == 200){
				resolve(xmlhttp.response);
			}else{
				reject(xmlhttp.statusText);
			}
		};
		xmlhttp.open(method, url, true);
		xmlhttp.send();
	});
}

function loadData(url, type="text", method="GET"){
	if(typeof window == "object")
		return loadDataWeb(url, type, method);
	return loadDataNode(url, type, method);
}

module.exports = {
	loadData
};