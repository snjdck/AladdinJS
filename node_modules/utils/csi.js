//不难发现样例中的关键的代码是类似 \033[42;30m 这种格式的，换成大白话的写法就是 \033[背景色编号;字色编号m 。

//字色编号：30黑，31红，32绿，33黄，34蓝，35紫，36深绿，37白色
//背景编号：40黑，41红，42绿，43黄，44蓝，45紫，46深绿，47白色

/**
ANSI escape code
https://en.wikipedia.org/wiki/ANSI_escape_code#Windows
\033[0m 关闭所有属性
\033[1m 设置高亮度
\033[4m 下划线
\033[5m 闪烁
\033[7m 反显
\033[8m 消隐
\033[nA 光标上移n行
\033[nB 光标下移n行
\033[nC 光标右移n列
\033[nD 光标左移n列
\033[y;xH 设置光标位置（y列x行）
\033[2J 清屏
\033[K 清除从光标到行尾的内容
33[s 保存光标位置 
33[u 恢复光标位置 
33[?25l 隐藏光标 
33[?25h 显示光标
*/

const styles={}
var codes = {
  reset: [0, 0],

  bold: [1, 22],
  dim: [2, 22],
  italic: [3, 23],
  underline: [4, 24],
  inverse: [7, 27],
  hidden: [8, 28],
  strikethrough: [9, 29],

  black: [30, 39],
  red: [31, 39],
  green: [32, 39],
  yellow: [33, 39],
  blue: [34, 39],
  magenta: [35, 39],
  cyan: [36, 39],
  white: [37, 39],
  gray: [90, 39],
  grey: [90, 39],

  // legacy styles for colors pre v1.0.0
  blackBG: [40, 49],
  redBG: [41, 49],
  greenBG: [42, 49],
  yellowBG: [43, 49],
  blueBG: [44, 49],
  magentaBG: [45, 49],
  cyanBG: [46, 49],
  whiteBG: [47, 49],

};

Object.keys(codes).forEach(function(key) {
  var val = codes[key];
  var style = styles[key] = [];
  style.open = '\u001b[' + val[0] + 'm';
  style.close = '\u001b[' + val[1] + 'm';
});

const font = (bg, fg) => '\033[' + bg + ';' + fg + 'm';
const underline	= '\033[4m';
const end		= '\033[0m';

//console.log("\u001b[31mHello World");
console.log("\x1B[31mHello World");
console.log('\033[42;30m DONE \033[40;32m Compiled successfully in 19987ms\x1b[21mssss' +   end)
console.log(font(42,30)+' DONE '+font(40,32)+' Compiled successfully in 19987ms\033[0m' + end)
return
console.log(process.stdout.isTTY)
console.log(process.stdout.columns, process.stdout.rows)
process.stdin.on('data', data => {
	console.clear();
	console.log('1\n2')
	console.log('1')
	console.log('1')
	console.log('%c1', 0xff0000)
	data = data.toString();
	if(data == '1'){
		console.log('1')
	}else if(data == '2'){
		
	}
	process.stdout.write('=='+ data)
})