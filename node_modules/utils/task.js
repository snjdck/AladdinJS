'use strict';
/*
function createTask(handler, maxCount=1){
	let taskList = [];
	let runCount = 0;
	function doRun(){
		if(taskList.length <= 0 || runCount >= maxCount)return;
		++runCount;
		handler(...taskList.shift()).then(onRun);
	}
	const onRun = () => doRun(--runCount);
	return (...args) => doRun(taskList.push(args));
}
*/
function createTask(handler, maxCount=1){
	const fn = TaskHandler(maxCount);
	return (...args) => fn(() => handler(...args));
}

function TaskHandler(maxCount=1){
	let taskList = [];
	let runCount = 0;
	function doRun(){
		if(taskList.length <= 0 || runCount >= maxCount)return;
		++runCount;
		const [task, resolve, reject] = taskList.shift();
		task().finally(onRun).then(resolve, reject);
	}
	const onRun = () => doRun(--runCount);
	return task => new Promise((resolve, reject) => doRun(taskList.push([task, resolve, reject])));
}

const TaskQueue = last => func => last = last ? last.then(func) : func();

exports.createTask = createTask;
exports.TaskQueue = TaskQueue;
