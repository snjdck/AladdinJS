'use strict';

const helpFn = fn => function(data, w, h){
	const copy = [];
	for(let j=0; j<h; ++j){
		for(let i=0; i<w; ++i){
			copy[fn(w,h,i,j)] = data[w*j+i];
		}
	}
	return copy;
}

const rotate90 = helpFn((w,h,i,j) => w*(h-1-i)+j);
const rotate180 = helpFn((w,h,i,j) => w*(h-1-j)+w-1-i);
const rotate270 = helpFn((w,h,i,j) => w*i+h-1-j);
const mirror = helpFn((w,h,i,j) => w*j+w-1-i);
const mirrorRotate90 = helpFn((w,h,i,j) => w*i+j);
const mirrorRotate180 = helpFn((w,h,i,j) => w*(h-1-j)+i);
const mirrorRotate270 = helpFn((w,h,i,j) => w*(h-1-i)+h-1-j);

function isSymmetricY(data, w, h){
	let offset = 0;
	for(let j=0; j<h; ++j){
		for(let i=w>>1; i>0; --i){
			if(data[offset+i-1] != data[offset+w-i]){
				return false;
			}
		}
		offset += w;
	}
	return true;
}

function isSymmetricX(data, w, h){
	for(let j=h>>1; j>0; --j){
		let a = w*(j-1);
		let b = w*(h-j);
		for(let i=0; i<w; ++i){
			if(data[a+i] != data[b+i]){
				return false;
			}
		}
	}
	return true;
}

/*
let test = [1,2,3,4,5,6,7,8,9];
console.log(isSymmetricY([1,2,1,3,4,3,5,6,5], 3, 3))
console.log(isSymmetricX([1,2,3,4,5,6,1,2,3], 3, 3))
console.log(isSymmetricY(test, 5, 3))
console.log(rotate90(test, 3, 3).join('').match(/\d{3}/g).join('\n'),'\n')
console.log(rotate180(test, 3, 3).join('').match(/\d{3}/g).join('\n'),'\n')
console.log(rotate270(test, 3, 3).join('').match(/\d{3}/g).join('\n'),'\n')
console.log(mirror(test, 3, 3).join('').match(/\d{3}/g).join('\n'),'\n')
console.log(mirrorRotate90(test, 3, 3).join('').match(/\d{3}/g).join('\n'),'\n')
console.log(mirrorRotate180(test, 3, 3).join('').match(/\d{3}/g).join('\n'),'\n')
console.log(mirrorRotate270(test, 3, 3).join('').match(/\d{3}/g).join('\n'),'\n')
//*/

exports.rotate90 = rotate90;
exports.rotate180 = rotate180;
exports.rotate270 = rotate270;
exports.mirror = mirror;
exports.mirrorRotate90 = mirrorRotate90;
exports.mirrorRotate180 = mirrorRotate180;
exports.mirrorRotate270 = mirrorRotate270;
exports.isSymmetricY = isSymmetricY;
exports.isSymmetricX = isSymmetricX;
