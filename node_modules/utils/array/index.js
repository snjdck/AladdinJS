"use strict";

function append(list, items){
	list.push(...items);
	return list;
}

function prepend(list, items){
	list.unshift(...items);
	return list;
}

function unique(list){
	let result = [];
	return sub(list, result, result);
}

function add(a, b){
	return [...a, ...b];
}

function sub(a, b, result=[]){
	for(let item of a){
		if(!b.includes(item)){
			result.push(item);
		}
	}
	return result;
}

function and(a, b){
	return sub(a, sub(a, b));
}

function or(a, b){
	return append(sub(a, b), b);
}

function xor(a, b){
	return append(sub(a, b), sub(b, a));
}

function count(list, value){
	let n = 0;
	for(let item of list){
		if(item == value){
			++n;
		}
	}
	return n;
}

function copy(from, to, count, fromOffset=0, toOffset=0){
	for(let i=0; i<count; ++i){
		to[toOffset+i] = from[fromOffset+i];
	}
}

function delAt(list, index){
	if(0 <= index && index < list.length){
		return list.splice(index, 1)[0];
	}
}

function del(list, item){
	return delAt(list, list.indexOf(item));
}

function delByKey(list, key, value){
	for(let [index, item] of list.entries()){
		if(item[key] == value){
			return delAt(list, index);
		}
	}
}

function delWhen(list, handler, justOne=false){
	let result = justOne ? null : [];
	for(let i=list.length-1; i>=0; --i){
		if(handler(list[i], i, list)){
			let value = list.splice(i, 1)[0];
			if(justOne)return value;
			result.push(value);
		}
	}
	return result;
}

function eachPair(list, handler){
	const n = list.length;
	loop:
	for(let i=0; i<n-1; ++i){
		for(let j=i+1; j<n; ++j){
			if(handler(list[i], list[j], i, j, list)){
				break loop;
			}
		}
	}
}

function equals(a, b){
	if(a.length != b.length){
		return false;
	}
	for(let i=a.length-1; i>=0; --i){
		if(a[i] != b[i]){
			return false;
		}
	}
	return true;
}

function insertAt(list, index, value){
	list.splice(index, 0, value);
}

function insertArrayAt(list, index, items){
	list.splice(index, 0, ...items);
}

function nextIndex(list, index){
	return (index + 1) % list.length;
}

function nextValue(list, index){
	return list[nextIndex(list, index)];
}

function swapValueAt(list, index1, index2){
	if(index1 == index2){
		return;
	}
	let value = list[index1];
	list[index1] = list[index2];
	list[index2] = value;
}

function shuffle(list){
	for(let i=list.length; i>1; --i){
		swapValueAt(list, i - 1, Math.floor(i * Math.random()));
	}
}

module.exports = {
	append,
	prepend,
	unique,
	add,
	sub,
	and,
	or,
	xor,
	count,
	copy,
	delAt,
	del,
	delByKey,
	delWhen,
	eachPair,
	equals,
	insertAt,
	insertArrayAt,
	nextIndex,
	nextValue,
	swapValueAt,
	shuffle
};