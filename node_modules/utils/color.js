
function decode(value, result={}){
	result.a = 0xFF & value >> 24;
	result.r = 0xFF & value >> 16;
	result.g = 0xFF & value >> 8;
	result.b = 0xFF & value;
	return result;
}

function encode({r, g, b, a=0}){
	return (a & 0xFF) << 24 | (r & 0xFF) << 16 | (g & 0xFF) << 8 | (b & 0xFF);
}

const add = function(){
	const v1 = {}, v2 = {};
	return (c1, c2) => {
		decode(c1, v1);
		decode(c2, v2);
		v1.r += v2.r;
		v1.g += v2.g;
		v1.b += v2.b;
		return encode(v1);
	}
}();

const diff = function(){
	const v1 = {}, v2 = {};
	return (c1, c2) => {
		decode(c1, v1);
		decode(c2, v2);
		v1.r -= v2.r;
		v1.g -= v2.g;
		v1.b -= v2.b;
		return Math.abs(v1.r) + Math.abs(v1.g) + Math.abs(v1.b);
	}
}();

const scale = function(){
	const v = {};
	return (c, s) => {
		decode(c, v);
		v.r *= s;
		v.g *= s;
		v.b *= s;
		return encode(v);
	}
}();

function rgb888_to_rgb565(c){
	const r = 0x1F & c >> 19;
	const g = 0x3F & c >> 10;
	const b = 0x1F & c >> 3;
	return r << 11 | g << 5 | b;
}

function rgb565_to_rgb888(c){
	const r = 0x1F & c >> 11;
	const g = 0x3F & c >> 5;
	const b = 0x1F & c;
	return r << 19 | g << 10 | b << 3;
}

/** 16种web标准颜色 */
exports.BLACK	 = 0x000000;//黑色
exports.GRAY	 = 0x808080;//灰色
exports.SILVER	 = 0xC0C0C0;//银色
exports.WHITE	 = 0xFFFFFF;//白色

exports.RED		 = 0xFF0000;//红色
exports.LIME	 = 0x00FF00;//酸橙色
exports.BLUE	 = 0x0000FF;//蓝色

exports.MAROON	 = 0x800000;//栗色
exports.GREEN	 = 0x008000;//绿色
exports.NAVY	 = 0x000080;//海军蓝

exports.AQUA	 = 0x00FFFF;//青色
exports.FUCHSIA	 = 0xFF00FF;//紫红色
exports.YELLOW	 = 0xFFFF00;//黄色

exports.TEAL	 = 0x008080;//水鸭色
exports.PURPLE	 = 0x800080;//紫色
exports.OLIVE	 = 0x808000;//橄榄色

/** 其它颜色 */
exports.PINK	 = 0xFFC0CB;//粉红色
exports.ORANGE	 = 0xFFA500;//橙色
exports.GOLD	 = 0xFFD700;//金色
exports.BROWN	 = 0xA52A2A;//褐色
exports.WOOD	 = 0xDEB887;//木色

function RGB_2_HSB({r, g, b}){
	const result = {h:0, s:0, b:0};
	const max = Math.max(r, g, b);
	const min = Math.min(r, g, b);
	if(max > 0){
		const t = max - min;
		result.s = t / max;
		result.b = max / 0xFF;
		if(t > 0){
			if(r == max){
				result.h = 60 * (g - b) / t + (g < b ? 360 : 0);
			}else if(g == max){
				result.h = 60 * (b - r) / t + 120;
			}else{
				result.h = 60 * (r - g) / t + 240;
			}
		}
	}
	return result;
}

/**
 * @param hue 色相
 * @param saturation 饱和度:(最大值-最小值)/最大值
 * @param brightness 亮度:最大值/0xFF
 */		
function HSB_2_RGB({h, s, b}){
	let t = b * 0xFF;//t = max, 保证精度
	const max = Math.round(t);
	const min = Math.round(t * (1 - s));
	t *= s / 60;//t = (max - min) / 60
	if(h <  60)return {r: max, b: min, g: min + h * t};
	if(h < 120)return {g: max, b: min, r: min - (h - 120) * t};
	if(h < 180)return {g: max, r: min, b: min + (h - 120) * t};
	if(h < 240)return {b: max, r: min, g: min - (h - 240) * t};
	if(h < 300)return {b: max, g: min, r: min + (h - 240) * t};
	if(h < 360)return {r: max, g: min, b: min - (h - 360) * t};
}

	