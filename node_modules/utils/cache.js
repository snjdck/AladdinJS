
function delayNew(newFn){
	let v;
	return () => v || (v = newFn());
}

function createGetter(newFn, keyFn){
	let hit = Object.create(null);
	return function(...args){
		let k = keyFn ? keyFn(...args) : args[0];
		return (k in hit) ? hit[k] : (hit[k] = newFn.apply(this, args));
	}
}

//const createSingleValueWrapper = value => newValue => (newValue === undefined) ? value : (value = newValue);

module.exports = {
	delayNew,
	createGetter,
	//createSingleValueWrapper,
};