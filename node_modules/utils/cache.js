
function delayNew(newFn){
	let v;
	return function(){
		if(newFn){
			v = newFn.call(this);
			newFn = null;
		}
		return v;
	}
}

function createGetter(newFn, keyFn){
	let hit = Object.create(null);
	return function(...args){
		let k = keyFn ? keyFn(...args) : args[0];
		return (k in hit) ? hit[k] : (hit[k] = newFn.apply(this, args));
	}
}

//const createSingleValueWrapper = value => newValue => (newValue === undefined) ? value : (value = newValue);

function createFetch(loader){
	const cache = new Map();
	return function(key, callback){
		if(cache.has(key)){
			const {value, waitList} = cache.get(key);
			if(waitList){
				waitList.push(callback);
			}else if(callback){
				callback(value);
			}
			return value;
		}
		const waitList = [callback];
		cache.set(key, {waitList});
		loader.call(this, key, value => {
			cache.set(key, {value});
			waitList.forEach(f => f && f(value));
		});
	}
}

module.exports = {
	delayNew,
	createGetter,
	createFetch,
	//createSingleValueWrapper,
};