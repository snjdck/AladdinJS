
const delayNew = (newFn, v) => function(...args){
	if(newFn){
		v = newFn.apply(this, args);
		newFn = null;
	}
	return v;
}

const createGetter = (newFn, keyFn, hit=Object.create(null)) => function(...args){
	const k = keyFn?.(...args) ?? args[0];
	if(k in hit)return hit[k];
	const v = newFn.apply(this, args);
	hit[k] = v;
	return v;
}

const createMapGetter = (newFn, keyFn, hit=new Map()) => function(...args){
	const k = keyFn?.(...args) ?? args[0];
	if(hit.has(k))return hit.get(k);
	const v = newFn.apply(this, args);
	hit.set(k, v);
	return v;
}

const createSingleValueWrapper = oldValue => newValue => (newValue === undefined) ? oldValue : (oldValue = newValue);

const createFetch = (loadFn, cache=new Map()) => function(key, promiseFlag=true){
	if(!cache.has(key)){
		const waitList = [];
		const info = {waitList};
		cache.set(key, info);
		loadFn.call(this, key).then(value => {
			info.value = value;
			info.waitList = null;
			waitList.forEach(f => f[0](value));
		}, value => {
			cache.delete(key);
			waitList.forEach(f => f[1](value));
		});
	}
	const {waitList, value} = cache.get(key);
	return promiseFlag ? waitList ? new Promise((...args) => waitList.push(args)) : Promise.resolve(value) : value;
}

module.exports = {
	delayNew,
	createGetter,
	createMapGetter,
	createFetch,
	createSingleValueWrapper,
	createListGetter: (newFn, list=[]) => createGetter(newFn, null, list),
	createWeakMapGetter: (newFn, keyFn) => createMapGetter(newFn, keyFn, new WeakMap()),
};