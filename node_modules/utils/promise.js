'use strict';

function delay(milliseconds, signal){
	return new Promise((resolve, reject) => {
		if(!signal)return setTimeout(resolve, milliseconds);
		function onTimer(){
			signal.removeEventListener('abort', onAbort);
			resolve();
		}
		function onAbort(){
			clearTimeout(timer);
			reject();
		}
		const timer = setTimeout(onTimer, milliseconds);
		signal.addEventListener('abort', onAbort, {once:true});
	});
}

function repeatDo(task){
	let fn = () => task().then(fn);
	return fn(), () => fn = null;
}

function loopDo(handler, interval=1000){
	return repeatDo(() => handler().then(() => delay(interval)));
}

exports.delay = delay;
exports.repeatDo = repeatDo;
exports.loopDo = loopDo;
