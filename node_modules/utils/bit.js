
function cast2(byteList, bitCountPerByte, bitOffset=0){
	const threshold = 1 << bitCountPerByte;
	const binList = byteList.map(v => {
		if(v >= threshold)
			return v.toString(2).slice(-bitCountPerByte);
		return v.toString(2).padStart(bitCountPerByte, '0');
	});
	let string = binList.join('');
	console.log(binList.join('-'))
	if(bitOffset > 0){
		string = '0'.repeat(bitOffset) + string;
	}
	const count = Math.ceil(string.length / 8);
	string = string.padEnd(count << 3, '0');
	let data = Array(count);
	for(let i=0; i<count; ++i){
		data[i] = parseInt(string.substr(i << 3, 8), 2);
	}
	return data;
}

function compress(byteList, bitCountPerByte, bitOffset=0){
	const w = byteList.length;
	const h = bitCountPerByte;
	const mask = (1 << h) - 1;

	const data = new Uint8Array(Math.ceil((w * h + bitOffset) / 8));

	for(let i=0, offset=bitOffset; i<w; ++i, offset+=h){
		const size = 8 - offset % 8;
		const index = Math.floor(offset / 8);
		const diff = size - h;
		const value = byteList[i] & mask;
		console.assert(
			byteList[i] <= mask,
			'%d at %d is greater than %d, bit width: %d',
			byteList[i], i, mask, bitCountPerByte
		);
		if(diff >= 0){
			data[index] |= value << diff;
		}else{
			data[index] |= value >> -diff;
			data[index+1] = value << diff + 8;
		}
	}
	
	return data;
}

function uncompress(byteList, bitCountPerByte, bitOffset=0){
	const w = Math.floor((byteList.length * 8 - bitOffset) / bitCountPerByte);
	const h = bitCountPerByte;
	const mask = (1 << h) - 1;

	const data = new Uint8Array(w);

	for(let i=0, offset=bitOffset; i<w; ++i, offset+=h){
		const size = 8 - offset % 8;
		const index = Math.floor(offset / 8);
		const diff = size - h;
		let value;
		if(diff >= 0){
			value = byteList[index] >> diff;
		}else{
			value = byteList[index] << -diff | byteList[index+1] >> diff + 8;
		}
		data[i] = value & mask;
	}
	
	return data;
}

exports.compress = compress;
exports.uncompress = uncompress;