'use strict';

/*
module.exports = function(){
	const queue = [];
	return function(root, handler, self){
		queue.push(root);
		while(queue.length > 0){
			let item = queue.pop();
			if(handler.call(self, item))continue;
			let children = item._children;
			if(children.length == 0)continue;
			queue.unshift.apply(queue, children);
		}
	}
}();
*/

const walkTree = (onEnter, onLeave) => function fn(item, selfFlag=true){
	if(selfFlag && onEnter?.call(this, item))return;
	const {children} = item;
	for(let i=0, n=children.length; i<n; ++i){
		fn.call(this, children[i], true);
	}
	if(selfFlag && onLeave?.call(this, item))return;
}

function traverseTree(item, handler, selfFlag=true){
	const value = selfFlag && handler.call(this, item);
	if(value === true)return;
	const children = item._children;
	for(let i=0, n=children.length; i<n; ++i){
		traverseTree.call(this, children[i], handler);
	}
	if(value)value.call(this, item);
}
/*
function collectTree(onCollect){
	const elementList = [];
	return root => {
		traverseTree.call(elementList, root, onCollect);
		return elementList;
	};
}
*/
exports.traverseTree = traverseTree;
//exports.collectTree = collectTree;
exports.walkTree = walkTree;
