'use strict';

function replaceBackRef(regexp, index){
	return regexp.replace(/(\\+)(\d+)/g, (raw, prefix, v) => prefix.length & 1 ? prefix + (Number(v) + index) : raw);
}

function calcGroupCount(regexp){
	regexp = regexp.replace(/\\./g, '');
	for(let i=0;;){
		let text = regexp.replace(/\([^(]+?\)/g, v => (i += !v.startsWith('(?'), ''));
		if(text == regexp)return i;
		regexp = text;
	}
}

function initPattern(patternList){
	patternList.reduce((index, pattern) => {
		pattern.index = ++index;
		const groupCount = calcGroupCount(pattern.regexp);
		if(groupCount > 0){
			pattern.regexp = replaceBackRef(pattern.regexp, index);
			index += groupCount;
		}
		return index;
	}, 0);
}

function highlight(...patternList){
	initPattern(patternList);
	const regexp = new RegExp(patternList.map(({regexp}) => `(${regexp})`).join('|'), 'g');
	return function*(code){
		let offset = 0;
		for(const match of code.matchAll(regexp)){
			const {index, 0:text} = match;
			const {style} = patternList.find(p => match[p.index]);
			yield {text: code.slice(offset, index)};
			yield {text, style};
			offset = index + text.length;
		}
		yield {text: code.slice(offset)};
	}
}

const id_exp = '[^\\W\\d]\\w*';

const cpp = highlight(
	{regexp:'\\/\\/.*|\\/\\*[^]*?\\*\\/', style:'hljs-comment'},
	{regexp:'#\\s*[a-z]+\\b', style:'hljs-meta'},
	{regexp:"'[\\x00-\\xFF]'", style:'hljs-string'},
	{regexp:'"[^]*?"', style:'hljs-string'},
	{regexp:'\\b(?:bool|char|char16_t|char32_t|char8_t|double|float|int|long|short|void|wchar_t|unsigned|signed|const|static)\\b', style:'hljs-type'},
	{regexp:'\\b(?:alignas|alignof|and|and_eq|asm|atomic_cancel|atomic_commit|atomic_noexcept|auto|bitand|bitor|break|case|catch|class|co_await|co_return|co_yield|compl|concept|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|dynamic_cast|else|enum|explicit|export|extern|false|final|for|friend|goto|if|import|inline|module|mutable|namespace|new|noexcept|not|not_eq|nullptr|operator|or|or_eq|override|private|protected|public|reflexpr|register|reinterpret_cast|requires|return|sizeof|static_assert|static_cast|struct|switch|synchronized|template|this|thread_local|throw|transaction_safe|transaction_safe_dynamic|true|try|typedef|typeid|typename|union|using|virtual|volatile|while|xor|xor_eq)\\b', style:'hljs-keyword'},
	{regexp:'\\b(?:NULL|false|true|nullopt|nullptr)\\b', style:'hljs-literal'},
	{regexp:`${id_exp}(?=\\s+${id_exp})`, style:'hljs-type'},
	{regexp:`(?<=${id_exp}\\s+)${id_exp}`, style:'hljs-title'},
	{regexp:`(?<=${id_exp}\\s*\\.\\s*)${id_exp}`, style:'hljs-attribute'},
	{regexp:id_exp},
	{regexp:'\\b0[xX][0-9a-fA-F]+\\b', style:'hljs-number'},
	{regexp:'(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[eE][-+]?\\d+)?', style:'hljs-number'},
	{regexp:`([-+&|:])\\1|<<=?|>>=?|->|[-+*/%&|^!=<>]=?|[?:~]`, style:'hljs-operator', group:1},
	{regexp:'[{}[\\]();,.:]', style:'hljs-punctuation'},
)
//prism
const python = highlight(
	{regexp:'#.*', style:'hljs-comment'},
	{regexp:`(?:[rub]|br|rb)?("""|''')[^]*?\\1`, style:'hljs-string'},
	{regexp:`(?:[rub]|br|rb)?("|')(?:\\\\.|[^])*?\\1`, style:'hljs-string'},
	{regexp:`\\b(?:and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b`, style:'hljs-keyword'},
	{regexp:`\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b`, style:'hljs-built_in'},
	{regexp:'\\b(?:False|None|True)\\b', style:'hljs-literal'},
	{regexp:'[-+%=]=?|[!:]=|\\*\\*?=?|\\/\\/?=?|<[<=]?|>[>=]?|[&|^~]', style:'hljs-operator'},
	{regexp:'[{}[\\]();,.:]', style:'hljs-punctuation'},
)

exports.cpp = cpp;
exports.python = null;
