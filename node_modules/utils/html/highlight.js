'use strict';

function highlight(...patternList){
	const regexp = new RegExp(patternList.map(({regexp}) => `(${regexp})`).join('|'), 'g');
	return function*(code){
		let offset = 0;
		for(const match of code.matchAll(regexp)){
			const {index, 0:text} = match;
			const {style} = patternList[match.slice(1).findIndex(Boolean)];
			if(offset < index){
				yield {text: code.slice(offset, index)};
				offset = index;
			}
			yield {text, style};
			offset += text.length;
		}
		if(offset < code.length){
			yield {text: code.slice(offset)};
		}
	}
}

const id_exp = '[^\\W\\d]\\w*';

const cpp = highlight(
	{regexp:'\\/\\/.*|\\/\\*[^]*?\\*\\/', style:'hljs-comment'},
	{regexp:'#\\s*[a-z]+\\b', style:'hljs-meta'},
	{regexp:"'[\\x00-\\xFF]'", style:'hljs-string'},
	{regexp:'"[^]*?"', style:'hljs-string'},
	{regexp:'\\b(?:bool|char|char16_t|char32_t|char8_t|double|float|int|long|short|void|wchar_t|unsigned|signed|const|static)\\b', style:'hljs-type'},
	{regexp:'\\b(?:alignas|alignof|and|and_eq|asm|atomic_cancel|atomic_commit|atomic_noexcept|auto|bitand|bitor|break|case|catch|class|co_await|co_return|co_yield|compl|concept|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|dynamic_cast|else|enum|explicit|export|extern|false|final|for|friend|goto|if|import|inline|module|mutable|namespace|new|noexcept|not|not_eq|nullptr|operator|or|or_eq|override|private|protected|public|reflexpr|register|reinterpret_cast|requires|return|sizeof|static_assert|static_cast|struct|switch|synchronized|template|this|thread_local|throw|transaction_safe|transaction_safe_dynamic|true|try|typedef|typeid|typename|union|using|virtual|volatile|while|xor|xor_eq)\\b', style:'hljs-keyword'},
	{regexp:'\\b(?:NULL|false|true|nullopt|nullptr)\\b', style:'hljs-literal'},
	{regexp:`${id_exp}(?=\\s+${id_exp})`, style:'hljs-type'},
	{regexp:`(?<=${id_exp}\\s+)${id_exp}`, style:'hljs-title'},
	{regexp:`(?<=${id_exp}\\s*\\.\\s*)${id_exp}`, style:'hljs-attribute'},
	{regexp:id_exp},
	{regexp:'0[xX][0-9a-fA-F]+', style:'hljs-number'},
	{regexp:'\\d+(?:\\.\\d+)?(?:[eE]\\d+)?', style:'hljs-number'},
)

exports.cpp = cpp;
exports.python = null;
