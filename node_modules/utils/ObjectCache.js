'use strict';

class ObjectCache
{
	constructor(factory, resetFn){
		this.getCache = [];
		this.outCache = [];
		this.factory = factory;
		this.resetFn = resetFn;
	}

	getOut(){
		const {getCache, outCache} = this;
		const object = getCache.length > 0 ? getCache.pop() : this.factory();
		outCache.push(object);
		return object;
	}

	putIn(object){
		const {getCache, outCache} = this;
		const index = outCache.indexOf(object);
		if(index >= 0)outCache.splice(index, 1);
		getCache.push(object);
		this.resetFn?.(object);
	}

	putAllIn(){
		const {getCache, outCache} = this;
		while(outCache.length > 0){
			const object = outCache.pop();
			getCache.push(object);
			this.resetFn?.(object);
		}
	}
}

module.exports = ObjectCache;
