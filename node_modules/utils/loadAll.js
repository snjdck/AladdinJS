'use strict';

function loadSequential(loadFn, list, callback){
	const result = [];
	const onLoad = v => doLoad(result.push(v));
	const doLoad = i => i < list.length ? loadFn.call(this, list[i], onLoad) : callback(result);
	doLoad(0);
}

function loadParallel(loadFn, maxThread, list, callback){
	const len = list.length;
	if(len == 0)return callback([]);
	const onLoad = ((num=0, result=[]) => i => v => (result[i] = v, ++num < len ? doLoad() : callback(result)))();
	const doLoad = ((idx=0) => () => idx < len && loadFn.call(this, list[idx], onLoad(idx++)))();
	for(let i=0, n=Math.min(Math.max(1, maxThread), len); i<n; ++i)doLoad();
}

module.exports = {
	loadSequential,
	loadParallel,
};
