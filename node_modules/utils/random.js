'use strict';

const bool = () => Math.random() < 0.5;
const sign = () => bool() ? 1 : -1;
const rangeFloat = (a, b) => a + (b - a) * Math.random();
const rangeInt = (a, b) => Math.floor(rangeFloat(Math.ceil(a), Math.floor(b)));

function arrayItem(list, removeFlag=false){
	const index = Math.floor(list.length * Math.random());
	if(removeFlag)return list.splice(index, 1)[0];
	return list[index];
}

function arrayIndexes(length, count=1, repeatFlag=true){
	if(repeatFlag)return Array.from({length:count}, () => Math.floor(length * Math.random()));
	const indexList = Array.from({length}, (_, i) => i);
	return Array.from({length:Math.min(count,length)}, () => arrayItem(indexList, true));
}

function arrayItems(list, count=1, repeatFlag=true){
	const indexList = arrayIndexes(list.length, count, repeatFlag);
	return indexList.map(index => list[index]);
}

const randomGen = seed => value => {
	seed = (seed * 9301 + 49297) % 233280;
	return Math.floor(value * seed / 233280);
}

const createGen = seed => () => {
	seed ^= seed << 21;
	seed ^= seed >>> 35;
	seed ^= seed << 4;
	return seed / 0xFFFFFFFF;
}

function getProbability(list, key){
	const fn = getProbabilityIndex(list.map(v => v[key]));
	return value => list[fn(value)];
}

function getProbabilityIndex(list){
	let sum = 0;
	const level = list.map(v => sum += v);
	return value => {
		value = sum * (value ?? Math.random());
		return level.findIndex(v => value < v);
	}
}

module.exports = {
	bool,
	sign,
	rangeFloat,
	rangeInt,
	arrayItem,
	arrayIndexes,
	arrayItems,
	randomGen,
	createGen,
	getProbability,
};
