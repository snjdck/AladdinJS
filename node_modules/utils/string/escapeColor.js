
function* calcRestRange(range, subList){
	let i = range[0];
	for(const [x, y] of subList){
		yield [i, x];
		i = y;
	}
	yield [i, range[1]];
}

const calcRestText = (text, range, subList) => Array.from(calcRestRange(range, subList), v => text.slice(...v));

const concat = (raw, args) => String.raw({raw}, ...args);
const combine = (raw, args) => [raw[0], ...args.map((v, i) => [v, raw[i+1]]).flat(1)];

const castArgFn = text => (...args) => text.replace(/\$(\d)/g, (_, v) => args[v]);

const matchFn = (head, tail, handler) => text => {
	const stack = [];
	const rangeList = [];
	const valueList = [];
	for(const b of text.matchAll(head+'|'+tail)){
		if(b[0].search(tail) < 0){stack.push(b);continue;}
		const a = stack.pop();
		let index = rangeList.findIndex(v => v[0] > a.index);
		index = index < 0 ? Infinity : index;
		valueList.push(handler(...a.slice(1), combine(calcRestText(text,
			[a.index + a[0].length, b.index],
			rangeList.splice(index, Infinity, [a.index, b.index + b[0].length])
		), valueList.splice(index))));
	}
	console.assert(stack.length == 0);
	return concat(calcRestText(text, [0, text.length], rangeList), valueList);
}

//const escapeColor = matchFn(`\\[(#[0-9a-fA-F]{1,6})\\s`, `\\]`, castArgFn("<font color='$1'>$2</$1font>"));
const escapeColor = matchFn(`\\[(#[0-9a-fA-F]{1,6})\\s`, `\\]`, (a, b) => `<font color='${a}'>${b.join('')}</font>`);
exports.escapeColor = escapeColor;
/*
console.assert(escapeColor(`[#fff abc] def [#000 ghi]`) == `<font color='#fff'>abc</#ffffont> def <font color='#000'>ghi</#000font>`)
console.log('--')
console.assert(escapeColor(`[#f00 123[#0f0 45[#00f @@]6] 789]end`) == `<font color='#f00'>123<font color='#0f0'>45<font color='#00f'>@@</#00ffont>6</#0f0font> 789</#f00font>end`)

console.log('=============================')
const escapeHtml = matchFn(`<(\\w+).*?>`, `</\\w+>`, (b, c, d) => {
	c = c.map((v, i) => i & 1 ? v : `'${v}'`).join(', ')
	return `React.createElement('${b}', null, ${c})`
})

let t = `<div>abc<span>def</span><div>xyz</div>ghi</div>`
console.assert(escapeHtml(t) == `React.createElement('div', null, 'abc', React.createElement('span', null, 'def'), '', React.createElement('div', null, 'xyz'), 'ghi')`)
//*/