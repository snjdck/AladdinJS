'use strict';

const isNodeEnv = require('./isNodeEnv');

let encode, decode, encodeString, decodeString;

if(isNodeEnv()){
	encode = v => v.toString('base64');
	decode = v => Buffer.from(v, 'base64');
	encodeString = v => encode(Buffer.from(v));
	decodeString = v => decode(v).toString();
}else{
	const charList = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

	encode = data => {
		let output = [];
		for(let i=0, n=data.length; i<n; i+=3){
			let value = data[i] << 16 | data[i+1] << 8 | data[i+2];
			let t1 = value >> 18;
			let t2 = value >> 12 & 0x3F;
			let t3 = value >>  6 & 0x3F;
			let t4 = value       & 0x3F;
			output.push(charList[t1], charList[t2]);
			output.push(i+1 < n ? charList[t3] : '=');
			output.push(i+2 < n ? charList[t4] : '=');
		}
		return output.join('');
	};

	decode = data => {
		let output = [];
		for(let i=0, n=data.length; i<n; i+=4){
			let t1 = charList.indexOf(data.charAt(i));
			let t2 = charList.indexOf(data.charAt(i+1));
			let t3 = charList.indexOf(data.charAt(i+2));
			let t4 = charList.indexOf(data.charAt(i+3));
			output.push(t1 << 2 | t2 >> 4);
			if(t3 >= 0)output.push((t2 << 4 | t3 >> 2) & 0xFF);
			if(t4 >= 0)output.push((t3 << 6 | t4) & 0xFF);
		}
		return Uint8Array.from(output);
	};

	encodeString = (encoder => v => encode(encoder.encode(v)))(new TextEncoder());
	decodeString = (decoder => v => decoder.decode(decode(v)))(new TextDecoder());
}

exports.encode = encode;
exports.decode = decode;
exports.encodeString = encodeString;
exports.decodeString = decodeString;
