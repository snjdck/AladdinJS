
let encode, decode, encodeString, decodeString;

if(typeof Buffer === 'function'){
	encode = v => v.toString('base64');
	decode = v => Buffer.from(v, 'base64');
	encodeString = v => encode(Buffer.from(v));
	decodeString = v => decode(v).toString();
}else{
	const charList = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	encode = data => {
		let output = [];
		for(let i=0, n=data.length; i<n; i+=3){
			let value = data[i] << 16 | data[i+1] << 8 | data[i+2];

			let t1 = value >> 18;
			let t2 = value >> 12 & 0x3F;
			let t3 = value >>  6 & 0x3F;
			let t4 = value       & 0x3F;

			if (i+1 >= n) t3 = 64;
			if (i+2 >= n) t4 = 64;

			output.push(
				charList.charAt(t1),
				charList.charAt(t2),
				charList.charAt(t3),
				charList.charAt(t4)
			);
		}
		return output.join('');
	};

	decode = data => {
		let output = [];
		for(let i=0, n=data.length; i<n; i+=4){
			let t1 = charList.indexOf(data.charAt(i));
			let t2 = charList.indexOf(data.charAt(i+1));
			let t3 = charList.indexOf(data.charAt(i+2));
			let t4 = charList.indexOf(data.charAt(i+3));

			let value = t1 << 18 | t2 << 12 | t3 << 6 | t4;

			output.push(value >> 16);

			if (t3 < 64) output.push(value >> 8 & 0xFF);
			if (t4 < 64) output.push(value      & 0xFF);
		}
		return Uint8Array.from(output);
	};

	encodeString = (encoder => v => encode(encoder.encode(v)))(new TextEncoder());
	decodeString = (decoder => v => decoder.decode(decode(v)))(new TextDecoder());
}

exports.encode = encode;
exports.decode = decode;
exports.encodeString = encodeString;
exports.decodeString = decodeString;
