'use strict';

function waitWhen(target, event, checker, timeout=1000){
	return new Promise((resolve, reject) => {
		const timer = setTimeout(() => {
			target.off(event, onCall);
			reject('timeout');
		}, timeout);
		function onCall(...args){
			const result = checker(...args);
			if(result === false)return;
			target.off(event, onCall);
			clearTimeout(timer);
			resolve(result);
		}
		target.on(event, onCall);
	});
}

function waitOnce(target, event, timeout=1000){
	return waitWhen(target, event, (...args) => args, timeout);
}

const listen1 = (target, event) => callback => target.once(event, callback);
const listen2 = (target, event) => {
	let waitCount = 0;
	return callback => {
		let count = waitCount++;
		target.on(event, function fn(v){
			if(count > 0)return count--;
			waitCount--;
			target.off(event, fn);
			callback(v);
		});
	}
}
const listen = (target, event) => {
	const waitList = [];
	target.on(event, v => waitList.shift()(v));
	return callback => waitList.push(callback);
}

exports.waitWhen = waitWhen;
exports.waitOnce = waitOnce;
exports.listenFIFO = listen;
