
const wrapCache = handler => loadFn => async path => {
	if(handler.has(path))return handler.get(path);
	const data = await loadFn(path);
	handler.set(path, data);
	return data;
}

const wrapFileCache = wrapCache({
	keyFn:function(){
		const pattern = /[\\\/|<:>*?"]/g;
		const replaceFn = v => '%' + v.charCodeAt(0).toString(16).padStart(2, '0');
		return path => './temp/' + path.replace(pattern, replaceFn);
	}(),
	has(path){
		const fs = require('fs');
		return fs.existsSync(this.keyFn(path));
	},
	get(path){
		const fs = require('fs');
		return fs.readFileSync(this.keyFn(path));
	},
	set(path, data){
		const fs = require('fs');
		fs.writeFileSync(this.keyFn(path), data);
	},
});

const wrapStorageCache = wrapCache({
	encode: bin => Array.from(bin, v => v.toString(16).padStart(2, '0')).join(''),
	decode: hex => Uint8Array.from(hex.match(/\w{2}/g), v => parseInt(v, 16)),
	has(path){
		return localStorage.getItem(path) != null;
	},
	get(path){
		return this.decode(localStorage.getItem(path));
	},
	set(path, data){
		localStorage.setItem(path, this.encode(data));
	},
});

module.exports = {
	wrapFileCache,
	wrapStorageCache,
};