
const wrapFileCache = function(){
	const keyFn = function(){
		const pattern = /[\\\/|<:>*?"]/g;
		const replaceFn = v => '%' + v.charCodeAt(0).toString(16).padStart(2, '0');
		return path => './temp/' + path.replace(pattern, replaceFn);
	}();
	return loadFn => async path => {
		const {existsSync, readFileSync, writeFileSync} = require('fs');
		const key = keyFn(path);
		if(existsSync(key))return readFileSync(key);
		const result = await loadFn(path);
		writeFileSync(key, result);
		return result;
	}
}();

const wrapStorageCache = function(){
	const encode = bin => Array.from(bin, v => v.toString(16).padStart(2, '0')).join('');
	const decode = hex => Uint8Array.from(hex.match(/\w{2}/g), v => parseInt(v, 16));
	return loadFn => async path => {
		const text = localStorage.getItem(path);
		if(text != null)return decode(text);
		const result = await loadFn(path);
		localStorage.setItem(path, encode(result));
		return result;
	}
}();

module.exports = {
	wrapFileCache,
	wrapStorageCache,
};