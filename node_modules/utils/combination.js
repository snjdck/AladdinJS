'use strict';

const range = (f => length => Array.from({length}, f))((_, i) => i);

function* permutation(list, offset=0){
	if(offset >= list.length){
		return yield [];
	}
	for(let tail of permutation(list, offset+1)){
		for(let head of list[offset]){
			yield [head, ...tail];
		}
	}
}

function* combination(list, count=list.length){
	if(list.length === count)return yield list;
	if(list.length < count)return;
	if(count <= 0)return yield [];
	if(count === 1){
		for(let v of list)yield [v];
		return;
	}
	for(let i=0, n=list.length-count; i<=n; ++i){
		let head = list[i];
		for(let tail of combination(list.slice(i+1), count-1)){
			yield [head, ...tail];
		}
	}
}

function* arrangement(list, count=list.length){
	if(list.length < count)return;
	if(count <= 0)return yield [];
	if(count === 1){
		for(let v of list)yield [v];
		return;
	}
	for(let i=0, n=list.length; i<n; ++i){
		let head = list[i];
		for(let tail of arrangement(list.filter((_, j) => i != j), count-1)){
			yield [head, ...tail];
		}
	}
}

module.exports = {
	range,
	permutation,
	combination,
	arrangement,
};
