'use strict';

function defineMethod(target, prop, value){
	return Object.defineProperty(target, prop, {
		writable: true,
		configurable: true,
		enumerable: false,
		value
	});
}

const defineFunctionMethod = (prop, value) => defineMethod(Function.prototype, prop, value);

defineFunctionMethod('before', function(fn){
	return this.wrap(fn);
});

defineFunctionMethod('after', function(fn){
	return this.wrap(null, fn);
});

defineFunctionMethod('wrap', function(prev, next){
	if(!(prev || next))return this;
	const self = this;
	return function(...args){
		if(prev)prev.apply(this, args);
		const result = self.apply(this, args);
		if(next)next.apply(this, args);
		return result;
	};
});

defineFunctionMethod('delayCall', function(timeout=0){
	return (...args) => setTimeout(this, timeout, ...args);
});
