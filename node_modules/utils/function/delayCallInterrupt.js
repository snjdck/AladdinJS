'use strict';

const call = Function.prototype.apply.call.bind(Function.prototype.apply);

exports.timerDelay = (fn, delay=0, timer) => function(...args){
	clearTimeout(timer);
	timer = setTimeout(call, delay, fn, this, args);
}

exports.frameDelay = (fn, id) => function(...args){
	cancelAnimationFrame(id);
	id = requestAnimationFrame(() => fn.apply(this, args));
}

exports.idleDelay = (fn, id) => function(...args){
	cancelIdleCallback(id);
	id = requestIdleCallback(() => fn.apply(this, args));
}

exports.microDelay = fn => {
	let _self, _args;
	function exec(){
		let self = _self;
		let args = _args;
		_self = _args = null;
		fn.apply(self, args);
	}
	return function(...args){
		if(!_args)queueMicrotask(exec);
		_self = this;
		_args = args;
	}
}
