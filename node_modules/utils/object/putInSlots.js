
const newPutFn = (maxCountPerSlot, usage=[]) => count => {
	const result = [];
	const extra = count % maxCountPerSlot;
	for(let i=extra; i<count; i+=maxCountPerSlot){
		result.push({
			index: usage.push(0)-1,
			count: maxCountPerSlot,
			offsetInSlot: 0,
			offsetInItem: i - extra,
		});
	}
	if(extra <= 0)return result;
	const n = usage.length;
	let minIndex = n;
	let minValue = maxCountPerSlot;
	for(let i=0; i<n; ++i){
		const v = usage[i];
		if(v < extra || v >= minValue)continue;
		minIndex = i;
		minValue = v;
	}
	if(minIndex < n){
		usage[minIndex] -= extra;
	}else{
		usage.push(maxCountPerSlot - extra);
	}
	result.push({
		index: minIndex,
		count: extra,
		offsetInSlot: maxCountPerSlot - minValue,
		offsetInItem: count - extra,
	});
	return result;
}

const activeSlots = function(){
	function forEachFn(slot){slot.temp = slot.add(this)}
	function findFn(v){return this >= v.offsetInItem}
	return function*(slotList, itemList){
		if(slotList.length <= 0 || itemList.length <= 0)return;
		slotList.forEach(forEachFn, itemList);
		for(let i=0, n=itemList.length; i<n;){
			let j=Infinity;
			for(let slot of slotList){
				const {index, count, offsetInSlot, offsetInItem} = slot.temp.findLast(findFn, i);
				slot.active(index, offsetInSlot + i - offsetInItem);
				j = Math.min(j, offsetInItem + count);
			}
			yield j - i;
			i = j;
		}
	}
}();

/*
function assert(valueList, result){
	let putInSlots = newPutFn(10);
	let list = valueList.map(putInSlots).reduce((a, b) => a.concat(b), []).map(v => [v.index, v.offsetInSlot, v.count]);
	let value = JSON.stringify(list);
	console.assert(value == result, value, result);
}

assert([0], '[]')
assert([6,7,3,4], '[[0,0,6],[1,0,7],[1,7,3],[0,6,4]]')
assert([5,7,4,1,1,2], '[[0,0,5],[1,0,7],[0,5,4],[0,9,1],[1,7,1],[1,8,2]]')
assert([7,3], '[[0,0,7],[0,7,3]]')
assert([7,4], '[[0,0,7],[1,0,4]]')
assert([7,4,3], '[[0,0,7],[1,0,4],[0,7,3]]')
assert([17,13], '[[0,0,10],[1,0,7],[2,0,10],[1,7,3]]')
assert([50, 50], '[[0,0,10],[1,0,10],[2,0,10],[3,0,10],[4,0,10],[5,0,10],[6,0,10],[7,0,10],[8,0,10],[9,0,10]]')

void function(){
	let result = [[],[]];
	let newSlot = (v, i) => ({
		f:newPutFn(v),
		add(itemList){return this.f(itemList.length)},
		active(...args){result[i].push(args)}
	})
	result[2] = Array.from(activeSlots([3,2].map(newSlot), new Array(6)));
	console.log(JSON.stringify(result) == '[[[0,0],[0,2],[1,0],[1,1]],[[0,0],[1,0],[1,1],[2,0]],[2,1,1,2]]')
}();
//*/

exports.newPutFn = newPutFn;
exports.activeSlots = activeSlots;
