
const props = ['maxHp', 'hp', 'hpRate', 'maxMp', 'mp', 'mpRate', 'attack', 'defend', 'magicAttack', 'magicDefend', 'attackRange', 'attackSpeed', 'moveSpeed'];
const propFix = ['Modify', 'ModifyPercent'];

class Attachment
{
	static merge(attachmentList){
		let result = new this();
		for(let attachment of attachmentList){
			for(let k of props){
				for(let fix of propFix){
					let key = k + fix;
					result[key] += attachment[key];
				}
			}
		}
		return result;
	}

	constructor(){
		this.reset();
	}

	reset(){
		for(let k of props){
			for(let fix of propFix){
				this[k+fix] = 0;
			}
		}
	}
}

class Buff extends Attachment
{
	constructor(){
		super();
		this.type = 1;
		this.duration = 0;
	}

	get maxStackCount(){
		return 1;
	}

	get overflowReplaceType(){
		//forbid, remove oldest
		return 0;
	}
}

//cooldown confict table
//buff exist confict table
class Skill
{
	constructor(){
		this.cooldownTime = 2;
	}
}

class Unit
{
	constructor(){
		this.maxHp = 500;
		this.hp = this.maxHp;
		this.hpRate = 5;

		this.maxMp = 500;
		this.mp = this.maxMp;
		this.mpRate = 5;

		this.attack = 50;
		this.defend = 10;

		this.magicAttack = 50;
		this.magicDefend = 10;
		
		this.range = 300;

		this.attackInterval = 2;
		this.moveSpeed = 300;
	}

	clone(){
		let result = new Unit();
		for(let k of props){
			result[k] = this[k];
		}
		return result;
	}
}

class Player
{
	constructor(){
		this.unit = new Unit();
		this.attachmentList = [];
		this.buffList = [];
	}
}