'use strict';

const sortBy = require('utils/array/sortBy');

const width=4, height=5;
const A=1, B=2, C=3, D=4;

const isSuccess = v => v[13] === A && v[14] === A && v[17] === A && v[18] === A;

function cloneBuffer(data){
	const result = Buffer.from(data);
	Object.defineProperty(result, 'prev', {value:data, writable:true});
	return result;
}

function checkOne(stepList, data, index){
	const x = index % width;
	const y = Math.floor(index / width);
	if(x > 0){
		const testIndex = index - 1;
		const test = data[testIndex];
		if(test == D){
			const result = cloneBuffer(data);
			result[index] = test;
			result[testIndex] = 0;
			stepList.push(result);
		}else if(test == C){
			const result = cloneBuffer(data);
			result[index] = test;
			result[testIndex-1] = 0;
			stepList.push(result);
		}
	}
	if(x < 3){
		const testIndex = index + 1;
		const test = data[testIndex];
		if(test == D){
			const result = cloneBuffer(data);
			result[index] = test;
			result[testIndex] = 0;
			stepList.push(result);
		}else if(test == C){
			const result = cloneBuffer(data);
			result[index] = test;
			result[testIndex+1] = 0;
			stepList.push(result);
		}
	}
	if(y > 0){
		const testIndex = index - 4;
		const test = data[testIndex];
		if(test == D){
			const result = cloneBuffer(data);
			result[index] = test;
			result[testIndex] = 0;
			stepList.push(result);
		}else if(test == B){
			const result = cloneBuffer(data);
			result[index] = test;
			result[testIndex-4] = 0;
			stepList.push(result);
		}
	}
	if(y < 4){
		const testIndex = index + 4;
		const test = data[testIndex];
		if(test == D){
			const result = cloneBuffer(data);
			result[index] = test;
			result[testIndex] = 0;
			stepList.push(result);
		}else if(test == B){
			const result = cloneBuffer(data);
			result[index] = test;
			result[testIndex+4] = 0;
			stepList.push(result);
		}
	}
}

function checkTwo(stepList, data, a, b){
	const x = a % width;
	const y = Math.floor(a / width);
	if(x < 3 && a + 1 == b){
		if(y > 0){
			const test = data[a-4];
			if(test == data[b-4] && (test == A || test == C)){
				const offset = test == A ? 8 : 4;
				const result = cloneBuffer(data);
				result[a] = result[b] = test;
				result[a-offset] = result[b-offset] = 0;
				stepList.push(result);
			}
		}
		if(y < 4){
			const test = data[a+4];
			if(test == data[b+4] && (test == A || test == C)){
				const offset = test == A ? 8 : 4;
				const result = cloneBuffer(data);
				result[a] = result[b] = test;
				result[a+offset] = result[b+offset] = 0;
				stepList.push(result);
			}
		}
	}else if(y < 4 && a + 4 == b){
		if(x > 0){
			const test = data[a-1];
			if(test == data[b-1] && (test == A || test == B)){
				if(!(test == B && ((y == 1 && data[a-5] == B) || (y == 2 && data[b+3] == B)))){
					const offset = test == A ? 2 : 1;
					const result = cloneBuffer(data);
					result[a] = result[b] = test;
					result[a-offset] = result[b-offset] = 0;
					stepList.push(result);
				}
			}
		}
		if(x < 3){
			const test = data[a+1];
			if(test == data[b+1] && (test == A || test == B)){
				if(!(test == B && ((y == 1 && data[a-3] == B) || (y == 2 && data[b+5] == B)))){
					const offset = test == A ? 2 : 1;
					const result = cloneBuffer(data);
					result[a] = result[b] = test;
					result[a+offset] = result[b+offset] = 0;
					stepList.push(result);
				}
			}
		}
	}
}

function checkOneTwo(stepList, data, a, b){
	const x = a % width;
	const y = Math.floor(a / width);
	if(x < 3 && a + 1 == b){
		if(x > 0){
			if(data[a-1] == D){
				const result = cloneBuffer(data);
				result[a-1] = 0;
				result[b] = D;
				stepList.push(result);
			}else if(data[a-1] == C){
				const result = cloneBuffer(data);
				result[a-2] = result[b-2] = 0;
				result[a] = result[b] = C;
				stepList.push(result);
			}
		}
		if(x < 2){
			if(data[b+1] == D){
				const result = cloneBuffer(data);
				result[b+1] = 0;
				result[a] = D;
				stepList.push(result);
			}else if(data[b+1] == C){
				const result = cloneBuffer(data);
				result[a+2] = result[b+2] = 0;
				result[a] = result[b] = C;
				stepList.push(result);
			}
		}
		if(y > 0){
			if(data[a-4] == D){
				const result = cloneBuffer(data);
				result[a-4] = 0;
				result[b] = D;
				stepList.push(result);
			}
			if(data[b-4] == D){
				const result = cloneBuffer(data);
				result[a] = D;
				result[b-4] = 0;
				stepList.push(result);
			}
		}
		if(y < 4){
			if(data[a+4] == D){
				const result = cloneBuffer(data);
				result[a+4] = 0;
				result[b] = D;
				stepList.push(result);
			}
			if(data[b+4] == D){
				const result = cloneBuffer(data);
				result[a] = D;
				result[b+4] = 0;
				stepList.push(result);
			}
		}
	}else if(y < 4 && a + 4 == b){
		if(y > 0){
			if(data[a-4] == D){
				const result = cloneBuffer(data);
				result[a-4] = 0;
				result[b] = D;
				stepList.push(result);
			}else if(data[a-4] == B){
				const result = cloneBuffer(data);
				result[a-8] = result[b-8] = 0;
				result[a] = result[b] = B;
				stepList.push(result);
			}
		}
		if(y < 3){
			if(data[b+4] == D){
				const result = cloneBuffer(data);
				result[b+4] = 0;
				result[a] = D;
				stepList.push(result);
			}else if(data[b+4] == B){
				const result = cloneBuffer(data);
				result[a+8] = result[b+8] = 0;
				result[a] = result[b] = B;
				stepList.push(result);
			}
		}
		if(x > 0){
			if(data[a-1] == D){
				const result = cloneBuffer(data);
				result[a-1] = 0;
				result[b] = D;
				stepList.push(result);
			}
			if(data[b-1] == D){
				const result = cloneBuffer(data);
				result[a] = D;
				result[b-1] = 0;
				stepList.push(result);
			}
		}
		if(x < 3){
			if(data[a+1] == D){
				const result = cloneBuffer(data);
				result[a+1] = 0;
				result[b] = D;
				stepList.push(result);
			}
			if(data[b+1] == D){
				const result = cloneBuffer(data);
				result[a] = D;
				result[b+1] = 0;
				stepList.push(result);
			}
		}
	}
}

function calcCount(data){
	let count = 0;
	while(data.prev){
		++count;
		data = data.prev;
	}
	return count;
}

function main(init){
	const stepList = [init];
	const checkedSignDict = Object.create(null);
	const successList = [];
	while(stepList.length > 0){
		const data = stepList.shift();
		if(isSuccess(data)){
			successList.push(data);
			continue;
		}
		const sign = data.toString('hex');
		if(sign in checkedSignDict){
			const test = checkedSignDict[sign];
			if(calcCount(data) < calcCount(test)){
				test.prev = data.prev;
			}
			continue;
		}
		checkedSignDict[sign] = data;
		const a = data.indexOf(0);
		const b = data.lastIndexOf(0);
		checkOne(stepList, data, a);
		checkOne(stepList, data, b);
		checkTwo(stepList, data, a, b);
		checkOneTwo(stepList, data, a, b);
	}
	let list = printResult(sortBy(successList, calcCount)[0]);
	console.log(list.length)
	require('fs').writeFileSync('./data.txt', list.length + '\n' + list.join('\n'+'-'.repeat(11)+'\n'))
}

function printResult(data){
	let result = [];
	while(data.prev){
		result.push(data)
		data = data.prev;
	}
	result.push(data);
	return result.reverse().map(data => printSign(data.toString('hex')));
}

function printSign(sign){
	return sign.match(/\w{8}/g).map(v => '|' + v + ' |').join('\n').replace(/\d{2}/g, v => ' ' + ((v === '00') ? ' ' : String.fromCharCode(Number(v) + 64)));
}

//let a = Date.now();
main(Buffer.from([
	B,   A,   A,   B,
	B,   A,   A,   B,
	B,   C,   C,   B,
	B,   D,   D,   B,
	D,   0,   0,   D,
]));
//console.log(Date.now() - a)