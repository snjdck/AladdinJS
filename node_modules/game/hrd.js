'use strict';

const sortBy = require('utils/array/sortBy');

const width=4, height=5;
const A=1, B=2, C=3, D=4;

const isSuccess = v => v[13] === A && v[14] === A && v[17] === A && v[18] === A;

function cloneBuffer(stepList, data){
	const result = Buffer.from(data);
	Object.defineProperty(result, 'prev', {value:data, writable:true});
	stepList.push(result);
	return result;
}

function help4(stepList, data, index, test, offset){
	const value = data[index+offset];
	if(value == D || value == test){
		const result = cloneBuffer(stepList, data);
		result[index] = value;
		result[index+offset*(value == D ? 1 : 2)] = 0;
	}
}

function checkOne(stepList, data, index){
	const x = index % width;
	const y = Math.floor(index / width);
	if(x > 0){
		help4(stepList, data, index, C, -1);
	}
	if(x < width-1){
		help4(stepList, data, index, C,  1);
	}
	if(y > 0){
		help4(stepList, data, index, B, -width);
	}
	if(y < height-1){
		help4(stepList, data, index, B,  width);
	}
}

function help(stepList, data, a, b, offset){
	if(data[a+offset] == D){
		const result = cloneBuffer(stepList, data);
		result[a+offset] = 0;
		result[b] = D;
	}
	if(data[b+offset] == D){
		const result = cloneBuffer(stepList, data);
		result[a] = D;
		result[b+offset] = 0;
	}
}

function help1(stepList, data, a, b, offset, test){
	const value = data[a+offset];
	if(value == D){
		const result = cloneBuffer(stepList, data);
		result[a+offset] = 0;
		result[b] = D;
	}else if(value == test){
		const result = cloneBuffer(stepList, data);
		result[a+offset*2] = result[b+offset*2] = 0;
		result[a] = result[b] = test;
	}
}

function help2(stepList, data, a, b, offset){
	const test = data[a+offset];
	if(test == data[b+offset] && (test == A || test == C)){
		const result = cloneBuffer(stepList, data);
		result[a] = result[b] = test;
		if(test == A)offset *= 2;
		result[a+offset] = result[b+offset] = 0;
	}
}

function help3(stepList, data, a, b, y, offset){
	const test = data[a+offset];
	if(test == data[b+offset] && (test == A || test == B)){
		if(!(test == B && ((y == 1 && data[a-width+offset] == B) || (y == 2 && data[b+width+offset] == B)))){
			const result = cloneBuffer(stepList, data);
			result[a] = result[b] = test;
			if(test == A)offset *= 2;
			result[a+offset] = result[b+offset] = 0;
		}
	}
}

function checkTwo(stepList, data, a, b){
	const x = a % width;
	const y = Math.floor(a / width);
	if(x < width-1 && a + 1 == b){
		if(x > 0){
			help1(stepList, data, a, b, -1, C);
		}
		if(x < width-2){
			help1(stepList, data, b, a,  1, C);
		}
		if(y > 0){
			help2(stepList, data, a, b, -width);
			help(stepList, data, a, b, -width);
		}
		if(y < height-1){
			help2(stepList, data, a, b, width);
			help(stepList, data, a, b, width);
		}
	}else if(y < height-1 && a + width == b){
		if(y > 0){
			help1(stepList, data, a, b, -width, B);
		}
		if(y < height-2){
			help1(stepList, data, b, a, width, B);
		}
		if(x > 0){
			help3(stepList, data, a, b, y, -1);
			help(stepList, data, a, b, -1);
		}
		if(x < width-1){
			help3(stepList, data, a, b, y, 1);
			help(stepList, data, a, b, 1);
		}
	}
}

function calcCount(data){
	let count = 0;
	while(data.prev){
		++count;
		data = data.prev;
	}
	return count;
}

function main(init){
	const stepList = [init];
	const checkedSignDict = Object.create(null);
	const successList = [];
	while(stepList.length > 0){
		const data = stepList.shift();
		if(isSuccess(data)){
			successList.push(data);
			continue;
		}
		const sign = data.toString('hex');
		if(sign in checkedSignDict){
			const test = checkedSignDict[sign];
			if(calcCount(data) < calcCount(test)){
				test.prev = data.prev;
			}
			continue;
		}
		checkedSignDict[sign] = data;
		const a = data.indexOf(0);
		const b = data.lastIndexOf(0);
		checkOne(stepList, data, a);
		checkOne(stepList, data, b);
		checkTwo(stepList, data, a, b);
	}
	let list = printResult(sortBy(successList, calcCount)[0]);
	console.log(list.length)
	//require('fs').writeFileSync('./data.txt', list.length + '\n' + list.join('\n'+'-'.repeat(11)+'\n'))
}

function printResult(data){
	let result = [];
	while(data.prev){
		result.push(data)
		data = data.prev;
	}
	result.push(data);
	return result.reverse().map(data => printSign(data.toString('hex')));
}

function printSign(sign){
	return sign.match(/\w{8}/g).map(v => '|' + v + ' |').join('\n').replace(/\d{2}/g, v => ' ' + ((v === '00') ? ' ' : String.fromCharCode(Number(v) + 64)));
}

let a = Date.now();
main(Buffer.from([
	B,   A,   A,   B,
	B,   A,   A,   B,
	B,   C,   C,   B,
	B,   D,   D,   B,
	D,   0,   0,   D,
]));
console.log(Date.now() - a)