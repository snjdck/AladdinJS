

const exec = function(){
	let stack = [];
	let index = 0;
	return function(value){
		loop:for(;;){
			switch(index){
				case 0:++index;stack.push('hello', ' world');
				//case 1:++index;return {value:test.apply(null, stack.splice(-1,1))};
				case 1:++index;return {value:add.apply(null, stack.splice(-2,2))};
				case 2:++index;stack.push(value);
				case 3:++index;return {value:console.log.apply(null, stack.splice(-1,1))};
				case 4:index -= 4;return {};
				//case 3:if(stack.pop()){index += 3;continue;}else{++index;}
				default:break loop;
			}
		}
		return {done:true};
	}
}

const add = function(a, b){
	let stack = [];
	let index = 0;
	let varDict = {a, b};
	return function(value){
		loop:for(;;){
			switch(index){
				case 0:++index;stack.push(varDict['a']);
				case 1:++index;stack.push(varDict['b']);
				case 2:++index;return {value:stack.pop()+stack.pop()};
				case 3:++index;stack.push(value);
				case 4:++index;return {done:true, value:stack.pop()};
				default:break loop;
			}
		}
		return {done:true};
	}
}

void async function(){
	let stack = [exec()];
	let done, value;
	for(;;){
		let result = stack[stack.length-1](value);
		value = result.value;
		if(result.done){
			stack.pop();
			if(stack.length == 0){
				break;
			}
		}else if(value instanceof Promise){
			value = await value;
		}else if(value instanceof Function){
			stack.push(value);
		}
		await new Promise(v => setTimeout(v, 1))
	}
}()



