"use strict";

const {
	BLOCK_TYPE_EXPRESSION,
	BLOCK_TYPE_STATEMENT,
	BLOCK_TYPE_BREAK,
	BLOCK_TYPE_CONTINUE,
	BLOCK_TYPE_FOR,
	BLOCK_TYPE_IF,
	BLOCK_TYPE_ELSE_IF,
	BLOCK_TYPE_ELSE,

	BLOCK_TYPE_ARDUINO,

	INSERT_PT_BELOW,
	INSERT_PT_ABOVE,
	INSERT_PT_SUB,
	INSERT_PT_WRAP,
	INSERT_PT_CHILD
} = require("./BlockConst");

function filter(ptList, blockType)
{
	switch(blockType){
		case BLOCK_TYPE_ELSE_IF:
			return filterElseIf(ptList);
		case BLOCK_TYPE_ELSE:
			return filterElse(ptList);
	}
	return filterOthers(ptList);
}
		
function filterElseIf(ptList)
{
	let result = [];
	for(let ptInfo of ptList){
		if(ptInfo.type != INSERT_PT_BELOW){
			continue;
		}
		if(ptInfo.block.isIfBlock()){
			result.push(ptInfo);
		}
	}
	return result;
}


function filterElse(ptList)
{
	let result = [];
	for(let ptInfo of ptList){
		if(ptInfo.type != INSERT_PT_BELOW){
			continue;
		}
		let block = ptInfo.block;
		if(!block.isIfBlock()){
			continue;
		}
		block = block.nextBlock;
		if(block == null || !block.isElseBlock()){
			result.push(ptInfo);
		}
	}
	return result;
}

function filterOthers(ptList)
{
	let result = [];
	for(let ptInfo of ptList){
		if(ptInfo.type != INSERT_PT_BELOW){
			result.push(ptInfo);
			continue;
		}
		let block = ptInfo.block.nextBlock;
		if(block == null || !block.isElseBlock()){
			result.push(ptInfo);
		}
	}
	return result;
}

exports.filter = filter;
