
class FunctionScope
{
	constructor(funcRef){
		this.funcRefList = new Set([funcRef]);
		this.prevCodeList = null;
		this.nextCodeList = null;
		this.prevContext = null;
		this.nextContext = null;
		this.resumeAddress = 0;
		this.returnAddress = 0;
		this.ignoreYieldFlag = false;
		this.prevRunFlag = 0;
		this.retCount = 0;
		this.generatorFlag = funcRef.generatorFlag;
	}
	
	join(other){
		for(let v of other.funcRefList){
			this.funcRefList.add(v);
		}
		this.prevCodeList = other.prevCodeList;
		this.prevContext = other.prevContext;
		this.prevRunFlag = other.prevRunFlag;
		this.returnAddress = other.returnAddress;
	}
	
	snapshot(thread){
		this.prevCodeList = thread.codeList;
		this.prevContext = thread.context;
		this.prevRunFlag = thread.runFlag;
		this.returnAddress = thread.ip;
	}
	
	doInvoke(thread, snapshotFlag=true){
		if(snapshotFlag){
			this.snapshot(thread);
		}
		thread.codeList = this.nextCodeList;
		thread.context = this.nextContext;
		thread.ip = this.resumeAddress + 1;
		if(this.ignoreYieldFlag){
			++thread.runFlag;
		}
	}
	
	doReturn(thread){
		thread.codeList = this.prevCodeList;
		thread.context = this.prevContext;
		thread.runFlag = this.prevRunFlag;
		thread.ip = this.returnAddress;// + 1;
	}
	
	hasInvoked(funcRef){
		return this.funcRefList.has(funcRef);
	}
	
	onReturn(thread){
		this.resumeAddress = thread.ip;
		this.doReturn(thread);
	}
}

module.exports = FunctionScope;