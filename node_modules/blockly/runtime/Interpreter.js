
import Thread from "./Thread";
import VirtualMachine from "./VirtualMachine";
import castJsonCodeToAssembly from "./JsonCodeToAssembly";
import calcCondition from "./ConditionCalculater";
import optimizeAssembly from "./AssemblyOptimizer";
import cleanDeadCode from "./DeadCodeCleaner";
import printCodeList from "./CodeListPrinter";

class Interpreter
{
	constructor(functionProvider){
		this.functionProvider = functionProvider;
		this.virtualMachine = new VirtualMachine();
	}

	run(){
		if(typeof requestAnimationFrame != "function"){
			setInterval(()=>this.tick(), 1000/60);
			return;
		}
		const updater = timeElapsed => {
			requestAnimationFrame(updater);
			this.tick();
		};
		requestAnimationFrame(updater);
	}

	tick(){
		if(this.virtualMachine.getThreadCount() > 0){
			this.virtualMachine.onTick();
		}
	}
	
	compile(blockList){
		let codeList = castJsonCodeToAssembly(blockList);
		calcCondition(codeList);
		optimizeAssembly(codeList);
		cleanDeadCode(codeList);
		return codeList;
	}
	
	execute(blockList, globalContext=null){
		return this.executeAssembly(this.compile(blockList), globalContext);
	}
	
	executeAssembly(codeList, globalContext=null){
		if(globalContext){
			globalContext.parent = this.functionProvider.context;
		}else{
			globalContext = this.functionProvider.context;
		}
		let thread = new Thread(this.virtualMachine, codeList, globalContext);
		this.virtualMachine.startThread(thread);
		return thread;
	}
	
	executeAssemblySynchronously(codeList){
		let thread = new Thread(this.virtualMachine, codeList, null);
		this.virtualMachine.execute(thread);
		return thread.context;
	}
	
	executeSynchronously(blockList){
		return this.executeAssemblySynchronously(this.compile(blockList));
	}
	
	stopAllThreads(){
		this.virtualMachine.stopAllThreads();
	}
	
	getCopyOfThreadList(){
		return this.virtualMachine.getCopyOfThreadList();
	}
	
	getThreadCount(){
		return this.virtualMachine.getThreadCount();
	}
	
	castCodeListToString(codeList){
		return printCodeList(codeList);
	}
}

export default Interpreter;