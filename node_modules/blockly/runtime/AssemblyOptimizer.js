
import OpCode from "../OpCode";

const stack = [];

function optimize(codeList)
{
	runPass(codeList, OpCode.JUMP, optimizeJump);
	runPass(codeList, OpCode.JUMP_IF, optimizeConditionJump);
}

function runPass(codeList, op, handler)
{
	for(let i=0, n=codeList.length; i<n; ++i){
		if(op === codeList[i][0]){
			handler(codeList, i);
		}
	}
}

function optimizeConditionJump(codeList, index)
{
	let code = codeList[index];
	let jumpToCode = codeList[index+code[1]];
	if(jumpToCode && jumpToCode[0] === OpCode.JUMP){
		code[1] += jumpToCode[1];
	}
}

function optimizeJump(codeList, index)
{
	codeList[index][1] = getFinalJumpCount(codeList, index);
}

function getFinalJumpCount(codeList, index)
{
	let count = stack.length = 0;
	for(;;){
		let code = codeList[index+count];
		if(code == null || code[0] !== OpCode.JUMP){
			break;
		}
		if(code[1] === 0)
			return 0;
		count += code[1];
		if(stack.includes(count))
			return 0;
		stack.push(count);
	}
	return count;
}

export default optimize;