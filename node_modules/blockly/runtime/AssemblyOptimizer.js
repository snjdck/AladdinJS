"use strict";

const OpCode = require("../OpCode");

const jumpOpList = [OpCode.JUMP];
const conditionJumpOpList = [OpCode.JUMP_IF_FALSE, OpCode.JUMP_IF_POSITIVE];
const stack = [];

function optimize(codeList)
{
	runPass(codeList, jumpOpList, optimizeJump);
	runPass(codeList, conditionJumpOpList, optimizeConditionJump);
}

function runPass(codeList, opList, handler)
{
	for(let i=0, n=codeList.length; i<n; ++i){
		if(opList.includes(codeList[i][0])){
			handler(codeList, i);
		}
	}
}

function optimizeConditionJump(codeList, index)
{
	let code = codeList[index];
	let jumpToCode = codeList[index+code[1]];
	if(jumpToCode && jumpToCode[0] == OpCode.JUMP){
		code[1] += jumpToCode[1];
	}
}

function optimizeJump(codeList, index)
{
	var realCount = getFinalJumpCount(codeList, index);
	var code = codeList[index];
	if(code[1] != realCount){
		code[1] = realCount;
	}
}

function getFinalJumpCount(codeList, index)
{
	let count = stack.length = 0;
	for(;;){
		let code = codeList[index+count];
		if(code == null || code[0] != OpCode.JUMP){
			break;
		}
		if(code[1] == 0){
			return 0;
		}
		count += code[1];
		if(stack.includes(count)){
			return 0;
		}
		stack.push(count);
	}
	return count;
}

exports.optimize = optimize;