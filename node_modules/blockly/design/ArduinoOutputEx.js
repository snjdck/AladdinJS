"use strict";

const ArduinoOutput = require("./ArduinoOutput");

class ArduinoOutputEx extends ArduinoOutput
{
	constructor(cmdDict){
		this.cmdDict = cmdDict;
	}
	
	outputExpression(block){
		switch(block["type"]){
			case "string":
			case "number":
				return block["value"];
		}
		return this.onGenArduinoExpression(block);
	}
	
	collectArgs(block){
		let argList = block["argList"];
		if(!Array.isArray(argList)){
			return [];
		}
		return argList.map(v => this.outputExpression(v));
	}
	
	outputCodeAll(blockList, indent){
		for(let block of blockList){
			this.outputCodeSelf(block, indent);
		}
	}
	
	outputCodeSelf(block, indent){
		switch(block["type"]){
			case "break":
				this.addCode("break;", indent);
				break;
			case "continue":
				this.addCode("continue;", indent);
				break;
			case "function":
				this.onGenArduinoStatement(block, indent);
				break;
			case "if":
				this.addCode("if(" + this.outputExpression(block["condition"]) + "){", indent);
				this.outputCodeAll(block["code"], indent + 1);
				this.addCode("}", indent);
				break;
			case "else if":
				this.replaceLastCode("}else if(" + this.outputExpression(block["condition"]) + "){", indent);
				this.outputCodeAll(block["code"], indent + 1);
				this.addCode("}", indent);
				break;
			case "else":
				this.replaceLastCode("}else{", indent);
				this.outputCodeAll(block["code"], indent + 1);
				this.addCode("}", indent);
				break;
			case "while":
				this.addCode("while(" + this.outputExpression(block["condition"]) + "){", indent);
				this.outputCodeAll(block["code"], indent + 1);
				this.addCode("}", indent);
				break;
			case "arduino":
				this.addCode("void setup(){", 0);
				this.outputCodeAll(block["setup"], 1);
				this.addCode("}", 0);
				this.addCode("void loop(){", 0);
				this.outputCodeAll(block["loop"], 1);
				this.addCode("}", 0);
				break;
		}
	}
	
	onGenArduinoExpression(block){
		var method = block["method"];
		var argList = this.collectArgs(block);
		if(cmdDict.hasCmd(method)){
			return cmdDict.translate(this, method, argList);
		}
		return this.genFuncCall(method, argList);
	}
	
	onGenArduinoStatement(block, indent){
		var method = block["method"];
		if(cmdDict.hasCmd(method)){
			cmdDict.translate(this, method, this.collectArgs(block), indent);
		}else{
			this.addCode(this.onGenArduinoExpression(block) + ";", indent);
		}
	}
}

module.exports = ArduinoOutputEx;