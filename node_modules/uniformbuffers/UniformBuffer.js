"use strict";

class UniformBuffer
{
	constructor(registerCount, baseDataCount, maxRegisterCount){
		Object.defineProperty(this, "maxRegisterCount", {value:maxRegisterCount});
		Object.defineProperty(this, "baseDataCount", {value:baseDataCount});
		this.registerCount = registerCount;
		this.data = new ArrayBuffer(this.calcValueCount(this.maxInstanceCount) << 2);
		this.floatView = new Float32Array(this.data);
		this.intView = new Int32Array(this.data);
	}

	get maxInstanceCount(){
		let {registerCount, baseDataCount, maxRegisterCount} = this;
		return Math.floor((maxRegisterCount - baseDataCount) / registerCount);
	}

	active(gl, index=0){
		gl.bindBufferBase(gl.UNIFORM_BUFFER, index, this.buffer || this.createUniformBuffer(gl));
	}

	upload(gl, instanceCount=1){
		gl.bufferSubData(gl.UNIFORM_BUFFER, 0, this.floatView, 0, this.calcValueCount(instanceCount));
	}

	createUniformBuffer(gl){
		let buffer = gl.createBuffer();
		gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
		gl.bufferData(gl.UNIFORM_BUFFER, gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS) << 4, gl.DYNAMIC_DRAW);
		this.__proto__.buffer = buffer;
		return buffer;
	}

	calcValueCount(instanceCount){
		let {baseDataCount, registerCount} = this;
		return (baseDataCount + registerCount * instanceCount) << 2;
	}

	setInts(index, ...values){
		this.intView.set(values, index);
	}

	setIntv(index, values){
		this.intView.set(values, index);
	}

	setFloats(index, ...values){
		this.floatView.set(values, index);
	}

	setFloatv(index, values){
		this.floatView.set(values, index);
	}
}

module.exports = UniformBuffer;