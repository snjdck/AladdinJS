"use strict";

class UniformBuffer
{
	constructor(registerCount, baseDataCount=0, instanceCount=1){
		this.registerCount = registerCount;
		this.instanceCount = instanceCount;
		this.baseDataCount = baseDataCount;
		this.data = new Float32Array(baseDataCount + registerCount * instanceCount << 2);
	}

	active(gl, index=0){
		gl.bindBufferBase(gl.UNIFORM_BUFFER, index, this.buffer || this.createUniformBuffer(gl));
	}

	upload(gl, instanceCount=1){
		let {baseDataCount, registerCount, data} = this;
		gl.bufferSubData(gl.UNIFORM_BUFFER, 0, data, 0, baseDataCount + registerCount * instanceCount << 4);
	}

	createUniformBuffer(gl){
		this.buffer = gl.createBuffer();
		gl.bindBuffer(gl.UNIFORM_BUFFER, this.buffer);
		gl.bufferData(gl.UNIFORM_BUFFER, this.data.byteLength, gl.DYNAMIC_DRAW);
		return this.buffer;
	}

	calcUniformBlockDataSize(gl, program, index=0){
		return gl.getActiveUniformBlockParameter(program, index, gl.UNIFORM_BLOCK_DATA_SIZE);
	}
}

module.exports = UniformBuffer;