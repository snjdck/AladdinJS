
const self = this;

this.drawScreen = function(){
	const {gl} = self;
	gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
}

this.loadImage = async function(path){
	let image = new Image();
	image.src = path;
	await image.decode();
	return image;
}

this.createTextureArray = function(){
	let canvas = document.createElement('canvas');
	let context = canvas.getContext('2d');
	return async function(pathList, width, height){
		const imageList = await Promise.all(pathList.map(v => self.loadImage(v)));
		width = width || Math.max(...imageList.map(v => v.width));
		height = height || Math.max(...imageList.map(v => v.height));
		const depth = pathList.length;
		const {gl} = self;
		const texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D_ARRAY, texture);
		gl.texStorage3D(gl.TEXTURE_2D_ARRAY, 1, gl.RGB8, width, height, depth);
		gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
		for(let i=0; i<depth; ++i){
			let image = imageList[i];
			if(image.width != width){
				if(canvas.width != width){
					canvas.width = width;
				}
				if(canvas.height != height){
					canvas.height = height;
				}
				context.drawImage(image, 0, 0, width, height);
				image = canvas;
			}
			gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, i, width, height, 1, gl.RGB, gl.UNSIGNED_BYTE, image);
		}
		return texture;
	}
}()

this.getImageJpegData = function(){
	let canvas = document.createElement('canvas');
	let context = canvas.getContext('2d');
	return async function(path){
		let image = await self.loadImage(path);
		let {width, height} = image;
		if(canvas.width != width){
			canvas.width = width;
		}
		if(canvas.height != height){
			canvas.height = height;
		}
		context.drawImage(image, 0, 0);
		return context.getImageData(0, 0, width, height);
	}
}()

this.createTexture = function(width, height, imageRawData, hasAlpha=true){
	const {gl} = self;
	let texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D, texture);
	gl.texStorage2D(gl.TEXTURE_2D, 1, (hasAlpha ? gl.RGBA8 : gl.RGB8), width, height);
	if(imageRawData){
		gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, (hasAlpha ? gl.RGBA : gl.RGB), gl.UNSIGNED_BYTE, imageRawData);
	}
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	//gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	//gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	texture.width = width;
	texture.height = height;
	return texture;
}
