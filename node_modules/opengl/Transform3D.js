"use strict";

const Transform = require("./Transform");
const {Matrix3D} = require("./math");

const RADIAN = Math.PI / 180;

class TreeNode{
	constructor(){
		this.firstChild = null;
		this.nextSibling = null;
	}

	get lastSibling(){
		let test = this;
		while(test.nextSibling)
			test = test.nextSibling;
		return test;
	}

	addChild(child){
		if(this.firstChild){
			this.firstChild.addSibling(child);
		}else{
			this.firstChild = child;
		}
	}

	addSibling(sibling){
		this.lastSibling.nextSibling = sibling;
	}
}

class Transform3D extends Transform{
	constructor(){
		super(Matrix3D);
	}

	isVisible(){
		return true;
	}

	get x(){return this._localMatrix.translation.x;}
	get y(){return this._localMatrix.translation.y;}
	get z(){return this._localMatrix.translation.z;}
	get rotation(){return this._localMatrix.rotation;}
	get scale(){return this._localMatrix.scale;}
	
	set x(value){
		this._localMatrix.translation.x = value;
		this.onTransformChanged();
	}
	
	set y(value){
		this._localMatrix.translation.y = value;
		this.onTransformChanged();
	}

	set z(value){
		this._localMatrix.translation.z = value;
		this.onTransformChanged();
	}
	
	set rotation(value){
		this._localMatrix.rotation.copyFrom(value);
		this.onTransformChanged();
	}

	set scale(value){
		this._localMatrix.scale = value;
		this.onTransformChanged();
	}
}

module.exports = Transform3D;