"use strict";

const Render2D = require("./Render2D");
const Render3D = require("./Render3D");
const Render = require("./Render");

const Scene2D = require("./Scene2D");
const Scene3D = require("./Scene3D");

const RenderQueue = require("./renderers/RenderQueue");
const {RenderStateStack, RenderState, DrawMode} = require("./renderers");
const {
	AssetManager,
	TextureManager,
	ProgramManager,
	ProfileManager,
	RenderTargetManager,
	MouseManager,
	KeyBoardManager
} = require("./managers");

class View3D
{
	constructor(canvas, width=canvas.width, height=canvas.height){
		let gl = canvas.getContext("webgl2");
		console.log(gl.getContextAttributes());

		this.width = width;
		this.height = height;

		this.canvas = canvas;
		this.gl = gl;
		this.scene3d = new Scene3D();
		this.scene2d = new Scene2D(width, height);
		this.mouseMgr = new MouseManager(this);
		this.keyboardMgr = new KeyBoardManager(this);
		gl.renderTargetMgr = new RenderTargetManager(this);
		gl.mouseMgr = this.mouseMgr;
		gl.assetMgr = new AssetManager();
		gl.textureMgr = new TextureManager(gl);
		gl.programMgr = new ProgramManager(gl);
		gl.profileMgr = new ProfileManager(gl);
		gl.render2d = new Render2D(gl);
		gl.render3d = new Render3D(gl);
		gl.render = new Render(gl);
		gl.renderQueue = new RenderQueue(gl);
		gl.renderStateStack = new RenderStateStack(gl);
		gl.renderState = new RenderState().load(gl);

		gl.clearDepth(1);
		gl.clearStencil(0);
		gl.viewport(0, 0, width, height);

		gl.render2d.viewport(width, height);

		this.paused = false;
		this.timeScale = 1;

		this.onTick = this.onTick.bind(this);
		
		this.timestamp = performance.now();
		requestAnimationFrame(this.onTick);
	}

	onTick(timestamp){
		requestAnimationFrame(this.onTick);
		if(this.paused){
			return;
		}
		const {gl, mouseMgr} = this;
		const timeElapsed = (timestamp - this.timestamp) * this.timeScale;
		this.timestamp = timestamp;
		
		this.updateScene(timeElapsed);

		//gl.profileMgr.reset();

		gl.clearColor(0, 0, 0, 1);
		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
		this.drawScene(DrawMode.Normal);

		mouseMgr.update();
		//gl.profileMgr.log();
	}

	updateScene(timeElapsed){
		this.scene3d.update(timeElapsed);
		this.scene2d.update(timeElapsed);
	}

	drawScene(mode){
		this.scene3d.draw(this.gl, mode);
		this.scene2d.draw(this.gl, mode);
	}
}

module.exports = View3D;

function createDomTexture(id){
	var gl = this;
	var image = document.getElementById(id);

	var texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D, texture);
	
	gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

	texture.width = image.width;
	texture.height = image.height;

	return texture;
}

function createSampler(gl){
	//gl.bindSampler(0, sampler);
	var sampler = gl.createSampler();
	gl.samplerParameteri(sampler, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	gl.samplerParameteri(sampler, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	return sampler;
}

WebGLRenderingContext.prototype.createDomTexture = createDomTexture;
WebGL2RenderingContext.prototype.createDomTexture = createDomTexture;
