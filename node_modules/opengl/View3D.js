"use strict";

const Scene2D = require("./Scene2D");
const Scene3D = require("./Scene3D");

const Clock = require('./Clock');
const WebGL = require('./WebGL');
const WebGL_Init = require('./WebGL_Init');

class View3D
{
	constructor(canvas, width=canvas.width, height=canvas.height){
		WebGL_Init(canvas, width, height);
		this.scene3d = new Scene3D();
		this.scene2d = new Scene2D(width, height);
		
		Clock.register(this);
	}

	onTick(){
		const {gl, mouseMgr} = WebGL;
		
		this.updateScene();

		//gl.profileMgr.reset();

		this.drawScene();

		mouseMgr.update(this);
		//gl.profileMgr.log();
	}

	updateScene(){
		this.scene3d.update();
		this.scene2d.update();
	}

	drawScene(mode){
		this.scene3d.draw(mode);
		this.scene2d.draw(mode);
	}
}

module.exports = View3D;

function createDomTexture(id){
	var gl = this;
	var image = document.getElementById(id);
	const {width, height} = image;

	var texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D, texture);
	
	gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGB8, width, height);
	gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGB, gl.UNSIGNED_BYTE, image);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

	texture.width = width;
	texture.height = height;

	return texture;
}

function createSampler(gl){
	//gl.bindSampler(0, sampler);
	var sampler = gl.createSampler();
	gl.samplerParameteri(sampler, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	gl.samplerParameteri(sampler, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	gl.samplerParameteri(sampler, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	return sampler;
}

WebGLRenderingContext.prototype.createDomTexture = createDomTexture;
WebGL2RenderingContext.prototype.createDomTexture = createDomTexture;
