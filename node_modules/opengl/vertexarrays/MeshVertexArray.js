"use strict";

const WebGL = require('../WebGL');
const VertexArray = require('./VertexArray');
const {AttribIndex} = require('../const');

class MeshVertexArray extends VertexArray
{
	static new(subMesh, formatList){
		let vao = subMesh.__vao__;
		if(!vao){
			vao = new this(subMesh, formatList);
			subMesh.__vao__ = vao;
		}
		return vao;
	}

	constructor(subMesh, formatList){
		super();
		Object.assign(this, subMesh);
		this.bindCount = formatList.boneIndex ? parseInt(formatList.boneIndex.format.slice(-1)) : 1;
		this.boneCount = this.boneData.length << 1;
		this.formatList = formatList;
		this.indexCount = this.indexData.byteLength >> 1;
		this.indexMode = this.indexCount > 0;
	}

	onCreate(gl){
		super.onCreate(gl, this.vertexData, this.indexMode && this.indexData);

		let {position, uv, boneIndex, boneWeight} = this.formatList;

		gl.vertexAttribPointer(AttribIndex.inputPosition, 3, gl.FLOAT, false, this.byteSizePerVertex, position.offset);
		gl.vertexAttribPointer(AttribIndex.inputUV, 2, gl.FLOAT, false, this.byteSizePerVertex, uv.offset);
		gl.enableVertexAttribArray(AttribIndex.inputPosition);
		gl.enableVertexAttribArray(AttribIndex.inputUV);

		if(boneIndex){
			let boneCount = parseInt(boneIndex.format.slice(-1));
			gl.vertexAttribIPointer(AttribIndex.boneIndex, boneCount, gl.SHORT, this.byteSizePerVertex, boneIndex.offset);
			gl.enableVertexAttribArray(AttribIndex.boneIndex);
		}else{
			gl.vertexAttribI4i(AttribIndex.boneIndex, 0, 0, 0, 0);
			//gl.disableVertexAttribArray(AttribIndex.boneIndex);
		}
		
		if(boneWeight){
			let boneCount = parseInt(boneWeight.format.slice(-1));
			gl.vertexAttribPointer(AttribIndex.boneWeight, boneCount, gl.FLOAT, false, this.byteSizePerVertex, boneWeight.offset);
			gl.enableVertexAttribArray(AttribIndex.boneWeight);
		}else{
			gl.vertexAttrib4f(AttribIndex.boneWeight, 1, 0, 0, 0);
			//gl.disableVertexAttribArray(AttribIndex.boneWeight);
		}
	}

	draw(instanceCount=1){
		let {gl} = WebGL;
		if(this.indexMode){
			gl.drawElementsInstanced(gl.TRIANGLES, this.indexCount, gl.UNSIGNED_SHORT, 0, instanceCount);
		}else{
			gl.drawArraysInstanced(gl.TRIANGLES, 0, this.vertexCount, instanceCount);
		}
	}
}

module.exports = MeshVertexArray;