"use strict";

const {DepthRenderTarget} = require("../rendertargets");
const {DepthMaterial} = require("../materials");
const Light3D = require("./Light3D");
const {Camera3D, Lens} = require("../cameras");
const WebGL = require('../WebGL');

class DirectionLight3D extends Light3D
{
	constructor(){
		super();

		this.w = 2048;
		this.h = 2048;

		let lens = Lens.OrthoLH(this.w, this.h, -1000, 1000);
		let camera = new Camera3D(lens);
		let rotation = camera.rotation;
		rotation.rotateAxisX(120 * Math.PI / 180);
		rotation.rotateAxisZ(-90 * Math.PI / 180);
		camera.rotation = rotation;
		this.camera = camera;
		this.shadowRenderTarget = new DepthRenderTarget(this.w, this.h);
	}

	drawShadowMap(root){
		let {gl, renderQueue} = WebGL;
		let {camera, shadowRenderTarget} = this;
		let {drawUnitCollector} = camera;

		shadowRenderTarget.active();
		gl.clear(gl.DEPTH_BUFFER_BIT);
		gl.viewport(0, 0, this.w, this.h);

		drawUnitCollector.clear();
		root.forEach(collectShadowUnits, drawUnitCollector);
		renderQueue.draw(camera, drawUnitCollector.drawUnitList);
	}
}

function collectShadowUnits(node){
	if(node.castShadow && node.drawUnitCache){
		let drawUnit = node.drawUnitCache.getOut();
		drawUnit.material = DepthMaterial.new();
		this.addDrawUnit(drawUnit);
	}
}

module.exports = DirectionLight3D;