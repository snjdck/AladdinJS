'use strict';

const WebGL = require('../WebGL');
const {decode} = require('fileformats/images');
const {createFetch} = require('utils/cache');

class TextureManager{
	constructor(){
		this.fetch = createFetch(this.doLoad);
	}

	fetchAll(nameList, callback){
		const result = [];
		const onLoad = v => load(result.push(v));
		const load = i => {
			if(i < nameList.length){
				this.fetch(nameList[i], onLoad);
			}else{
				callback(result);
			}
		}
		load(0);
	}

	doLoad(name, callback){
		const {assetMgr, gl} = WebGL;
		if(name.endsWith(".tga")){
			assetMgr.loadFile(name).then(data => {
				let image = decode(name, data);
				let texture = createTexture(gl, image.width, image.height, image.data);
				texture.transparent = true;
				texture.name = name;
				callback(texture);
			});
		}else{
			assetMgr.loadImage(name).then(image => {
				let texture = createTexture(gl, image.width, image.height, image, false);
				texture.transparent = false;
				texture.name = name;
				callback(texture);
			});
		}
	}
}

function createTexture(gl, width, height, imageRawData, hasAlpha=true){
	let texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D, texture);
	gl.texStorage2D(gl.TEXTURE_2D, 1, (hasAlpha ? gl.RGBA8 : gl.RGB8), width, height);
	gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, (hasAlpha ? gl.RGBA : gl.RGB), gl.UNSIGNED_BYTE, imageRawData);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	//gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	//gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	texture.width = width;
	texture.height = height;
	return texture;
}

module.exports = TextureManager;
