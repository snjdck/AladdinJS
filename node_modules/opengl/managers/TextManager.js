'use strict';

const WebGL = require('../WebGL');
const {Texture2D} = require('../textures');
const MaxRectsBinPack = require('utils/MaxRectsBinPack');

const width = 2048;
const height = 2048;
const charSize = 24;

class TextManager
{
	constructor(){
		this.rectPack = new MaxRectsBinPack(width, height);
		this.charDict = new Map();
		this.context = createCanvasContext();
		this.rawTexture = WebGL.createTexture(width, height);
		//this.context.fillText("你好,world", 100, 30);
	}

	getCharTexture2D(char){
		const {rawTexture, charDict, rectPack} = this;
		const {gl} = WebGL;

		if(!charDict.has(char)){
			const textRect = calcTextRect(this.context, char);
			const packRect = rectPack.insert(textRect.width, textRect.height);
			charDict.set(char, {packRect, textRect});
			this.context.fillText(char, packRect.x + textRect.x, packRect.y + textRect.y);
			gl.bindTexture(gl.TEXTURE_2D, this.rawTexture);
			gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.context.canvas);
		}

		const {packRect, textRect} = charDict.get(char);
		
		const texture = new Texture2D();
		const {xyuvMul, xyuvAdd} = texture;
		texture.rawTexture = rawTexture;
		texture.setUV(width, height, packRect, false);
		xyuvAdd[0] = 0;
		xyuvAdd[1] = charSize - textRect.y;
		return texture;
	}

	*getTextBitmap(matrix, text){
		let offset = 0;
		for(let i=0; i<text.length; ++i){
			let char = text.charAt(i);
			let texture = this.getCharTexture2D(char);
			const {packRect, textRect} = this.charDict.get(char);
			let worldTransform = matrix.clone();
			worldTransform.translate(offset, 0);
			offset += packRect.width;
			yield {
				width: packRect.width,
				height: packRect.height,
				worldTransform, texture
			};
		}
	}
}

function calcTextRect(context, char){
	let metrics = context.measureText(char);
	return {
		x: metrics.actualBoundingBoxLeft,
		y: metrics.actualBoundingBoxAscent,
		width: metrics.actualBoundingBoxLeft + metrics.actualBoundingBoxRight,
		height: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent
	};
}

function createCanvasContext(){
	let canvas = document.createElement('canvas');
	canvas.width = width;
	canvas.height = height;
	//canvas.setAttribute('style', 'position: absolute;left: 0;');
	//document.body.appendChild(canvas)
	let context = canvas.getContext('2d');
	context.fillStyle = '#FFFFFF';
	context.strokeStyle = 'green';
	context.textBaseline = 'ideographic';//bottom,top
	context.font = '24px 微软雅黑';
	return context;
}

module.exports = TextManager;
