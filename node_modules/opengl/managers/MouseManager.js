"use strict";

const WebGL = require('../WebGL');
const {MouseRenderTarget} = require("../rendertargets");
const {DrawMode} = require("../renderers");

/* draw 2d first, if done, return else draw 3d */
class MouseManager
{
	constructor(){
		this.requestPick = false;
		this.objectList = [null];
		this.init();
	}

	init(){
		const {canvas} = WebGL;

		let mouseEventHandler = this.onMouseEvent.bind(this);
		for(let evtType of ["mousedown", "mouseup", "mousemove"]){
			canvas.addEventListener(evtType, mouseEventHandler);
		}

		this.renderTarget = new MouseRenderTarget(canvas.width, canvas.height);

		let buffer = new ArrayBuffer(4);
		this._pickData = new Uint8Array(buffer);
		this._pickValue = new Uint32Array(buffer);
	}

	update(view3d){
		if(!this.requestPick){
			return;
		}
		this.requestPick = false;
		const {mouseX, mouseY} = this;
		const {gl, height} = WebGL;

		this.renderTarget.active();
		
		gl.clearColor(0, 0, 0, 0);
		gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
		
		this._pickBegin();
		view3d.drawScene(DrawMode.Pick);
		gl.readPixels(mouseX, height - mouseY, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, this._pickData);//gl.FLOAT, new Float32Array
		
		gl.bindFramebuffer(gl.FRAMEBUFFER, null);

		let mouseTarget = this.objectList[this._pickValue[0]];
		if(this.mouseEvent.type == "mouseup")
			console.log(mouseTarget, this._pickValue[0], "click");
	}

	onMouseEvent(evt){
		this.requestPick = true;
		this.mouseEvent = evt;
		this.mouseX = evt.x;
		this.mouseY = evt.y;
	}

	_pickBegin(){
		this.objectList.length = 1;
	}

	pickRegister(target){
		let index = this.nextPickID;
		this.objectList[index] = target;
		return index;
	}

	get nextPickID(){
		return this.objectList.length;
	}
}

module.exports = MouseManager;