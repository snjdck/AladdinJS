'use strict';

const DisplayObject3D = require('./DisplayObject3D');
const Camera3D = require('./cameras/Camera3D');
const Light3D = require('./lights/Light3D');
const traverseTree = require('utils/traverseTree');

class Scene3D
{
	constructor(){
		this.root = new DisplayObject3D();
		this.root._scene = this;
		this.cameraList = [];
		this.lightList = [];
		this.root.addListener('childAdded', this.onChildAdded.bind(this));
		this.root.addListener('childRemoved', this.onChildRemoved.bind(this));
	}

	onChildAdded(child){
		const {cameraList} = this;
		const cameraCount = cameraList.length;
		traverseTree.call(this, child, collectFn);
		if(cameraList.length != cameraCount){
			cameraList.sort(sortCameras);
		}
	}

	onChildRemoved(child){
		traverseTree.call(this, child, removeFn);
	}

	update(){
		//this.root.onUpdate();
	}

	draw(mode){
		const {root, cameraList} = this;
		for(let camera of cameraList){
			camera.render(root, mode);
		}
	}
}

function collectFn(node){
	if(node instanceof Camera3D){
		this.cameraList.push(node);
	}else if(node instanceof Light3D){
		this.lightList.push(node);
	}
}

function removeFn(node){
	if(node instanceof Camera3D){
		del(this.cameraList, node);
	}else if(node instanceof Light3D){
		del(this.lightList, node);
	}
}

function del(list, item){
	let index = list.indexOf(item);
	if(index >= 0){
		list.splice(index, 1);
	}
}

const sortCameras = (l, r) => l.depth - r.depth;

module.exports = Scene3D;
