"use strict";

const WebGL = require('../WebGL');

class UniformBuffer
{
	constructor(registerCount, baseDataCount, maxRegisterCount){
		Object.defineProperty(this, "maxRegisterCount", {value:maxRegisterCount-baseDataCount});
		Object.defineProperty(this, "baseDataCount", {value:baseDataCount});
		this.registerCount = registerCount;
		this.data = new ArrayBuffer(this.calcValueCount(1) << 2);
		this.floatView = new Float32Array(this.data);
		this.intView = new Int32Array(this.data);
	}

	get registerCount(){
		return this._registerCount;
	}

	set registerCount(value){
		value = Math.max(value >> 0, 1);
		this._registerCount = value;
		this._maxInstanceCount = Math.floor(this.maxRegisterCount / value);
	}

	get maxInstanceCount(){
		return this._maxInstanceCount;
	}

	active(index=0){
		let {gl} = WebGL;
		gl.bindBufferBase(gl.UNIFORM_BUFFER, index, this.createUniformBuffer(gl));
	}

	upload(instanceCount=1){
		let {gl} = WebGL;
		gl.bindBuffer(gl.UNIFORM_BUFFER, this.createUniformBuffer(gl));
		gl.bufferSubData(gl.UNIFORM_BUFFER, 0, this.floatView, 0, this.calcValueCount(instanceCount));
	}

	alloc(instanceCount){
		instanceCount = Math.min(instanceCount, this.maxInstanceCount);
		let valueCount = this.calcValueCount(instanceCount);
		if(valueCount <= this.intView.length){
			return;
		}
		let data = new ArrayBuffer(valueCount << 2);
		let intView = new Int32Array(data);
		if(this.baseDataCount > 0){
			intView.set(this.intView.subarray(0, this.baseDataCount << 2));
		}
		this.data = data;
		this.intView = intView;
		this.floatView = new Float32Array(data);
	}

	createUniformBuffer(gl){
		if(this.buffer)return this.buffer;
		let buffer = gl.createBuffer();
		gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
		gl.bufferData(gl.UNIFORM_BUFFER, gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS) << 4, gl.DYNAMIC_DRAW);
		this.buffer = buffer;
		return buffer;
	}

	calcValueCount(instanceCount){
		let {baseDataCount, registerCount} = this;
		return (baseDataCount + registerCount * instanceCount) << 2;
	}

	setInts(index, ...values){
		this.intView.set(values, index);
	}

	setIntv(index, values){
		this.intView.set(values, index);
	}

	setFloats(index, ...values){
		this.floatView.set(values, index);
	}

	setFloatv(index, values){
		this.floatView.set(values, index);
	}
}

module.exports = UniformBuffer;