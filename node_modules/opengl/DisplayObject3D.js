"use strict";

const Transform3D = require("./Transform3D");

class DisplayObject3D extends Transform3D
{
	constructor(){
		super();
		//Object.defineProperty(this, "_children", {value:[]});
		this.visible = true;
		//this.castShadow = false;
		this.mouseEnabled = true;
		this.mouseChildren = true;
		this.materials = [];
		this.hitTestMaterial = null;
	}

	isVisible(){
		return this.visible && super.isVisible();
	}

	onUpdate(){
		for(let material of this.materials){
			material.onUpdate();
		}
		for(let child of this._children){
			if(child.isVisible()){
				child.onUpdate();
			}
		}
	}

	onChildAdding(child){
		if(child.parent){
			if(child.parent === this){
				return child;
			}
			child.parent.removeChild(child);
		}
	}

	onChildAdded(child){
		child._parent = this;
		child.markWorldMatrixDirty();
	}

	onChildRemoved(child){
		child._parent = null;
		child.markWorldMatrixDirty();
	}
}

module.exports = DisplayObject3D;