function concat(va, vb, output)
{
	/*
	output[0 ] = (va[0 ] * vb[0]) + (va[1 ] * vb[4]) + (va[2 ] * vb[8 ]) + (va[ 3] * vb[12]);
	output[4 ] = (va[4 ] * vb[0]) + (va[5 ] * vb[4]) + (va[6 ] * vb[8 ]) + (va[ 7] * vb[12]);
	output[8 ] = (va[8 ] * vb[0]) + (va[9 ] * vb[4]) + (va[10] * vb[8 ]) + (va[11] * vb[12]);
	output[12] = (va[12] * vb[0]) + (va[13] * vb[4]) + (va[14] * vb[8 ]) + (va[15] * vb[12]);
	
	output[1 ] = (va[0 ] * vb[1]) + (va[1 ] * vb[5]) + (va[2 ] * vb[9 ]) + (va[ 3] * vb[13]);
	output[5 ] = (va[4 ] * vb[1]) + (va[5 ] * vb[5]) + (va[6 ] * vb[9 ]) + (va[ 7] * vb[13]);
	output[9 ] = (va[8 ] * vb[1]) + (va[9 ] * vb[5]) + (va[10] * vb[9 ]) + (va[11] * vb[13]);
	output[13] = (va[12] * vb[1]) + (va[13] * vb[5]) + (va[14] * vb[9 ]) + (va[15] * vb[13]);
	
	output[2 ] = (va[0 ] * vb[2]) + (va[1 ] * vb[6]) + (va[2 ] * vb[10]) + (va[ 3] * vb[14]);
	output[6 ] = (va[4 ] * vb[2]) + (va[5 ] * vb[6]) + (va[6 ] * vb[10]) + (va[ 7] * vb[14]);
	output[10] = (va[8 ] * vb[2]) + (va[9 ] * vb[6]) + (va[10] * vb[10]) + (va[11] * vb[14]);
	output[14] = (va[12] * vb[2]) + (va[13] * vb[6]) + (va[14] * vb[10]) + (va[15] * vb[14]);
	
	output[3 ] = (va[0 ] * vb[3]) + (va[1 ] * vb[7]) + (va[2 ] * vb[11]) + (va[ 3] * vb[15]);
	output[7 ] = (va[4 ] * vb[3]) + (va[5 ] * vb[7]) + (va[6 ] * vb[11]) + (va[ 7] * vb[15]);
	output[11] = (va[8 ] * vb[3]) + (va[9 ] * vb[7]) + (va[10] * vb[11]) + (va[11] * vb[15]);
	output[15] = (va[12] * vb[3]) + (va[13] * vb[7]) + (va[14] * vb[11]) + (va[15] * vb[15]);
	*/

	const [a00, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12, a13, a14, a15] = va;
	const [b00, b01, b02, b03, b04, b05, b06, b07, b08, b09, b10, b11, b12, b13, b14, b15] = vb;

	output[0 ] = a00 * b00 + a01 * b04 + a02 * b08 + a03 * b12;
	output[4 ] = a04 * b00 + a05 * b04 + a06 * b08 + a07 * b12;
	output[8 ] = a08 * b00 + a09 * b04 + a10 * b08 + a11 * b12;
	output[12] = a12 * b00 + a13 * b04 + a14 * b08 + a15 * b12;
	
	output[1 ] = a00 * b01 + a01 * b05 + a02 * b09 + a03 * b13;
	output[5 ] = a04 * b01 + a05 * b05 + a06 * b09 + a07 * b13;
	output[9 ] = a08 * b01 + a09 * b05 + a10 * b09 + a11 * b13;
	output[13] = a12 * b01 + a13 * b05 + a14 * b09 + a15 * b13;
	
	output[2 ] = a00 * b02 + a01 * b06 + a02 * b10 + a03 * b14;
	output[6 ] = a04 * b02 + a05 * b06 + a06 * b10 + a07 * b14;
	output[10] = a08 * b02 + a09 * b06 + a10 * b10 + a11 * b14;
	output[14] = a12 * b02 + a13 * b06 + a14 * b10 + a15 * b14;
	
	output[3 ] = a00 * b03 + a01 * b07 + a02 * b11 + a03 * b15;
	output[7 ] = a04 * b03 + a05 * b07 + a06 * b11 + a07 * b15;
	output[11] = a08 * b03 + a09 * b07 + a10 * b11 + a11 * b15;
	output[15] = a12 * b03 + a13 * b07 + a14 * b11 + a15 * b15;
}

const planeList = [new Array(4),new Array(4),new Array(4),new Array(4)];

function calc_planes(matrix, planeList){
	for(let i=0; i<4; ++i){
		const offset = i << 2;
		const a = matrix[offset+3];
		for(let j=0; j<2; ++j){
			const b = matrix[offset+j];
			const index = j << 1;
			planeList[index  ][i] = a + b;
			planeList[index+1][i] = a - b;
		}
	}
}

function cull_aabb(planeList, aabb){
	const {minX,minY,minZ,maxX,maxY,maxZ} = aabb;
	for(let [a, b, c, d] of planeList){
		if((
			a * (a > 0 ? maxX : minX) + 
			b * (b > 0 ? maxY : minY) + 
			c * (c > 0 ? maxZ : minZ) + 
			d) < 0
		){
			return true;
		}
	}
	return false;
}

exports.concat = concat;