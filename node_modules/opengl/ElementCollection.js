"use strict";

const assert = require("assert");

class ElementCollection
{
	constructor(){
		Object.defineProperty(this, '_children', {value:[]});
	}

	get numChildren(){
		return this._children.length;
	}

	addChild(child){
		return this.addChildAt(child, this.numChildren);
	}

	removeChild(child){
		let index = this.getChildIndex(child);
		if(index >= 0)
			return this.removeChildAt(index);
	}

	addChildAt(child, index){
		assert(0 <= index && index <= this.numChildren);
		if(!this.onChildAdding(child, index)){
			let {_children} = this;
			_children.splice(index, 0, child);
			this.onChildAdded(child);
		}
		return child;
	}

	removeChildAt(index){
		assert(0 <= index && index < this.numChildren);
		let child = this._children.splice(index, 1)[0];
		this.onChildRemoved(child);
		return child;
	}

	getChildAt(index){
		assert(0 <= index && index < this.numChildren);
		return this._children[index];
	}

	getChildIndex(child){
		return this._children.indexOf(child);
	}

	hasChild(child){
		return this._children.includes(child);
	}

	setChildIndex(child, index){
		assert(0 <= index && index < this.numChildren);
		let prevIndex = this.getChildIndex(child);
		if(prevIndex < 0 || prevIndex === index)return;
		let {_children} = this;
		_children.splice(prevIndex, 1);
		_children.splice(index, 0, child);
	}

	swapChildren(child1, child2){
		this.swapChildrenAt(this.getChildIndex(child1), this.getChildIndex(child2));
	}

	swapChildrenAt(index1, index2){
		if(index1 === index2)return;
		let {_children} = this;
		let child1 = _children[index1];
		let child2 = _children[index2];
		if(child1 && child2){
			_children[index1] = child2;
			_children[index2] = child1;
		}
	}

	get bottomChild(){
		return this.getChildAt(0);
	}

	get topChild(){
		return this.getChildAt(this.numChildren-1);
	}

	swapChildToTop(child){
		let childIndex = getChildIndex(child);
		if(childIndex < 0)return;
		let lastIndex = this.numChildren - 1;
		if(childIndex < lastIndex){
			this.swapChildrenAt(childIndex, lastIndex);
		}
	}

	swapChildToBottom(child){
		let childIndex = this.getChildIndex(child);
		if(childIndex > 0){
			this.swapChildrenAt(childIndex, 0);
		}
	}

	onChildAdding(child){}
	onChildAdded(child){}
	onChildRemoved(child){}
}

module.exports = ElementCollection;