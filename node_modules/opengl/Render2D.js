"use strict";

const WebGL = require('./WebGL');
const {VertexArray2D} = require("./vertexarrays");
const {UniformBuffer} = require("./uniformbuffers");
const {UniformBlockIndex} = require("./const");
const {batchDraw, RenderState, DrawMode} = require("./renderers");

class Render2D
{
	constructor(){
		let {programMgr} = WebGL;
		const {MAX_VERTEX_UNIFORM_VECTORS} = programMgr;
		const MAX_2D_OBJECTS = MAX_VERTEX_UNIFORM_VECTORS >> 1;
		programMgr.addShaderSourceDefine('MAX_2D_OBJECTS', MAX_2D_OBJECTS);
		this.vao = VertexArray2D.new();
		this.uniformBuffer = new UniformBuffer(0, 1);
		this.worldMatrixBuffer = new UniformBuffer(2, 0, MAX_VERTEX_UNIFORM_VECTORS);
		this.textureMulBuffer = new UniformBuffer(1, 0, MAX_VERTEX_UNIFORM_VECTORS);
		this.textureAddBuffer = new UniformBuffer(1, 0, MAX_VERTEX_UNIFORM_VECTORS);
		this.rectSizeBuffer = new UniformBuffer(1, 0, MAX_VERTEX_UNIFORM_VECTORS);
		this.scale9gridBuffer = new UniformBuffer(1, 0, MAX_VERTEX_UNIFORM_VECTORS);
		this.colorBuffer = new UniformBuffer(1, 0, MAX_VERTEX_UNIFORM_VECTORS);
		this.invalidateFlag = true;
		this.targetList = [];
		this.activeTexture = null;
		this.batchDraw = batchDraw.bind(this, MAX_2D_OBJECTS);
	}

	set mode(value){
		if(value == DrawMode.Pick){
			this.isPickMode = true;
			this.shader = "shader2d&pick";
			this.renderState = RenderState.Pick2D;
		}else{
			this.isPickMode = false;
			this.shader = "shader2d";
			this.renderState = RenderState.Normal2D;
		}
	}

	viewport(width, height){
		this.width = width;
		this.height = height;
		this.uniformBuffer.setFloats(0, 2 / width, -2 / height);
	}

	invalidate(){
		this.invalidateFlag = true;
	}

	drawBegin(){
		const {gl, renderState, programMgr} = WebGL;
		const {vao, uniformBuffer, 
			worldMatrixBuffer,
			textureMulBuffer,
			textureAddBuffer,
			rectSizeBuffer,
			scale9gridBuffer,
			colorBuffer,
		} = this;

		programMgr.useProgram(this.shader);

		uniformBuffer.active();
		worldMatrixBuffer.active(UniformBlockIndex.WorldMatrix_BLOCK);
		textureMulBuffer.active(UniformBlockIndex.TextureMul_BLOCK);
		textureAddBuffer.active(UniformBlockIndex.TextureAdd_BLOCK);
		rectSizeBuffer.active(UniformBlockIndex.RectSize_BLOCK);
		scale9gridBuffer.active(UniformBlockIndex.Scale9grid_BLOCK);
		colorBuffer.active(UniformBlockIndex.Color_2D_BLOCK);
		vao.active();
		renderState.merge(this.renderState);
	}

	drawBitmap(target){
		if(target.texture == null){
			this.targetList.push(target);
			return;
		}
		let texture = target.texture.getRawAsset();
		if(texture != this.activeTexture){
			this.submit();
		}
		this.targetList.push(target);
		this.activeTexture = texture;
	}

	submit(){
		if(this.targetList.length <= 0)return;
		if(this.invalidateFlag){
			this.drawBegin();
			this.invalidateFlag = false;
		}
		const {gl, profileMgr} = WebGL;
		const {targetList} = this;

		gl.bindTexture(gl.TEXTURE_2D, this.activeTexture);
		let drawCount = this.batchDraw(targetList);
		
		profileMgr.profile2d.drawCount += drawCount;
		profileMgr.profile2d.textureSwitchCount++;

		targetList.length = 0;
		this.activeTexture = null;
	}

	onPrepareBuffer(instanceCount){
		const {
			//uniformBuffer,
			worldMatrixBuffer,
			textureMulBuffer,
			textureAddBuffer,
			rectSizeBuffer,
			scale9gridBuffer,
			colorBuffer,
		} = this;

		//uniformBuffer.alloc(instanceCount);
		worldMatrixBuffer.alloc(instanceCount);
		textureMulBuffer.alloc(instanceCount);
		textureAddBuffer.alloc(instanceCount);
		rectSizeBuffer.alloc(instanceCount);
		scale9gridBuffer.alloc(instanceCount);
		colorBuffer.alloc(instanceCount);
	}

	onUpdateBuffer(instance, index){
		const {worldTransform, texture, width, height, fgColor} = instance;

		const {
			//uniformBuffer,
			worldMatrixBuffer,
			textureMulBuffer,
			textureAddBuffer,
			rectSizeBuffer,
			scale9gridBuffer,
			colorBuffer,
		} = this;

		worldTransform.copyToArray(worldMatrixBuffer.floatView, index << 3);
		if(texture){
			textureMulBuffer.setFloatv(index << 2, texture.xyuvMul);
			textureAddBuffer.setFloatv(index << 2, texture.xyuvAdd);
			rectSizeBuffer.setFloats(  index << 2, width, texture.width, height, texture.height);
			scale9gridBuffer.setFloatv(index << 2, texture.scale9grid);
		}else{
		//	uniformBuffer.setFloats(offset+8, 1, 1, 1, 1, 0, 0, 0, 0, width, width, height, height, 0, 0, 0, 0);
			textureMulBuffer.setFloats(index << 2, 1, 1, 1, 1);
			textureAddBuffer.setFloats(index << 2, 0, 0, 0, 0);
			rectSizeBuffer.setFloats(index << 2, width, width, height, height);
			scale9gridBuffer.setFloats(index << 2, 0, 0, 0, 0);
		}
		colorBuffer.setFloats(index << 2, fgColor.r, fgColor.g, fgColor.b, fgColor.a);


		if(this.isPickMode){
			let {mouseMgr} = WebGL;
			if(index == 0){
				this.uniformBuffer.setInts(2, mouseMgr.nextPickID);
			}
			mouseMgr.pickRegister(instance);
		}
	}

	onUploadBufferAndDraw(instanceCount){
		const {
			vao,
			uniformBuffer,
			worldMatrixBuffer,
			textureMulBuffer,
			textureAddBuffer,
			rectSizeBuffer,
			scale9gridBuffer,
			colorBuffer,
		} = this;

		uniformBuffer.upload(instanceCount);
		worldMatrixBuffer.upload(instanceCount);
		textureMulBuffer.upload(instanceCount);
		textureAddBuffer.upload(instanceCount);
		rectSizeBuffer.upload(instanceCount);
		scale9gridBuffer.upload(instanceCount);
		colorBuffer.upload(instanceCount);

		vao.draw(instanceCount);
	}
}

module.exports = Render2D;