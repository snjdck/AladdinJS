"use strict";

const WebGL = require('../WebGL');
const DisplayObject2D = require("../DisplayObject2D");
const DisplayObject3D = require("../DisplayObject3D");
const {Camera3D, Lens, ClearFlags} = require("../cameras");
//const {DrawMode} = require("../renderers");
//const {Vector3D} = require("../math");
const {Texture2D} = require('../textures');

class Bitmap3D extends DisplayObject2D
{
	constructor(width, height){
		super();
		this.root3d = new DisplayObject3D();
		this.width = width;
		this.height = height;
		this.updateEnabled = true;
		this.camera = new Camera3D(Lens.OrthoLH(width, height, -1000, 1000));
		//this.camera.clearFlags = ClearFlags.Depth();

		this.texture = new Texture2D();
	}

	onUpdate(){
/*
		let {scene, camera, root3d} = this;

		this.worldTransform.decompose(worldMatrix2D);
		root3d.onTransformChanged();

		let worldMatrix3D = root3d.transform;
		worldMatrix3D.rotation.fromAxisAngle(Vector3D.Z_AXIS, worldMatrix2D.rotation * Math.PI / 180);
		worldMatrix3D.translation.x = worldMatrix2D.x - 0.5 * (scene.width - this.width);
		worldMatrix3D.translation.y = 0.5 * (scene.height - this.height) - worldMatrix2D.y;

		Lens.ResizeOrthoLH(camera.lens, scene.width, scene.height);
*/
		if(this.updateEnabled){
			this.root3d.onUpdate();
		}
	}

	onDraw(mode){
		let {render2d} = WebGL;
		render2d.drawBitmap(this);
	}
}

//const worldMatrix2D = {};

module.exports = Bitmap3D;