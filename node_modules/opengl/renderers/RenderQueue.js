"use strict";

const WebGL = require('../WebGL');
//const ObjectGroup = require("utils/ObjectGroup");
const ArrayKeyMap = require('ds/ArrayKeyMap');

const ObjectCache = require("utils/ObjectCache");

const mapCache = new ObjectCache(Map, v => v.clear());
const tempArray = [];

class DrawUnitGroup extends ArrayKeyMap
{
	constructor(){
		super(6);
	}

	newMap(){
		return mapCache.getOut();
	}

	add(drawUnit){
		let key = tempArray;
		key[0] = drawUnit.material.isTransparent();
		key[1] = drawUnit.material.shader;
		key[2] = drawUnit.material.texture;
		key[3] = drawUnit.material.renderState;
		key[4] = drawUnit.vao;
		key[5] = drawUnit;
		this.set(key);
	}

	clear(){
		super.clear();
		mapCache.putAllIn();
	}
}

class RenderQueue
{
	constructor(){
		this.drawUnitGroup = new DrawUnitGroup();
	}

	draw(camera, drawUnitList){
		if(drawUnitList.length <= 0){
			return;
		}
		
		let {drawUnitGroup} = this;

		drawUnitList.forEach(drawUnitGroup.add, drawUnitGroup);

		render(drawUnitGroup.map.get(false), camera);
		render(drawUnitGroup.map.get(true) , camera);

		drawUnitGroup.clear();
		tempArray.length = 0;
	}
}

function render(rootDict, camera){
	if(!rootDict)return;
	const {gl, programMgr, profileMgr, renderState} = WebGL;
	for(let [shader, shaderDict] of rootDict){
		profileMgr.profile3d.shaderSwitchCount++;
		let program = programMgr.fetch(shader);
		gl.useProgram(program);
		for(let [texture, textureDict] of shaderDict){
			profileMgr.profile3d.textureSwitchCount++;
			gl.bindTexture(gl.TEXTURE_2D, texture);
			for(let [state, materialDict] of textureDict){
				profileMgr.profile3d.stateSwitchCount++;
				renderState.merge(state);
				for(let [vao, vaoDict] of materialDict){
					let drawUnitList = Array.from(vaoDict.keys());
					if(drawUnitList.length <= 0)continue;
					profileMgr.profile3d.vaoSwitchCount++;
					vao.active();

					let drawUnit = drawUnitList[0];
					let {material} = drawUnit;

					if(program){
						material.onActiveUniform(camera, program);
						program = null;
					}
					material.onActiveVAO(drawUnit);
					material.draw(drawUnit, drawUnitList);
				}
			}
		}
	}
}

module.exports = RenderQueue;