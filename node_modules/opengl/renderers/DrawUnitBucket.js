'use strict';

const WebGL = require('../WebGL');
const ObjectBucket = require('ds/ObjectBucket');

class DrawUnitBucket extends ObjectBucket
{
	constructor(mapObjCache){
		super();
		this.mapObjCache = mapObjCache;
		this.regKeyFn(this.getShader, this.updateShader);
		this.regKeyFn(this.getTexture, this.updateTexture);
		this.regKeyFn(this.getRenderState, this.updateRenderState);
		this.regKeyFn(this.getVAO, this.updateVAO);
	}

	newMap(){
		return this.mapObjCache.getOut();
	}

	getShader(drawUnit, key){
		let material = key ? drawUnit[key] : drawUnit.material;
		return material.shader;
	}

	getTexture(drawUnit, key){
		let material = key ? drawUnit[key] : drawUnit.material;
		return material.texture;
	}

	getRenderState(drawUnit, key){
		let material = key ? drawUnit[key] : drawUnit.material;
		return material.renderState;
	}

	getVAO(drawUnit){
		return drawUnit.vao;
	}

	updateShader(value){
		if(this.get('shader') == value)return;
		this.set('shader', value);
		const {gl, programMgr, profileMgr} = WebGL;
		profileMgr.profile3d.shaderSwitchCount++;
		let program = programMgr.useProgram(value);
		this.set('address_InstanceIDBase', gl.getUniformLocation(program, 'InstanceIDBase'));
	}

	updateTexture(value){
		if(this.get('texture') == value)return;
		this.set('texture', value);
		WebGL.profileMgr.profile3d.textureSwitchCount++;
	}

	updateRenderState(value){
		if(this.get('renderState') == value)return;
		this.set('renderState', value);
		WebGL.profileMgr.profile3d.stateSwitchCount++;
		WebGL.renderState.merge(value);
	}

	updateVAO(value){
		if(this.get('vao') == value)return;
		this.set('vao', value);
		WebGL.profileMgr.profile3d.vaoSwitchCount++;
		value.active();
	}
}

module.exports = DrawUnitBucket;
