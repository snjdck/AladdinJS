'use strict';

const WebGL = require('./WebGL');
const DisplayObject2D = require('./DisplayObject2D');
const traverseTree = require('utils/traverseTree');

class Scene2D
{
	constructor(width, height){
		this.root = new DisplayObject2D();
		this.root._scene = this;
		this.width = width;
		this.height = height;
	}

	update(){
		this.root.onUpdate();
	}

	draw(mode){
		let {render2d} = WebGL;
		render2d.mode = mode;
		render2d.invalidate();
		//this.root.draw(mode);
		this.mode = mode;
		traverseTree.call(this, this.root, this.onDraw);
		render2d.submit();
	}

	onDraw(item){
		if(!item.visible)return true;
		const {filter, onDraw} = item;
		if(this.mode){
			if(onDraw)onDraw.call(item, this.mode);
			return;
		}
		if(filter){
			let {gl, render2d, renderStateStack, renderTargetMgr} = WebGL;
			render2d.submit();
			renderStateStack.save(gl.DRAW_FRAMEBUFFER_BINDING, gl.CURRENT_PROGRAM);
			filter.imageFrameBuffer = renderTargetMgr.borrowFrameBuffer();
		}
		if(onDraw)onDraw.call(item);
		return filter && this.onDrawFilter;
	}

	onDrawFilter({filter}){
		let {gl, render2d, renderStateStack, renderTargetMgr, programMgr} = WebGL;
		let {imageFrameBuffer} = filter;
		render2d.submit();
		let program = programMgr.useProgram(filter.shader);
		filter.onDraw(imageFrameBuffer.colorBuffer, program.address);
		renderTargetMgr.returnFrameBuffer(imageFrameBuffer);
		renderStateStack.load(gl.CURRENT_PROGRAM);
	}
}

module.exports = Scene2D;