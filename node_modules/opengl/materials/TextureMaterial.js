
const Material = require('./Material');
const {RenderState} = require('../renderers');
const WebGL = require('../WebGL');
const {ProgramName} = require('../const');

const nullBone = function(){
	let list = new Float32Array(8);
	list[3] = list[7] = 1;
	return list;
}()

class TextureMaterial extends Material{
	constructor(texture){
		super(ProgramName.shader3d_normal);
		this.texture = texture;
		//this.renderState = RenderState.Texture;
	}

	isTransparent(){
		return this.texture.transparent;
	}
/*
	onDraw(drawUnit, index, batchIndex){
		let {vao, boneMatrixList, subMesh} = drawUnit;
		let boneCount = subMesh.boneCount;
		let {gl} = WebGL;
		let program = gl.getParameter(gl.CURRENT_PROGRAM);
		if(index == 0 && batchIndex == 0){
			this.onBindTexture(gl);
		}
		if(subMesh.cpuMode){
			let isFirstBatch = batchIndex == 0;
			if(isFirstBatch){
				gl.uniform4fv(gl.getUniformLocation(program, `boneList[0]`), nullBone);
			}
			vao.updateVertexDataForCPU(boneMatrixList, isFirstBatch);
		}else{
			gl.uniform4fv(gl.getUniformLocation(program, `boneList[${index * boneCount << 1}]`), boneMatrixList);
		}
	}

	onBindTexture(gl){
		gl.bindTexture(gl.TEXTURE_2D, this.texture);
	}
*/
}

TextureMaterial.renderState = RenderState.Texture;
TextureMaterial.onDrawBatch = function(drawUnitList, offset, instanceCount, batchIndex){
	let {vao, subMesh} = drawUnitList[offset];
	let boneCount = subMesh.boneCount;
	let float32PerBone = boneCount << 3;
	let {gl} = WebGL;
	if(subMesh.cpuMode){
		let drawUnit = drawUnitList[offset];
		let isFirstBatch = batchIndex == 0;
		if(isFirstBatch){
			gl.uniform4fv(this.address_boneList, nullBone);
		}
		vao.updateVertexDataForCPU(drawUnit.boneMatrixList, isFirstBatch);
		return;
	}
	for(let i=0; i<instanceCount; ++i){
		let drawUnit = drawUnitList[offset+i];
		buffer.set(drawUnit.boneMatrixList, i * float32PerBone);
	}
	gl.uniform4fv(this.address_boneList, buffer.subarray(0, instanceCount * float32PerBone));
}
TextureMaterial.initUniformLocation = function(gl, program){
	this.address_boneList = gl.getUniformLocation(program, 'boneList[0]');
}

const buffer = new Float32Array(4096 * 4);

module.exports = TextureMaterial;