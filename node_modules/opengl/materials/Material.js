"use strict";

const batchDraw = require("../renderers/batchDraw");
const WebGL = require('../WebGL');

class Material{
	constructor(shader){
		this.shader = shader;
		this.isPickMode = false;
		this.addressInstanceID = 0;
	}
	draw(context, drawUnitList){
		let {render3d, profileMgr} = WebGL;
		let {uniformBuffer} = render3d;
		uniformBuffer.registerCount = context.vao.boneCount;
		let drawCount = batchDraw.call(this, uniformBuffer.maxInstanceCount, drawUnitList, context.vao);
		profileMgr.profile3d.drawCount += drawCount;
	}
	isTransparent(){return false;}
	onUpdate(){}
	onActiveUniform(camera, program){}
	onActiveVAO(drawUnit){}
	onDraw(uniformBuffer, drawUnit, index){}

	onPrepareBuffer(instanceCount){
		let {render3d} = WebGL;
		render3d.uniformBuffer.alloc(instanceCount);
	}

	onUpdateBuffer(instance, index){
		let {render3d, mouseMgr} = WebGL;
		let {uniformBuffer} = render3d;

		this.onDraw(uniformBuffer, instance, index);

		if(this.isPickMode){
			if(index == 0){
				uniformBuffer.setInts(this.addressInstanceID, mouseMgr.nextPickID);
			}
			mouseMgr.pickRegister(instance);
		}
	}

	onUploadBufferAndDraw(instanceCount, vao){
		let {render3d} = WebGL;
		render3d.uniformBuffer.upload(instanceCount);
		vao.draw(instanceCount);
	}
}

module.exports = Material;