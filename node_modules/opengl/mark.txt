function({m, a, b, n1, n2, n3}, i){
  let t = m * i / 4;
  return (Math.abs(Math.cos(t) / a) ** n2 + Math.abs(Math.sin(t) / b) ** n3) ** (-1 / n1);
}

Binding to the GL_FRAMEBUFFER target is equivalent to binding that framebuffer to both GL_DRAW_FRAMEBUFFER and GL_READ_FRAMEBUFFER.
Note that most other uses of GL_FRAMEBUFFER mean the draw framebuffer; this is the case when it means both.

https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext
https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL2RenderingContext

https://en.wikipedia.org/wiki/OpenGL_Shading_Language
https://www.khronos.org/registry/webgl/specs/latest/2.0/

WebGL 1.0 => OpenGL ES 2.0 + GLSL ES 1.00(GLSL 1.20) = #version 100 es
WebGL 2.0 => OpenGL ES 3.0 + GLSL ES 3.00(GLSL 3.30) = #version 300 es

Only std140 layout is allowed in WebGL

绘制缓冲区
WebGLRenderingContext.clear()
WebGLRenderingContext.drawArrays()
WebGLRenderingContext.drawElements()
WebGL2RenderingContext.vertexAttribDivisor()		Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with gl.drawArraysInstanced() and gl.drawElementsInstanced().
WebGL2RenderingContext.drawArraysInstanced()		Renders primitives from array data. In addition, it can execute multiple instances of the range of elements.
WebGL2RenderingContext.drawElementsInstanced()		Renders primitives from array data. In addition, it can execute multiple instances of a set of elements.
WebGL2RenderingContext.drawRangeElements()			Renders primitives from array data in a given range.
WebGL2RenderingContext.drawBuffers()				Specifies a list of color buffers to be drawn into.
WebGL2RenderingContext.clearBuffer[fiuv]()			Clears buffers from the currently bound framebuffer.

Uniform 和 Attribute
WebGLRenderingContext.getUniformLocation()
WebGLRenderingContext.uniformMatrix[234]fv()
WebGLRenderingContext.vertexAttrib[1234]f[v]()
WebGLRenderingContext.vertexAttribPointer()
WebGL2RenderingContext.uniform[1234][fiu][v]()
WebGL2RenderingContext.uniformMatrix[1234][fv]()
WebGL2RenderingContext.vertexAttribI[iuv]()			Methods specifying integer values for generic vertex attributes.
WebGL2RenderingContext.vertexAttribIPointer()		Specifies integer data formats and locations of vertex attributes in a vertex attributes array.

纹理
WebGLRenderingContext.createTexture()
WebGLRenderingContext.bindTexture()			bind to activeTexture unit, call order(activeTexture + bindTexture), default active texture unit is 0
WebGLRenderingContext.texParameterf()
WebGLRenderingContext.texParameteri()
WebGL2RenderingContext.texStorage2D()		Specifies all levels of two-dimensional texture storage.
WebGL2RenderingContext.texStorage3D()		Specifies all levels of a three-dimensional texture or two-dimensional array texture.
WebGLRenderingContext.texSubImage2D()
WebGL2RenderingContext.texSubImage3D()		Specifies a sub-rectangle of the current 3D texture.
WebGLRenderingContext.copyTexSubImage2D()
WebGL2RenderingContext.copyTexSubImage3D()	Copies pixels from the current WebGLFramebuffer into an existing 3D texture sub-image.

帧缓冲区
WebGLRenderingContext.readPixels()
WebGL2RenderingContext.blitFramebuffer()			将一个像素块从读取帧缓区冲传输到绘制帧缓冲区。
WebGL2RenderingContext.readBuffer()					选择一个颜色缓冲作为像素的source。

缓冲区
WebGLRenderingContext.bindBuffer()
WebGLRenderingContext.bufferData()
WebGLRenderingContext.bufferSubData()
WebGL2RenderingContext.copyBufferSubData()		将缓冲区的部分数据复制到另一个缓冲区。
WebGL2RenderingContext.getBufferSubData()		从缓冲区中读取数据，然后将其写入到 ArrayBuffer 或 SharedArrayBuffer 中。

状态信息
WebGLRenderingContext.activeTexture()			选择要激活的纹理单元。
WebGLRenderingContext.blendColor()				设置源和目标的混和因子。
WebGLRenderingContext.blendEquation()			用同一个表达式设置 RGB 混和表达式和 alpha 混和表达式。
WebGLRenderingContext.blendEquationSeparate()	分开设置 RGB 混和表达式和 alpha 混和表达式。
WebGLRenderingContext.blendFunc()				定义用于像素混合算法的函数。
WebGLRenderingContext.blendFuncSeparate()		分别定义混合像素RGB通道和透明通道的函数。
WebGLRenderingContext.clearColor()				设置用于清空用的颜色。
WebGLRenderingContext.clearDepth()				设置清除深度缓存时的深度值。
WebGLRenderingContext.clearStencil()			设置清除模板缓冲区时的模板值。
WebGLRenderingContext.colorMask()				设置在绘制或渲染WebGLFramebuffer时要开启或关闭的颜色分量。
WebGLRenderingContext.cullFace()				设置多边形的正面和/或反面是否要被排除。
WebGLRenderingContext.depthFunc()				设置比较输入像素深度和深度缓存值得函数。
WebGLRenderingContext.depthMask()				设置是否写入深度缓存。
WebGLRenderingContext.depthRange()				设置从规范化设备坐标映射到窗口或视口坐标时的深度范围。
WebGLRenderingContext.disable()					禁用这个上下文的WebGL功能。
WebGLRenderingContext.enable()					启用这个上下文的WebGL功能。
WebGLRenderingContext.frontFace()				设置多边形的正面使用顺时针还是逆时针绘制表示。
WebGLRenderingContext.getParameter()			返回给入参数名的值。
WebGLRenderingContext.getError()				返回错误信息。
WebGLRenderingContext.isEnabled()				测试这个上下文的WebGL功能是否开启。
WebGLRenderingContext.pixelStorei()				设置像素存储模式。
WebGLRenderingContext.polygonOffset()			设置多边形偏移的比例和单位，从而计算深度值。（补充：解决深度冲突）
WebGLRenderingContext.sampleCoverage()			为抗锯齿效果设置多重取样覆盖参数。
WebGLRenderingContext.stencilFunc()				同时设置前面和背面的模板测试函数，及其引用值。
WebGLRenderingContext.stencilFuncSeparate()		可分开设置前面或背面的模板测试函数，及其引用值。
WebGLRenderingContext.stencilMask()				同时启用或禁用，前面和背面的模板测试掩码。
WebGLRenderingContext.stencilMaskSeparate()		可分开启用或禁用，前面和背面的模板测试掩码。
WebGLRenderingContext.stencilOp()				同时设置，在前面和背面的模板缓冲区上执行的操作。
WebGLRenderingContext.stencilOpSeparate()		可分开设置，在前面和背面的模板缓冲区上执行的操作。

Uniform 缓冲对象
WebGL2RenderingContext.bindBufferBase()			Binds a given WebGLBuffer to a given binding point (target) at a given index.
WebGL2RenderingContext.bindBufferRange()		Binds a range of a given WebGLBuffer to a given binding point (target) at a given index.

