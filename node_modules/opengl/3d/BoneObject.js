'use strict';

const {Matrix3D} = require('../math');
const Mat3x4 = require('webgpu/mat3x4');

class BoneObject
{
	constructor(parent, id){
		this.parent = parent;
		this.id = id;
		this.transform = new Matrix3D();
		this.worldTransform = new Matrix3D();
		this.nextSibling = null;
		this.firstChild = null;
	}

	get lastSibling(){
		let test = this;
		while(test.nextSibling)
			test = test.nextSibling;
		return test;
	}

	addChild(value){
		if(this.firstChild){
			this.firstChild.addSibling(value);
		}else{
			this.firstChild = value;
		}
	}
		
	addSibling(value){
		this.lastSibling.nextSibling = value;
	}

	forEachSibling(self, handler){
		let test = this;
		while(test){
			handler.call(self, test);
			test = test.nextSibling;
		}
	}

	forEachBone(self, handlerBefore, handlerAfter){
		const {nextSibling, firstChild} = this;
		if(handlerBefore){
			handlerBefore.call(self, this);
		}
		if(nextSibling){
			nextSibling.forEachBone(self, handlerBefore, handlerAfter);
		}
		if(firstChild){
			firstChild.forEachBone(self, handlerBefore, handlerAfter);
		}
		/*
		if(handlerAfter){
			handlerAfter.call(self, this);
		}
		//*/
	}

	get worldMatrix(){
		if(!this._worldMatrix){
			this._worldMatrix = new Mat3x4();
		}
		if(this._isWorldMatrixDirty){
			const {rotation, translation} = this.worldTransform;
			this._worldMatrix.compose(rotation, translation);
			this._isWorldMatrixDirty = false;
		}
		return this._worldMatrix;
	}

	getBoneWorldMatrix(boneName){
		return this.boneDict[boneName].worldMatrix;
	}

	copyToBuffer(buffer){
		this.forEachBone(buffer, onCopyToBuffer);
	}

	updateBone(entity){
		this.forEachBone(entity, onUpdateBone);
	}
}

function onCopyToBuffer(bone){
	const {id, worldTransform} = bone;
	worldTransform.copyToArray(this, id << 3);
}

function onUpdateBone(bone){
	const {animation, animationTime} = this;
	const {id, worldTransform, transform, parent} = bone;
	bone._isWorldMatrixDirty = true;
	animation.calcTransform(id, animationTime, transform);
	if(parent){
		transform.append(parent.worldTransform, worldTransform);
	}else{
		worldTransform.copyFrom(transform);
	}
}

module.exports = BoneObject;
