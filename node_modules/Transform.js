"use strict";

const EventEmitter = require("events");

class Transform{
	constructor(MatrixType){
		let events = new EventEmitter();
		Object.defineProperty(this, "events", {value:events});
		Object.defineProperty(events, "target", {value:this});
		this._isWorldMatrixDirty = false;
		this._isLocalMatrixDirty = false;
		this._isWorldMatrixInvertDirty = false;
		this._isLocalMatrixInvertDirty = false;
		this._worldMatrix = new MatrixType();
		this._localMatrix = new MatrixType();
		this._worldMatrixInvert = new MatrixType();
		this._localMatrixInvert = new MatrixType();
	}

	getParent(){
		return this._parent;
	}

	getChildren(){
		return this._children;
	}

	contains(target){
		while(target != null){
			if(target == this)
				return true;
			target = target.getParent();
		}
		return false;
	}

	get worldTransform(){
		if(this._isWorldMatrixDirty){
			let parent = this.getParent();
			if(parent != null){
				this.transform.append(parent.worldTransform, this._worldMatrix);
			}else{
				this._worldMatrix.copyFrom(this.transform);
			}
			this._isWorldMatrixDirty = false;
		}
		return this._worldMatrix;
	}

	get transform(){
		return this._localMatrix;
	}

	get worldTransformInvert(){
		if(this._isWorldMatrixInvertDirty){
			this.worldTransform.invert(this._worldMatrixInvert);
			this._isWorldMatrixInvertDirty = false;
		}
		return this._worldMatrixInvert;
	}

	get transformInvert(){
		if(this._isLocalMatrixInvertDirty){
			this.transform.invert(this._localMatrixInvert);
			this._isLocalMatrixInvertDirty = false;
		}
		return this._localMatrixInvert;
	}

	markLocalMatrixDirty(){
		if(this._isLocalMatrixDirty)
			return;
		this._isLocalMatrixDirty = true;
		this._isLocalMatrixInvertDirty = true;
		this.onLocalMatrixDirty();
	}

	markWorldMatrixDirty(){
		if(this._isWorldMatrixDirty)
			return;
		this._isWorldMatrixDirty = true;
		this._isWorldMatrixInvertDirty = true;
		this.onWorldMatrixDirty();
		let children = this.getChildren();
		if(null == children){
			return;
		}
		for(let child of children){
			child.markWorldMatrixDirty();
		}
	}

	onTransformChanged(){
		this.markLocalMatrixDirty();
		this.markWorldMatrixDirty();
	}

	onLocalMatrixDirty(){}
	onWorldMatrixDirty(){}
	
	calculateRelativeTransform(target, result){
		if(target == null){
			result.copyFrom(this.worldTransform);
			return;
		}
		if(target == this){
			result.identity();
			return;
		}
		if(target == this.getParent()){
			result.copyFrom(this.transform);
			return;
		}
		if(target.getParent() == this){
			result.copyFrom(target.transformInvert);
			return;
		}
		if(this.contains(target)){
			target.calculateRelativeTransform(this, result);
			result.invert();
			return;
		}
		if(target.contains(this)){
			result.identity();
			let node = this;
			while(node != target){
				result.append(node.transform);
				node = node.getParent();
			}
			return;
		}
		this.worldTransform.append(target.worldTransformInvert, result);
	}

	addListener(eventName, listener, once=false){
		if(once){
			this.events.once(eventName, listener);
		}else{
			this.events.addListener(eventName, listener);
		}
	}

	removeListener(eventName, listener){
		this.events.removeListener(eventName, listener);
	}

	removeAllListeners(eventName){
		this.events.removeAllListeners(eventName);
	}

	listenerCount(eventName){
		return this.events.listenerCount(eventName);
	}
}

module.exports = Transform;