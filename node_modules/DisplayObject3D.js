"use strict";

const Transform3D = require("./Transform3D");

class DisplayObject3D extends Transform3D{
	constructor(){
		super();
		Object.defineProperty(this, "_children", {value:[]});
		this.visible = true;
		this.castShadow = false;
		this.mouseEnabled = false;
		this.mouseChildren = true;
		this.materials = [];
		this.hitTestMaterial = null;
	}

	isVisible(){
		return this.visible && super.isVisible();
	}

	getChildAt(index){
		return this._children[index];
	}

	addChild(child){
		if(child.parent){
			if(child.parent == this){
				return child;
			}
			child.parent.removeChild(child);
		}
		this._children.push(child);
		child._parent = this;
		child.markWorldMatrixDirty();
		return child;
	}

	removeChild(child){
		let index = this._children.indexOf(child);
		if(index < 0)return;
		this._children.splice(index, 1);
		child._parent = null;
	}

	onUpdate(timeElapsed){
		for(let material of this.materials){
			material.onUpdate(timeElapsed);
		}
		for(let child of this._children){
			if(child.isVisible()){
				child.onUpdate(timeElapsed);
			}
		}
	}

	collectDrawUnits(collector, gl, mode){
		for(let child of this._children){
			if(child.isVisible()){
				child.collectDrawUnits(collector, gl, mode);
			}
		}
	}
}

module.exports = DisplayObject3D;